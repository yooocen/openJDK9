//
// Copyright (c) 2003, 2015, Oracle and/or its affiliates. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License version 2 only, as
// published by the Free Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// You should have received a copy of the GNU General Public License version
// 2 along with this work; if not, write to the Free Software Foundation,
// Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
//
// Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
// or visit www.oracle.com if you need additional information or have any
// questions.
//
//

// Machine Generated File.  Do Not Edit!

#include "precompiled.hpp"
#include "adfiles/adGlobals_x86.hpp"
#include "adfiles/ad_x86.hpp"
#include "memory/allocation.inline.hpp"
#include "asm/macroAssembler.inline.hpp"
#include "code/compiledIC.hpp"
#include "code/nativeInst.hpp"
#include "code/vmreg.inline.hpp"
#include "gc/shared/collectedHeap.inline.hpp"
#include "oops/compiledICHolder.hpp"
#include "oops/markOop.hpp"
#include "oops/method.hpp"
#include "oops/oop.inline.hpp"
#include "opto/cfgnode.hpp"
#include "opto/intrinsicnode.hpp"
#include "opto/locknode.hpp"
#include "opto/opcodes.hpp"
#include "opto/regalloc.hpp"
#include "opto/regmask.hpp"
#include "opto/runtime.hpp"
#include "runtime/biasedLocking.hpp"
#include "runtime/sharedRuntime.hpp"
#include "runtime/stubRoutines.hpp"
#include "utilities/growableArray.hpp"

//SourceForm

#line 532 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

#define   RELOC_IMM64    Assembler::imm_operand
#define   RELOC_DISP32   Assembler::disp32_operand

#define __ _masm.

static int clear_avx_size() {
  return (Compile::current()->max_vector_size() > 16) ? 3 : 0;  // vzeroupper
}

// !!!!! Special hack to get all types of calls to specify the byte offset
//       from the start of the call to the point where the return address
//       will point.
int MachCallStaticJavaNode::ret_addr_offset()
{
  int offset = 5; // 5 bytes from start of call to where return address points
  offset += clear_avx_size();
  return offset;
}

int MachCallDynamicJavaNode::ret_addr_offset()
{
  int offset = 15; // 15 bytes from start of call to where return address points
  offset += clear_avx_size();
  return offset;
}

int MachCallRuntimeNode::ret_addr_offset() {
  int offset = 13; // movq r10,#addr; callq (r10)
  offset += clear_avx_size();
  return offset;
}

// Indicate if the safepoint node needs the polling page as an input,
// it does if the polling page is more than disp32 away.
bool SafePointNode::needs_polling_address_input()
{
  return Assembler::is_polling_page_far();
}

//
// Compute padding required for nodes which need alignment
//

// The address of the call instruction needs to be 4-byte aligned to
// ensure that it does not span a cache line so that it can be patched.
int CallStaticJavaDirectNode::compute_padding(int current_offset) const
{
  current_offset += clear_avx_size(); // skip vzeroupper
  current_offset += 1; // skip call opcode byte
  return round_to(current_offset, alignment_required()) - current_offset;
}

// The address of the call instruction needs to be 4-byte aligned to
// ensure that it does not span a cache line so that it can be patched.
int CallDynamicJavaDirectNode::compute_padding(int current_offset) const
{
  current_offset += clear_avx_size(); // skip vzeroupper
  current_offset += 11; // skip movq instruction + call opcode byte
  return round_to(current_offset, alignment_required()) - current_offset;
}

// EMIT_RM()
void emit_rm(CodeBuffer &cbuf, int f1, int f2, int f3) {
  unsigned char c = (unsigned char) ((f1 << 6) | (f2 << 3) | f3);
  cbuf.insts()->emit_int8(c);
}

// EMIT_CC()
void emit_cc(CodeBuffer &cbuf, int f1, int f2) {
  unsigned char c = (unsigned char) (f1 | f2);
  cbuf.insts()->emit_int8(c);
}

// EMIT_OPCODE()
void emit_opcode(CodeBuffer &cbuf, int code) {
  cbuf.insts()->emit_int8((unsigned char) code);
}

// EMIT_OPCODE() w/ relocation information
void emit_opcode(CodeBuffer &cbuf,
                 int code, relocInfo::relocType reloc, int offset, int format)
{
  cbuf.relocate(cbuf.insts_mark() + offset, reloc, format);
  emit_opcode(cbuf, code);
}

// EMIT_D8()
void emit_d8(CodeBuffer &cbuf, int d8) {
  cbuf.insts()->emit_int8((unsigned char) d8);
}

// EMIT_D16()
void emit_d16(CodeBuffer &cbuf, int d16) {
  cbuf.insts()->emit_int16(d16);
}

// EMIT_D32()
void emit_d32(CodeBuffer &cbuf, int d32) {
  cbuf.insts()->emit_int32(d32);
}

// EMIT_D64()
void emit_d64(CodeBuffer &cbuf, int64_t d64) {
  cbuf.insts()->emit_int64(d64);
}

// emit 32 bit value and construct relocation entry from relocInfo::relocType
void emit_d32_reloc(CodeBuffer& cbuf,
                    int d32,
                    relocInfo::relocType reloc,
                    int format)
{
  assert(reloc != relocInfo::external_word_type, "use 2-arg emit_d32_reloc");
  cbuf.relocate(cbuf.insts_mark(), reloc, format);
  cbuf.insts()->emit_int32(d32);
}

// emit 32 bit value and construct relocation entry from RelocationHolder
void emit_d32_reloc(CodeBuffer& cbuf, int d32, RelocationHolder const& rspec, int format) {
#ifdef ASSERT
  if (rspec.reloc()->type() == relocInfo::oop_type &&
      d32 != 0 && d32 != (intptr_t) Universe::non_oop_word()) {
    assert(Universe::heap()->is_in_reserved((address)(intptr_t)d32), "should be real oop");
    assert(cast_to_oop((intptr_t)d32)->is_oop() && (ScavengeRootsInCode || !cast_to_oop((intptr_t)d32)->is_scavengable()), "cannot embed scavengable oops in code");
  }
#endif
  cbuf.relocate(cbuf.insts_mark(), rspec, format);
  cbuf.insts()->emit_int32(d32);
}

void emit_d32_reloc(CodeBuffer& cbuf, address addr) {
  address next_ip = cbuf.insts_end() + 4;
  emit_d32_reloc(cbuf, (int) (addr - next_ip),
                 external_word_Relocation::spec(addr),
                 RELOC_DISP32);
}


// emit 64 bit value and construct relocation entry from relocInfo::relocType
void emit_d64_reloc(CodeBuffer& cbuf, int64_t d64, relocInfo::relocType reloc, int format) {
  cbuf.relocate(cbuf.insts_mark(), reloc, format);
  cbuf.insts()->emit_int64(d64);
}

// emit 64 bit value and construct relocation entry from RelocationHolder
void emit_d64_reloc(CodeBuffer& cbuf, int64_t d64, RelocationHolder const& rspec, int format) {
#ifdef ASSERT
  if (rspec.reloc()->type() == relocInfo::oop_type &&
      d64 != 0 && d64 != (int64_t) Universe::non_oop_word()) {
    assert(Universe::heap()->is_in_reserved((address)d64), "should be real oop");
    assert(cast_to_oop(d64)->is_oop() && (ScavengeRootsInCode || !cast_to_oop(d64)->is_scavengable()),
           "cannot embed scavengable oops in code");
  }
#endif
  cbuf.relocate(cbuf.insts_mark(), rspec, format);
  cbuf.insts()->emit_int64(d64);
}

// Access stack slot for load or store
void store_to_stackslot(CodeBuffer &cbuf, int opcode, int rm_field, int disp)
{
  emit_opcode(cbuf, opcode);                  // (e.g., FILD   [RSP+src])
  if (-0x80 <= disp && disp < 0x80) {
    emit_rm(cbuf, 0x01, rm_field, RSP_enc);   // R/M byte
    emit_rm(cbuf, 0x00, RSP_enc, RSP_enc);    // SIB byte
    emit_d8(cbuf, disp);     // Displacement  // R/M byte
  } else {
    emit_rm(cbuf, 0x02, rm_field, RSP_enc);   // R/M byte
    emit_rm(cbuf, 0x00, RSP_enc, RSP_enc);    // SIB byte
    emit_d32(cbuf, disp);     // Displacement // R/M byte
  }
}

   // rRegI ereg, memory mem) %{    // emit_reg_mem
void encode_RegMem(CodeBuffer &cbuf,
                   int reg,
                   int base, int index, int scale, int disp, relocInfo::relocType disp_reloc)
{
  assert(disp_reloc == relocInfo::none, "cannot have disp");
  int regenc = reg & 7;
  int baseenc = base & 7;
  int indexenc = index & 7;

  // There is no index & no scale, use form without SIB byte
  if (index == 0x4 && scale == 0 && base != RSP_enc && base != R12_enc) {
    // If no displacement, mode is 0x0; unless base is [RBP] or [R13]
    if (disp == 0 && base != RBP_enc && base != R13_enc) {
      emit_rm(cbuf, 0x0, regenc, baseenc); // *
    } else if (-0x80 <= disp && disp < 0x80 && disp_reloc == relocInfo::none) {
      // If 8-bit displacement, mode 0x1
      emit_rm(cbuf, 0x1, regenc, baseenc); // *
      emit_d8(cbuf, disp);
    } else {
      // If 32-bit displacement
      if (base == -1) { // Special flag for absolute address
        emit_rm(cbuf, 0x0, regenc, 0x5); // *
        if (disp_reloc != relocInfo::none) {
          emit_d32_reloc(cbuf, disp, relocInfo::oop_type, RELOC_DISP32);
        } else {
          emit_d32(cbuf, disp);
        }
      } else {
        // Normal base + offset
        emit_rm(cbuf, 0x2, regenc, baseenc); // *
        if (disp_reloc != relocInfo::none) {
          emit_d32_reloc(cbuf, disp, relocInfo::oop_type, RELOC_DISP32);
        } else {
          emit_d32(cbuf, disp);
        }
      }
    }
  } else {
    // Else, encode with the SIB byte
    // If no displacement, mode is 0x0; unless base is [RBP] or [R13]
    if (disp == 0 && base != RBP_enc && base != R13_enc) {
      // If no displacement
      emit_rm(cbuf, 0x0, regenc, 0x4); // *
      emit_rm(cbuf, scale, indexenc, baseenc);
    } else {
      if (-0x80 <= disp && disp < 0x80 && disp_reloc == relocInfo::none) {
        // If 8-bit displacement, mode 0x1
        emit_rm(cbuf, 0x1, regenc, 0x4); // *
        emit_rm(cbuf, scale, indexenc, baseenc);
        emit_d8(cbuf, disp);
      } else {
        // If 32-bit displacement
        if (base == 0x04 ) {
          emit_rm(cbuf, 0x2, regenc, 0x4);
          emit_rm(cbuf, scale, indexenc, 0x04); // XXX is this valid???
        } else {
          emit_rm(cbuf, 0x2, regenc, 0x4);
          emit_rm(cbuf, scale, indexenc, baseenc); // *
        }
        if (disp_reloc != relocInfo::none) {
          emit_d32_reloc(cbuf, disp, relocInfo::oop_type, RELOC_DISP32);
        } else {
          emit_d32(cbuf, disp);
        }
      }
    }
  }
}

// This could be in MacroAssembler but it's fairly C2 specific
void emit_cmpfp_fixup(MacroAssembler& _masm) {
  Label exit;
  __ jccb(Assembler::noParity, exit);
  __ pushf();
  //
  // comiss/ucomiss instructions set ZF,PF,CF flags and
  // zero OF,AF,SF for NaN values.
  // Fixup flags by zeroing ZF,PF so that compare of NaN
  // values returns 'less than' result (CF is set).
  // Leave the rest of flags unchanged.
  //
  //    7 6 5 4 3 2 1 0
  //   |S|Z|r|A|r|P|r|C|  (r - reserved bit)
  //    0 0 1 0 1 0 1 1   (0x2B)
  //
  __ andq(Address(rsp, 0), 0xffffff2b);
  __ popf();
  __ bind(exit);
}

void emit_cmpfp3(MacroAssembler& _masm, Register dst) {
  Label done;
  __ movl(dst, -1);
  __ jcc(Assembler::parity, done);
  __ jcc(Assembler::below, done);
  __ setb(Assembler::notEqual, dst);
  __ movzbl(dst, dst);
  __ bind(done);
}


//=============================================================================
const RegMask& MachConstantBaseNode::_out_RegMask = RegMask::Empty;

int Compile::ConstantTable::calculate_table_base_offset() const {
  return 0;  // absolute addressing, no offset
}

bool MachConstantBaseNode::requires_postalloc_expand() const { return false; }
void MachConstantBaseNode::postalloc_expand(GrowableArray <Node *> *nodes, PhaseRegAlloc *ra_) {
  ShouldNotReachHere();
}

void MachConstantBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  // Empty encoding
}

uint MachConstantBaseNode::size(PhaseRegAlloc* ra_) const {
  return 0;
}

#ifndef PRODUCT
void MachConstantBaseNode::format(PhaseRegAlloc* ra_, outputStream* st) const {
  st->print("# MachConstantBaseNode (empty encoding)");
}
#endif


//=============================================================================
#ifndef PRODUCT
void MachPrologNode::format(PhaseRegAlloc* ra_, outputStream* st) const {
  Compile* C = ra_->C;

  int framesize = C->frame_size_in_bytes();
  int bangsize = C->bang_size_in_bytes();
  assert((framesize & (StackAlignmentInBytes-1)) == 0, "frame size not aligned");
  // Remove wordSize for return addr which is already pushed.
  framesize -= wordSize;

  if (C->need_stack_bang(bangsize)) {
    framesize -= wordSize;
    st->print("# stack bang (%d bytes)", bangsize);
    st->print("\n\t");
    st->print("pushq   rbp\t# Save rbp");
    if (PreserveFramePointer) {
        st->print("\n\t");
        st->print("movq    rbp, rsp\t# Save the caller's SP into rbp");
    }
    if (framesize) {
      st->print("\n\t");
      st->print("subq    rsp, #%d\t# Create frame",framesize);
    }
  } else {
    st->print("subq    rsp, #%d\t# Create frame",framesize);
    st->print("\n\t");
    framesize -= wordSize;
    st->print("movq    [rsp + #%d], rbp\t# Save rbp",framesize);
    if (PreserveFramePointer) {
      st->print("\n\t");
      st->print("movq    rbp, rsp\t# Save the caller's SP into rbp");
      if (framesize > 0) {
        st->print("\n\t");
        st->print("addq    rbp, #%d", framesize);
      }
    }
  }

  if (VerifyStackAtCalls) {
    st->print("\n\t");
    framesize -= wordSize;
    st->print("movq    [rsp + #%d], 0xbadb100d\t# Majik cookie for stack depth check",framesize);
#ifdef ASSERT
    st->print("\n\t");
    st->print("# stack alignment check");
#endif
  }
  st->cr();
}
#endif

void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {
  Compile* C = ra_->C;
  MacroAssembler _masm(&cbuf);

  int framesize = C->frame_size_in_bytes();
  int bangsize = C->bang_size_in_bytes();

  __ verified_entry(framesize, C->need_stack_bang(bangsize)?bangsize:0, false);

  C->set_frame_complete(cbuf.insts_size());

  if (C->has_mach_constant_base_node()) {
    // NOTE: We set the table base offset here because users might be
    // emitted before MachConstantBaseNode.
    Compile::ConstantTable& constant_table = C->constant_table();
    constant_table.set_table_base_offset(constant_table.calculate_table_base_offset());
  }
}

uint MachPrologNode::size(PhaseRegAlloc* ra_) const
{
  return MachNode::size(ra_); // too many variables; just compute it
                              // the hard way
}

int MachPrologNode::reloc() const
{
  return 0; // a large enough number
}

//=============================================================================
#ifndef PRODUCT
void MachEpilogNode::format(PhaseRegAlloc* ra_, outputStream* st) const
{
  Compile* C = ra_->C;
  if (C->max_vector_size() > 16) {
    st->print("vzeroupper");
    st->cr(); st->print("\t");
  }

  int framesize = C->frame_size_in_bytes();
  assert((framesize & (StackAlignmentInBytes-1)) == 0, "frame size not aligned");
  // Remove word for return adr already pushed
  // and RBP
  framesize -= 2*wordSize;

  if (framesize) {
    st->print_cr("addq    rsp, %d\t# Destroy frame", framesize);
    st->print("\t");
  }

  st->print_cr("popq   rbp");
  if (do_polling() && C->is_method_compilation()) {
    st->print("\t");
    if (Assembler::is_polling_page_far()) {
      st->print_cr("movq   rscratch1, #polling_page_address\n\t"
                   "testl  rax, [rscratch1]\t"
                   "# Safepoint: poll for GC");
    } else {
      st->print_cr("testl  rax, [rip + #offset_to_poll_page]\t"
                   "# Safepoint: poll for GC");
    }
  }
}
#endif

void MachEpilogNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const
{
  Compile* C = ra_->C;
  MacroAssembler _masm(&cbuf);

  if (C->max_vector_size() > 16) {
    // Clear upper bits of YMM registers when current compiled code uses
    // wide vectors to avoid AVX <-> SSE transition penalty during call.
    __ vzeroupper();
  }

  int framesize = C->frame_size_in_bytes();
  assert((framesize & (StackAlignmentInBytes-1)) == 0, "frame size not aligned");
  // Remove word for return adr already pushed
  // and RBP
  framesize -= 2*wordSize;

  // Note that VerifyStackAtCalls' Majik cookie does not change the frame size popped here

  if (framesize) {
    emit_opcode(cbuf, Assembler::REX_W);
    if (framesize < 0x80) {
      emit_opcode(cbuf, 0x83); // addq rsp, #framesize
      emit_rm(cbuf, 0x3, 0x00, RSP_enc);
      emit_d8(cbuf, framesize);
    } else {
      emit_opcode(cbuf, 0x81); // addq rsp, #framesize
      emit_rm(cbuf, 0x3, 0x00, RSP_enc);
      emit_d32(cbuf, framesize);
    }
  }

  // popq rbp
  emit_opcode(cbuf, 0x58 | RBP_enc);

  if (StackReservedPages > 0 && C->has_reserved_stack_access()) {
    __ reserved_stack_check();
  }

  if (do_polling() && C->is_method_compilation()) {
    MacroAssembler _masm(&cbuf);
    AddressLiteral polling_page(os::get_polling_page(), relocInfo::poll_return_type);
    if (Assembler::is_polling_page_far()) {
      __ lea(rscratch1, polling_page);
      __ relocate(relocInfo::poll_return_type);
      __ testl(rax, Address(rscratch1, 0));
    } else {
      __ testl(rax, polling_page);
    }
  }
}

uint MachEpilogNode::size(PhaseRegAlloc* ra_) const
{
  return MachNode::size(ra_); // too many variables; just compute it
                              // the hard way
}

int MachEpilogNode::reloc() const
{
  return 2; // a large enough number
}

const Pipeline* MachEpilogNode::pipeline() const
{
  return MachNode::pipeline_class();
}

int MachEpilogNode::safepoint_offset() const
{
  return 0;
}

//=============================================================================

enum RC {
  rc_bad,
  rc_int,
  rc_float,
  rc_stack
};

static enum RC rc_class(OptoReg::Name reg)
{
  if( !OptoReg::is_valid(reg)  ) return rc_bad;

  if (OptoReg::is_stack(reg)) return rc_stack;

  VMReg r = OptoReg::as_VMReg(reg);

  if (r->is_Register()) return rc_int;

  assert(r->is_XMMRegister(), "must be");
  return rc_float;
}

// Next two methods are shared by 32- and 64-bit VM. They are defined in x86.ad.
static int vec_mov_helper(CodeBuffer *cbuf, bool do_size, int src_lo, int dst_lo,
                          int src_hi, int dst_hi, uint ireg, outputStream* st);

static int vec_spill_helper(CodeBuffer *cbuf, bool do_size, bool is_load,
                            int stack_offset, int reg, uint ireg, outputStream* st);

static void vec_stack_to_stack_helper(CodeBuffer *cbuf, int src_offset,
                                      int dst_offset, uint ireg, outputStream* st) {
  if (cbuf) {
    MacroAssembler _masm(cbuf);
    switch (ireg) {
    case Op_VecS:
      __ movq(Address(rsp, -8), rax);
      __ movl(rax, Address(rsp, src_offset));
      __ movl(Address(rsp, dst_offset), rax);
      __ movq(rax, Address(rsp, -8));
      break;
    case Op_VecD:
      __ pushq(Address(rsp, src_offset));
      __ popq (Address(rsp, dst_offset));
      break;
    case Op_VecX:
      __ pushq(Address(rsp, src_offset));
      __ popq (Address(rsp, dst_offset));
      __ pushq(Address(rsp, src_offset+8));
      __ popq (Address(rsp, dst_offset+8));
      break;
    case Op_VecY:
      __ vmovdqu(Address(rsp, -32), xmm0);
      __ vmovdqu(xmm0, Address(rsp, src_offset));
      __ vmovdqu(Address(rsp, dst_offset), xmm0);
      __ vmovdqu(xmm0, Address(rsp, -32));
      break;
    case Op_VecZ:
      __ evmovdquq(Address(rsp, -64), xmm0, 2);
      __ evmovdquq(xmm0, Address(rsp, src_offset), 2);
      __ evmovdquq(Address(rsp, dst_offset), xmm0, 2);
      __ evmovdquq(xmm0, Address(rsp, -64), 2);
      break;
    default:
      ShouldNotReachHere();
    }
#ifndef PRODUCT
  } else {
    switch (ireg) {
    case Op_VecS:
      st->print("movq    [rsp - #8], rax\t# 32-bit mem-mem spill\n\t"
                "movl    rax, [rsp + #%d]\n\t"
                "movl    [rsp + #%d], rax\n\t"
                "movq    rax, [rsp - #8]",
                src_offset, dst_offset);
      break;
    case Op_VecD:
      st->print("pushq   [rsp + #%d]\t# 64-bit mem-mem spill\n\t"
                "popq    [rsp + #%d]",
                src_offset, dst_offset);
      break;
     case Op_VecX:
      st->print("pushq   [rsp + #%d]\t# 128-bit mem-mem spill\n\t"
                "popq    [rsp + #%d]\n\t"
                "pushq   [rsp + #%d]\n\t"
                "popq    [rsp + #%d]",
                src_offset, dst_offset, src_offset+8, dst_offset+8);
      break;
    case Op_VecY:
      st->print("vmovdqu [rsp - #32], xmm0\t# 256-bit mem-mem spill\n\t"
                "vmovdqu xmm0, [rsp + #%d]\n\t"
                "vmovdqu [rsp + #%d], xmm0\n\t"
                "vmovdqu xmm0, [rsp - #32]",
                src_offset, dst_offset);
      break;
    case Op_VecZ:
      st->print("vmovdqu [rsp - #64], xmm0\t# 512-bit mem-mem spill\n\t"
                "vmovdqu xmm0, [rsp + #%d]\n\t"
                "vmovdqu [rsp + #%d], xmm0\n\t"
                "vmovdqu xmm0, [rsp - #64]",
                src_offset, dst_offset);
      break;
    default:
      ShouldNotReachHere();
    }
#endif
  }
}

uint MachSpillCopyNode::implementation(CodeBuffer* cbuf,
                                       PhaseRegAlloc* ra_,
                                       bool do_size,
                                       outputStream* st) const {
  assert(cbuf != NULL || st  != NULL, "sanity");
  // Get registers to move
  OptoReg::Name src_second = ra_->get_reg_second(in(1));
  OptoReg::Name src_first = ra_->get_reg_first(in(1));
  OptoReg::Name dst_second = ra_->get_reg_second(this);
  OptoReg::Name dst_first = ra_->get_reg_first(this);

  enum RC src_second_rc = rc_class(src_second);
  enum RC src_first_rc = rc_class(src_first);
  enum RC dst_second_rc = rc_class(dst_second);
  enum RC dst_first_rc = rc_class(dst_first);

  assert(OptoReg::is_valid(src_first) && OptoReg::is_valid(dst_first),
         "must move at least 1 register" );

  if (src_first == dst_first && src_second == dst_second) {
    // Self copy, no move
    return 0;
  }
  if (bottom_type()->isa_vect() != NULL) {
    uint ireg = ideal_reg();
    assert((src_first_rc != rc_int && dst_first_rc != rc_int), "sanity");
    assert((ireg == Op_VecS || ireg == Op_VecD || ireg == Op_VecX || ireg == Op_VecY || ireg == Op_VecZ ), "sanity");
    if( src_first_rc == rc_stack && dst_first_rc == rc_stack ) {
      // mem -> mem
      int src_offset = ra_->reg2offset(src_first);
      int dst_offset = ra_->reg2offset(dst_first);
      vec_stack_to_stack_helper(cbuf, src_offset, dst_offset, ireg, st);
    } else if (src_first_rc == rc_float && dst_first_rc == rc_float ) {
      vec_mov_helper(cbuf, false, src_first, dst_first, src_second, dst_second, ireg, st);
    } else if (src_first_rc == rc_float && dst_first_rc == rc_stack ) {
      int stack_offset = ra_->reg2offset(dst_first);
      vec_spill_helper(cbuf, false, false, stack_offset, src_first, ireg, st);
    } else if (src_first_rc == rc_stack && dst_first_rc == rc_float ) {
      int stack_offset = ra_->reg2offset(src_first);
      vec_spill_helper(cbuf, false, true,  stack_offset, dst_first, ireg, st);
    } else {
      ShouldNotReachHere();
    }
    return 0;
  }
  if (src_first_rc == rc_stack) {
    // mem ->
    if (dst_first_rc == rc_stack) {
      // mem -> mem
      assert(src_second != dst_first, "overlap");
      if ((src_first & 1) == 0 && src_first + 1 == src_second &&
          (dst_first & 1) == 0 && dst_first + 1 == dst_second) {
        // 64-bit
        int src_offset = ra_->reg2offset(src_first);
        int dst_offset = ra_->reg2offset(dst_first);
        if (cbuf) {
          MacroAssembler _masm(cbuf);
          __ pushq(Address(rsp, src_offset));
          __ popq (Address(rsp, dst_offset));
#ifndef PRODUCT
        } else {
          st->print("pushq   [rsp + #%d]\t# 64-bit mem-mem spill\n\t"
                    "popq    [rsp + #%d]",
                     src_offset, dst_offset);
#endif
        }
      } else {
        // 32-bit
        assert(!((src_first & 1) == 0 && src_first + 1 == src_second), "no transform");
        assert(!((dst_first & 1) == 0 && dst_first + 1 == dst_second), "no transform");
        // No pushl/popl, so:
        int src_offset = ra_->reg2offset(src_first);
        int dst_offset = ra_->reg2offset(dst_first);
        if (cbuf) {
          MacroAssembler _masm(cbuf);
          __ movq(Address(rsp, -8), rax);
          __ movl(rax, Address(rsp, src_offset));
          __ movl(Address(rsp, dst_offset), rax);
          __ movq(rax, Address(rsp, -8));
#ifndef PRODUCT
        } else {
          st->print("movq    [rsp - #8], rax\t# 32-bit mem-mem spill\n\t"
                    "movl    rax, [rsp + #%d]\n\t"
                    "movl    [rsp + #%d], rax\n\t"
                    "movq    rax, [rsp - #8]",
                     src_offset, dst_offset);
#endif
        }
      }
      return 0;
    } else if (dst_first_rc == rc_int) {
      // mem -> gpr
      if ((src_first & 1) == 0 && src_first + 1 == src_second &&
          (dst_first & 1) == 0 && dst_first + 1 == dst_second) {
        // 64-bit
        int offset = ra_->reg2offset(src_first);
        if (cbuf) {
          MacroAssembler _masm(cbuf);
          __ movq(as_Register(Matcher::_regEncode[dst_first]), Address(rsp, offset));
#ifndef PRODUCT
        } else {
          st->print("movq    %s, [rsp + #%d]\t# spill",
                     Matcher::regName[dst_first],
                     offset);
#endif
        }
      } else {
        // 32-bit
        assert(!((src_first & 1) == 0 && src_first + 1 == src_second), "no transform");
        assert(!((dst_first & 1) == 0 && dst_first + 1 == dst_second), "no transform");
        int offset = ra_->reg2offset(src_first);
        if (cbuf) {
          MacroAssembler _masm(cbuf);
          __ movl(as_Register(Matcher::_regEncode[dst_first]), Address(rsp, offset));
#ifndef PRODUCT
        } else {
          st->print("movl    %s, [rsp + #%d]\t# spill",
                     Matcher::regName[dst_first],
                     offset);
#endif
        }
      }
      return 0;
    } else if (dst_first_rc == rc_float) {
      // mem-> xmm
      if ((src_first & 1) == 0 && src_first + 1 == src_second &&
          (dst_first & 1) == 0 && dst_first + 1 == dst_second) {
        // 64-bit
        int offset = ra_->reg2offset(src_first);
        if (cbuf) {
          MacroAssembler _masm(cbuf);
          __ movdbl( as_XMMRegister(Matcher::_regEncode[dst_first]), Address(rsp, offset));
#ifndef PRODUCT
        } else {
          st->print("%s  %s, [rsp + #%d]\t# spill",
                     UseXmmLoadAndClearUpper ? "movsd " : "movlpd",
                     Matcher::regName[dst_first],
                     offset);
#endif
        }
      } else {
        // 32-bit
        assert(!((src_first & 1) == 0 && src_first + 1 == src_second), "no transform");
        assert(!((dst_first & 1) == 0 && dst_first + 1 == dst_second), "no transform");
        int offset = ra_->reg2offset(src_first);
        if (cbuf) {
          MacroAssembler _masm(cbuf);
          __ movflt( as_XMMRegister(Matcher::_regEncode[dst_first]), Address(rsp, offset));
#ifndef PRODUCT
        } else {
          st->print("movss   %s, [rsp + #%d]\t# spill",
                     Matcher::regName[dst_first],
                     offset);
#endif
        }
      }
      return 0;
    }
  } else if (src_first_rc == rc_int) {
    // gpr ->
    if (dst_first_rc == rc_stack) {
      // gpr -> mem
      if ((src_first & 1) == 0 && src_first + 1 == src_second &&
          (dst_first & 1) == 0 && dst_first + 1 == dst_second) {
        // 64-bit
        int offset = ra_->reg2offset(dst_first);
        if (cbuf) {
          MacroAssembler _masm(cbuf);
          __ movq(Address(rsp, offset), as_Register(Matcher::_regEncode[src_first]));
#ifndef PRODUCT
        } else {
          st->print("movq    [rsp + #%d], %s\t# spill",
                     offset,
                     Matcher::regName[src_first]);
#endif
        }
      } else {
        // 32-bit
        assert(!((src_first & 1) == 0 && src_first + 1 == src_second), "no transform");
        assert(!((dst_first & 1) == 0 && dst_first + 1 == dst_second), "no transform");
        int offset = ra_->reg2offset(dst_first);
        if (cbuf) {
          MacroAssembler _masm(cbuf);
          __ movl(Address(rsp, offset), as_Register(Matcher::_regEncode[src_first]));
#ifndef PRODUCT
        } else {
          st->print("movl    [rsp + #%d], %s\t# spill",
                     offset,
                     Matcher::regName[src_first]);
#endif
        }
      }
      return 0;
    } else if (dst_first_rc == rc_int) {
      // gpr -> gpr
      if ((src_first & 1) == 0 && src_first + 1 == src_second &&
          (dst_first & 1) == 0 && dst_first + 1 == dst_second) {
        // 64-bit
        if (cbuf) {
          MacroAssembler _masm(cbuf);
          __ movq(as_Register(Matcher::_regEncode[dst_first]),
                  as_Register(Matcher::_regEncode[src_first]));
#ifndef PRODUCT
        } else {
          st->print("movq    %s, %s\t# spill",
                     Matcher::regName[dst_first],
                     Matcher::regName[src_first]);
#endif
        }
        return 0;
      } else {
        // 32-bit
        assert(!((src_first & 1) == 0 && src_first + 1 == src_second), "no transform");
        assert(!((dst_first & 1) == 0 && dst_first + 1 == dst_second), "no transform");
        if (cbuf) {
          MacroAssembler _masm(cbuf);
          __ movl(as_Register(Matcher::_regEncode[dst_first]),
                  as_Register(Matcher::_regEncode[src_first]));
#ifndef PRODUCT
        } else {
          st->print("movl    %s, %s\t# spill",
                     Matcher::regName[dst_first],
                     Matcher::regName[src_first]);
#endif
        }
        return 0;
      }
    } else if (dst_first_rc == rc_float) {
      // gpr -> xmm
      if ((src_first & 1) == 0 && src_first + 1 == src_second &&
          (dst_first & 1) == 0 && dst_first + 1 == dst_second) {
        // 64-bit
        if (cbuf) {
          MacroAssembler _masm(cbuf);
          __ movdq( as_XMMRegister(Matcher::_regEncode[dst_first]), as_Register(Matcher::_regEncode[src_first]));
#ifndef PRODUCT
        } else {
          st->print("movdq   %s, %s\t# spill",
                     Matcher::regName[dst_first],
                     Matcher::regName[src_first]);
#endif
        }
      } else {
        // 32-bit
        assert(!((src_first & 1) == 0 && src_first + 1 == src_second), "no transform");
        assert(!((dst_first & 1) == 0 && dst_first + 1 == dst_second), "no transform");
        if (cbuf) {
          MacroAssembler _masm(cbuf);
          __ movdl( as_XMMRegister(Matcher::_regEncode[dst_first]), as_Register(Matcher::_regEncode[src_first]));
#ifndef PRODUCT
        } else {
          st->print("movdl   %s, %s\t# spill",
                     Matcher::regName[dst_first],
                     Matcher::regName[src_first]);
#endif
        }
      }
      return 0;
    }
  } else if (src_first_rc == rc_float) {
    // xmm ->
    if (dst_first_rc == rc_stack) {
      // xmm -> mem
      if ((src_first & 1) == 0 && src_first + 1 == src_second &&
          (dst_first & 1) == 0 && dst_first + 1 == dst_second) {
        // 64-bit
        int offset = ra_->reg2offset(dst_first);
        if (cbuf) {
          MacroAssembler _masm(cbuf);
          __ movdbl( Address(rsp, offset), as_XMMRegister(Matcher::_regEncode[src_first]));
#ifndef PRODUCT
        } else {
          st->print("movsd   [rsp + #%d], %s\t# spill",
                     offset,
                     Matcher::regName[src_first]);
#endif
        }
      } else {
        // 32-bit
        assert(!((src_first & 1) == 0 && src_first + 1 == src_second), "no transform");
        assert(!((dst_first & 1) == 0 && dst_first + 1 == dst_second), "no transform");
        int offset = ra_->reg2offset(dst_first);
        if (cbuf) {
          MacroAssembler _masm(cbuf);
          __ movflt(Address(rsp, offset), as_XMMRegister(Matcher::_regEncode[src_first]));
#ifndef PRODUCT
        } else {
          st->print("movss   [rsp + #%d], %s\t# spill",
                     offset,
                     Matcher::regName[src_first]);
#endif
        }
      }
      return 0;
    } else if (dst_first_rc == rc_int) {
      // xmm -> gpr
      if ((src_first & 1) == 0 && src_first + 1 == src_second &&
          (dst_first & 1) == 0 && dst_first + 1 == dst_second) {
        // 64-bit
        if (cbuf) {
          MacroAssembler _masm(cbuf);
          __ movdq( as_Register(Matcher::_regEncode[dst_first]), as_XMMRegister(Matcher::_regEncode[src_first]));
#ifndef PRODUCT
        } else {
          st->print("movdq   %s, %s\t# spill",
                     Matcher::regName[dst_first],
                     Matcher::regName[src_first]);
#endif
        }
      } else {
        // 32-bit
        assert(!((src_first & 1) == 0 && src_first + 1 == src_second), "no transform");
        assert(!((dst_first & 1) == 0 && dst_first + 1 == dst_second), "no transform");
        if (cbuf) {
          MacroAssembler _masm(cbuf);
          __ movdl( as_Register(Matcher::_regEncode[dst_first]), as_XMMRegister(Matcher::_regEncode[src_first]));
#ifndef PRODUCT
        } else {
          st->print("movdl   %s, %s\t# spill",
                     Matcher::regName[dst_first],
                     Matcher::regName[src_first]);
#endif
        }
      }
      return 0;
    } else if (dst_first_rc == rc_float) {
      // xmm -> xmm
      if ((src_first & 1) == 0 && src_first + 1 == src_second &&
          (dst_first & 1) == 0 && dst_first + 1 == dst_second) {
        // 64-bit
        if (cbuf) {
          MacroAssembler _masm(cbuf);
          __ movdbl( as_XMMRegister(Matcher::_regEncode[dst_first]), as_XMMRegister(Matcher::_regEncode[src_first]));
#ifndef PRODUCT
        } else {
          st->print("%s  %s, %s\t# spill",
                     UseXmmRegToRegMoveAll ? "movapd" : "movsd ",
                     Matcher::regName[dst_first],
                     Matcher::regName[src_first]);
#endif
        }
      } else {
        // 32-bit
        assert(!((src_first & 1) == 0 && src_first + 1 == src_second), "no transform");
        assert(!((dst_first & 1) == 0 && dst_first + 1 == dst_second), "no transform");
        if (cbuf) {
          MacroAssembler _masm(cbuf);
          __ movflt( as_XMMRegister(Matcher::_regEncode[dst_first]), as_XMMRegister(Matcher::_regEncode[src_first]));
#ifndef PRODUCT
        } else {
          st->print("%s  %s, %s\t# spill",
                     UseXmmRegToRegMoveAll ? "movaps" : "movss ",
                     Matcher::regName[dst_first],
                     Matcher::regName[src_first]);
#endif
        }
      }
      return 0;
    }
  }

  assert(0," foo ");
  Unimplemented();
  return 0;
}

#ifndef PRODUCT
void MachSpillCopyNode::format(PhaseRegAlloc *ra_, outputStream* st) const {
  implementation(NULL, ra_, false, st);
}
#endif

void MachSpillCopyNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {
  implementation(&cbuf, ra_, false, NULL);
}

uint MachSpillCopyNode::size(PhaseRegAlloc *ra_) const {
  return MachNode::size(ra_);
}

//=============================================================================
#ifndef PRODUCT
void BoxLockNode::format(PhaseRegAlloc* ra_, outputStream* st) const
{
  int offset = ra_->reg2offset(in_RegMask(0).find_first_elem());
  int reg = ra_->get_reg_first(this);
  st->print("leaq    %s, [rsp + #%d]\t# box lock",
            Matcher::regName[reg], offset);
}
#endif

void BoxLockNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const
{
  int offset = ra_->reg2offset(in_RegMask(0).find_first_elem());
  int reg = ra_->get_encode(this);
  if (offset >= 0x80) {
    emit_opcode(cbuf, reg < 8 ? Assembler::REX_W : Assembler::REX_WR);
    emit_opcode(cbuf, 0x8D); // LEA  reg,[SP+offset]
    emit_rm(cbuf, 0x2, reg & 7, 0x04);
    emit_rm(cbuf, 0x0, 0x04, RSP_enc);
    emit_d32(cbuf, offset);
  } else {
    emit_opcode(cbuf, reg < 8 ? Assembler::REX_W : Assembler::REX_WR);
    emit_opcode(cbuf, 0x8D); // LEA  reg,[SP+offset]
    emit_rm(cbuf, 0x1, reg & 7, 0x04);
    emit_rm(cbuf, 0x0, 0x04, RSP_enc);
    emit_d8(cbuf, offset);
  }
}

uint BoxLockNode::size(PhaseRegAlloc *ra_) const
{
  int offset = ra_->reg2offset(in_RegMask(0).find_first_elem());
  return (offset < 0x80) ? 5 : 8; // REX
}

//=============================================================================
#ifndef PRODUCT
void MachUEPNode::format(PhaseRegAlloc* ra_, outputStream* st) const
{
  if (UseCompressedClassPointers) {
    st->print_cr("movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]\t# compressed klass");
    st->print_cr("\tdecode_klass_not_null rscratch1, rscratch1");
    st->print_cr("\tcmpq    rax, rscratch1\t # Inline cache check");
  } else {
    st->print_cr("\tcmpq    rax, [j_rarg0 + oopDesc::klass_offset_in_bytes()]\t"
                 "# Inline cache check");
  }
  st->print_cr("\tjne     SharedRuntime::_ic_miss_stub");
  st->print_cr("\tnop\t# nops to align entry point");
}
#endif

void MachUEPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const
{
  MacroAssembler masm(&cbuf);
  uint insts_size = cbuf.insts_size();
  if (UseCompressedClassPointers) {
    masm.load_klass(rscratch1, j_rarg0);
    masm.cmpptr(rax, rscratch1);
  } else {
    masm.cmpptr(rax, Address(j_rarg0, oopDesc::klass_offset_in_bytes()));
  }

  masm.jump_cc(Assembler::notEqual, RuntimeAddress(SharedRuntime::get_ic_miss_stub()));

  /* WARNING these NOPs are critical so that verified entry point is properly
     4 bytes aligned for patching by NativeJump::patch_verified_entry() */
  int nops_cnt = 4 - ((cbuf.insts_size() - insts_size) & 0x3);
  if (OptoBreakpoint) {
    // Leave space for int3
    nops_cnt -= 1;
  }
  nops_cnt &= 0x3; // Do not add nops if code is aligned.
  if (nops_cnt > 0)
    masm.nop(nops_cnt);
}

uint MachUEPNode::size(PhaseRegAlloc* ra_) const
{
  return MachNode::size(ra_); // too many variables; just compute it
                              // the hard way
}


//=============================================================================

int Matcher::regnum_to_fpu_offset(int regnum)
{
  return regnum - 32; // The FP registers are in the second chunk
}

// This is UltraSparc specific, true just means we have fast l2f conversion
const bool Matcher::convL2FSupported(void) {
  return true;
}

// Is this branch offset short enough that a short branch can be used?
//
// NOTE: If the platform does not provide any short branch variants, then
//       this method should return false for offset 0.
bool Matcher::is_short_branch_offset(int rule, int br_size, int offset) {
  // The passed offset is relative to address of the branch.
  // On 86 a branch displacement is calculated relative to address
  // of a next instruction.
  offset -= br_size;

  // the short version of jmpConUCF2 contains multiple branches,
  // making the reach slightly less
  if (rule == jmpConUCF2_rule)
    return (-126 <= offset && offset <= 125);
  return (-128 <= offset && offset <= 127);
}

const bool Matcher::isSimpleConstant64(jlong value) {
  // Will one (StoreL ConL) be cheaper than two (StoreI ConI)?.
  //return value == (int) value;  // Cf. storeImmL and immL32.

  // Probably always true, even if a temp register is required.
  return true;
}

// The ecx parameter to rep stosq for the ClearArray node is in words.
const bool Matcher::init_array_count_is_in_bytes = false;

// No additional cost for CMOVL.
const int Matcher::long_cmove_cost() { return 0; }

// No CMOVF/CMOVD with SSE2
const int Matcher::float_cmove_cost() { return ConditionalMoveLimit; }

// Does the CPU require late expand (see block.cpp for description of late expand)?
const bool Matcher::require_postalloc_expand = false;

// Do we need to mask the count passed to shift instructions or does
// the cpu only look at the lower 5/6 bits anyway?
const bool Matcher::need_masked_shift_count = false;

bool Matcher::narrow_oop_use_complex_address() {
  assert(UseCompressedOops, "only for compressed oops code");
  return (LogMinObjAlignmentInBytes <= 3);
}

bool Matcher::narrow_klass_use_complex_address() {
  assert(UseCompressedClassPointers, "only for compressed klass code");
  return (LogKlassAlignmentInBytes <= 3);
}

bool Matcher::const_oop_prefer_decode() {
  // Prefer ConN+DecodeN over ConP.
  return true;
}

bool Matcher::const_klass_prefer_decode() {
  // TODO: Either support matching DecodeNKlass (heap-based) in operand
  //       or condisider the following:
  // Prefer ConNKlass+DecodeNKlass over ConP in simple compressed klass mode.
  //return Universe::narrow_klass_base() == NULL;
  return true;
}

// Is it better to copy float constants, or load them directly from
// memory?  Intel can load a float constant from a direct address,
// requiring no extra registers.  Most RISCs will have to materialize
// an address into a register first, so they would do better to copy
// the constant from stack.
const bool Matcher::rematerialize_float_constants = true; // XXX

// If CPU can load and store mis-aligned doubles directly then no
// fixup is needed.  Else we split the double into 2 integer pieces
// and move it piece-by-piece.  Only happens when passing doubles into
// C code as the Java calling convention forces doubles to be aligned.
const bool Matcher::misaligned_doubles_ok = true;

// No-op on amd64
void Matcher::pd_implicit_null_fixup(MachNode *node, uint idx) {}

// Advertise here if the CPU requires explicit rounding operations to
// implement the UseStrictFP mode.
const bool Matcher::strict_fp_requires_explicit_rounding = true;

// Are floats conerted to double when stored to stack during deoptimization?
// On x64 it is stored without convertion so we can use normal access.
bool Matcher::float_in_double() { return false; }

// Do ints take an entire long register or just half?
const bool Matcher::int_in_long = true;

// Return whether or not this register is ever used as an argument.
// This function is used on startup to build the trampoline stubs in
// generateOptoStub.  Registers not mentioned will be killed by the VM
// call in the trampoline, and arguments in those registers not be
// available to the callee.
bool Matcher::can_be_java_arg(int reg)
{
  return
    reg ==  RDI_num || reg == RDI_H_num ||
    reg ==  RSI_num || reg == RSI_H_num ||
    reg ==  RDX_num || reg == RDX_H_num ||
    reg ==  RCX_num || reg == RCX_H_num ||
    reg ==   R8_num || reg ==  R8_H_num ||
    reg ==   R9_num || reg ==  R9_H_num ||
    reg ==  R12_num || reg == R12_H_num ||
    reg == XMM0_num || reg == XMM0b_num ||
    reg == XMM1_num || reg == XMM1b_num ||
    reg == XMM2_num || reg == XMM2b_num ||
    reg == XMM3_num || reg == XMM3b_num ||
    reg == XMM4_num || reg == XMM4b_num ||
    reg == XMM5_num || reg == XMM5b_num ||
    reg == XMM6_num || reg == XMM6b_num ||
    reg == XMM7_num || reg == XMM7b_num;
}

bool Matcher::is_spillable_arg(int reg)
{
  return can_be_java_arg(reg);
}

bool Matcher::use_asm_for_ldiv_by_con( jlong divisor ) {
  // In 64 bit mode a code which use multiply when
  // devisor is constant is faster than hardware
  // DIV instruction (it uses MulHiL).
  return false;
}

// Register for DIVI projection of divmodI
RegMask Matcher::divI_proj_mask() {
  return INT_RAX_REG_mask();
}

// Register for MODI projection of divmodI
RegMask Matcher::modI_proj_mask() {
  return INT_RDX_REG_mask();
}

// Register for DIVL projection of divmodL
RegMask Matcher::divL_proj_mask() {
  return LONG_RAX_REG_mask();
}

// Register for MODL projection of divmodL
RegMask Matcher::modL_proj_mask() {
  return LONG_RDX_REG_mask();
}

// Register for saving SP into on method handle invokes. Not used on x86_64.
const RegMask Matcher::method_handle_invoke_SP_save_mask() {
    return NO_REG_mask();
}


#line 999999


//SourceForm

#line 1140 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"


#include "opto/addnode.hpp"

// Emit exception handler code.
// Stuff framesize into a register and call a VM stub routine.
int HandlerImpl::emit_exception_handler(CodeBuffer& cbuf) {

  // Note that the code buffer's insts_mark is always relative to insts.
  // That's why we must use the macroassembler to generate a handler.
  MacroAssembler _masm(&cbuf);
  address base = __ start_a_stub(size_exception_handler());
  if (base == NULL) {
    ciEnv::current()->record_failure("CodeCache is full");
    return 0;  // CodeBuffer::expand failed
  }
  int offset = __ offset();
  __ jump(RuntimeAddress(OptoRuntime::exception_blob()->entry_point()));
  assert(__ offset() - offset <= (int) size_exception_handler(), "overflow");
  __ end_a_stub();
  return offset;
}

// Emit deopt handler code.
int HandlerImpl::emit_deopt_handler(CodeBuffer& cbuf) {

  // Note that the code buffer's insts_mark is always relative to insts.
  // That's why we must use the macroassembler to generate a handler.
  MacroAssembler _masm(&cbuf);
  address base = __ start_a_stub(size_deopt_handler());
  if (base == NULL) {
    ciEnv::current()->record_failure("CodeCache is full");
    return 0;  // CodeBuffer::expand failed
  }
  int offset = __ offset();

#ifdef _LP64
  address the_pc = (address) __ pc();
  Label next;
  // push a "the_pc" on the stack without destroying any registers
  // as they all may be live.

  // push address of "next"
  __ call(next, relocInfo::none); // reloc none is fine since it is a disp32
  __ bind(next);
  // adjust it so it matches "the_pc"
  __ subptr(Address(rsp, 0), __ offset() - offset);
#else
  InternalAddress here(__ pc());
  __ pushptr(here.addr());
#endif

  __ jump(RuntimeAddress(SharedRuntime::deopt_blob()->unpack()));
  assert(__ offset() - offset <= (int) size_deopt_handler(), "overflow");
  __ end_a_stub();
  return offset;
}


//=============================================================================

  // Float masks come from different places depending on platform.
#ifdef _LP64
  static address float_signmask()  { return StubRoutines::x86::float_sign_mask(); }
  static address float_signflip()  { return StubRoutines::x86::float_sign_flip(); }
  static address double_signmask() { return StubRoutines::x86::double_sign_mask(); }
  static address double_signflip() { return StubRoutines::x86::double_sign_flip(); }
#else
  static address float_signmask()  { return (address)float_signmask_pool; }
  static address float_signflip()  { return (address)float_signflip_pool; }
  static address double_signmask() { return (address)double_signmask_pool; }
  static address double_signflip() { return (address)double_signflip_pool; }
#endif


const bool Matcher::match_rule_supported(int opcode) {
  if (!has_match_rule(opcode))
    return false;

  bool ret_value = true;
  switch (opcode) {
    case Op_PopCountI:
    case Op_PopCountL:
      if (!UsePopCountInstruction)
        ret_value = false;
      break;
    case Op_MulVI:
      if ((UseSSE < 4) && (UseAVX < 1)) // only with SSE4_1 or AVX
        ret_value = false;
      break;
    case Op_MulVL:
    case Op_MulReductionVL:
      if (VM_Version::supports_avx512dq() == false)
        ret_value = false;
      break;
    case Op_AddReductionVL:
      if (UseAVX < 3) // only EVEX : vector connectivity becomes an issue here
        ret_value = false;
      break;
    case Op_AddReductionVI:
      if (UseSSE < 3) // requires at least SSE3
        ret_value = false;
      break;
    case Op_MulReductionVI:
      if (UseSSE < 4) // requires at least SSE4
        ret_value = false;
      break;
    case Op_AddReductionVF:
    case Op_AddReductionVD:
    case Op_MulReductionVF:
    case Op_MulReductionVD:
      if (UseSSE < 1) // requires at least SSE
        ret_value = false;
      break;
    case Op_SqrtVD:
      if (UseAVX < 1) // enabled for AVX only
        ret_value = false;
      break;
    case Op_CompareAndSwapL:
#ifdef _LP64
    case Op_CompareAndSwapP:
#endif
      if (!VM_Version::supports_cx8())
        ret_value = false;
      break;
    case Op_CMoveVD:
      if (UseAVX < 1 || UseAVX > 2)
        ret_value = false;
      break;
    case Op_StrIndexOf:
      if (!UseSSE42Intrinsics)
        ret_value = false;
      break;
    case Op_StrIndexOfChar:
      if (!UseSSE42Intrinsics)
        ret_value = false;
      break;
    case Op_OnSpinWait:
      if (VM_Version::supports_on_spin_wait() == false)
        ret_value = false;
      break;
  }

  return ret_value;  // Per default match rules are supported.
}

const bool Matcher::match_rule_supported_vector(int opcode, int vlen) {
  // identify extra cases that we might want to provide match rules for
  // e.g. Op_ vector nodes and other intrinsics while guarding with vlen
  bool ret_value = match_rule_supported(opcode);
  if (ret_value) {
    switch (opcode) {
      case Op_AddVB:
      case Op_SubVB:
        if ((vlen == 64) && (VM_Version::supports_avx512bw() == false))
          ret_value = false;
        break;
      case Op_URShiftVS:
      case Op_RShiftVS:
      case Op_LShiftVS:
      case Op_MulVS:
      case Op_AddVS:
      case Op_SubVS:
        if ((vlen == 32) && (VM_Version::supports_avx512bw() == false))
          ret_value = false;
        break;
      case Op_CMoveVD:
        if (vlen != 4)
          ret_value  = false;
        break;
    }
  }

  return ret_value;  // Per default match rules are supported.
}

const bool Matcher::has_predicated_vectors(void) {
  bool ret_value = false;
  if (UseAVX > 2) {
    ret_value = VM_Version::supports_avx512vl();
  }

  return ret_value;
}

const int Matcher::float_pressure(int default_pressure_threshold) {
  int float_pressure_threshold = default_pressure_threshold;
#ifdef _LP64
  if (UseAVX > 2) {
    // Increase pressure threshold on machines with AVX3 which have
    // 2x more XMM registers.
    float_pressure_threshold = default_pressure_threshold * 2;
  }
#endif
  return float_pressure_threshold;
}

// Max vector size in bytes. 0 if not supported.
const int Matcher::vector_width_in_bytes(BasicType bt) {
  assert(is_java_primitive(bt), "only primitive type vectors");
  if (UseSSE < 2) return 0;
  // SSE2 supports 128bit vectors for all types.
  // AVX2 supports 256bit vectors for all types.
  // AVX2/EVEX supports 512bit vectors for all types.
  int size = (UseAVX > 1) ? (1 << UseAVX) * 8 : 16;
  // AVX1 supports 256bit vectors only for FLOAT and DOUBLE.
  if (UseAVX > 0 && (bt == T_FLOAT || bt == T_DOUBLE))
    size = (UseAVX > 2) ? 64 : 32;
  // Use flag to limit vector size.
  size = MIN2(size,(int)MaxVectorSize);
  // Minimum 2 values in vector (or 4 for bytes).
  switch (bt) {
  case T_DOUBLE:
  case T_LONG:
    if (size < 16) return 0;
    break;
  case T_FLOAT:
  case T_INT:
    if (size < 8) return 0;
    break;
  case T_BOOLEAN:
    if (size < 4) return 0;
    break;
  case T_CHAR:
    if (size < 4) return 0;
    break;
  case T_BYTE:
    if (size < 4) return 0;
    break;
  case T_SHORT:
    if (size < 4) return 0;
    break;
  default:
    ShouldNotReachHere();
  }
  return size;
}

// Limits on vector size (number of elements) loaded into vector.
const int Matcher::max_vector_size(const BasicType bt) {
  return vector_width_in_bytes(bt)/type2aelembytes(bt);
}
const int Matcher::min_vector_size(const BasicType bt) {
  int max_size = max_vector_size(bt);
  // Min size which can be loaded into vector is 4 bytes.
  int size = (type2aelembytes(bt) == 1) ? 4 : 2;
  return MIN2(size,max_size);
}

// Vector ideal reg corresponding to specidied size in bytes
const int Matcher::vector_ideal_reg(int size) {
  assert(MaxVectorSize >= size, "");
  switch(size) {
    case  4: return Op_VecS;
    case  8: return Op_VecD;
    case 16: return Op_VecX;
    case 32: return Op_VecY;
    case 64: return Op_VecZ;
  }
  ShouldNotReachHere();
  return 0;
}

// Only lowest bits of xmm reg are used for vector shift count.
const int Matcher::vector_shift_count_ideal_reg(int size) {
  return Op_VecS;
}

// x86 supports misaligned vectors store/load.
const bool Matcher::misaligned_vectors_ok() {
  return !AlignVector; // can be changed by flag
}

// x86 AES instructions are compatible with SunJCE expanded
// keys, hence we do not need to pass the original key to stubs
const bool Matcher::pass_original_key_for_aes() {
  return false;
}


const bool Matcher::convi2l_type_required = true;

// Check for shift by small constant as well
static bool clone_shift(Node* shift, Matcher* matcher, Matcher::MStack& mstack, VectorSet& address_visited) {
  if (shift->Opcode() == Op_LShiftX && shift->in(2)->is_Con() &&
      shift->in(2)->get_int() <= 3 &&
      // Are there other uses besides address expressions?
      !matcher->is_visited(shift)) {
    address_visited.set(shift->_idx); // Flag as address_visited
    mstack.push(shift->in(2), Matcher::Visit);
    Node *conv = shift->in(1);
#ifdef _LP64
    // Allow Matcher to match the rule which bypass
    // ConvI2L operation for an array index on LP64
    // if the index value is positive.
    if (conv->Opcode() == Op_ConvI2L &&
        conv->as_Type()->type()->is_long()->_lo >= 0 &&
        // Are there other uses besides address expressions?
        !matcher->is_visited(conv)) {
      address_visited.set(conv->_idx); // Flag as address_visited
      mstack.push(conv->in(1), Matcher::Pre_Visit);
    } else
#endif
      mstack.push(conv, Matcher::Pre_Visit);
    return true;
  }
  return false;
}

// Should the Matcher clone shifts on addressing modes, expecting them
// to be subsumed into complex addressing expressions or compute them
// into registers?
bool Matcher::clone_address_expressions(AddPNode* m, Matcher::MStack& mstack, VectorSet& address_visited) {
  Node *off = m->in(AddPNode::Offset);
  if (off->is_Con()) {
    address_visited.test_set(m->_idx); // Flag as address_visited
    Node *adr = m->in(AddPNode::Address);

    // Intel can handle 2 adds in addressing mode
    // AtomicAdd is not an addressing expression.
    // Cheap to find it by looking for screwy base.
    if (adr->is_AddP() &&
        !adr->in(AddPNode::Base)->is_top() &&
        // Are there other uses besides address expressions?
        !is_visited(adr)) {
      address_visited.set(adr->_idx); // Flag as address_visited
      Node *shift = adr->in(AddPNode::Offset);
      if (!clone_shift(shift, this, mstack, address_visited)) {
        mstack.push(shift, Pre_Visit);
      }
      mstack.push(adr->in(AddPNode::Address), Pre_Visit);
      mstack.push(adr->in(AddPNode::Base), Pre_Visit);
    } else {
      mstack.push(adr, Pre_Visit);
    }

    // Clone X+offset as it also folds into most addressing expressions
    mstack.push(off, Visit);
    mstack.push(m->in(AddPNode::Base), Pre_Visit);
    return true;
  } else if (clone_shift(off, this, mstack, address_visited)) {
    address_visited.test_set(m->_idx); // Flag as address_visited
    mstack.push(m->in(AddPNode::Address), Pre_Visit);
    mstack.push(m->in(AddPNode::Base), Pre_Visit);
    return true;
  }
  return false;
}

void Compile::reshape_address(AddPNode* addp) {
}

// Helper methods for MachSpillCopyNode::implementation().
static int vec_mov_helper(CodeBuffer *cbuf, bool do_size, int src_lo, int dst_lo,
                          int src_hi, int dst_hi, uint ireg, outputStream* st) {
  // In 64-bit VM size calculation is very complex. Emitting instructions
  // into scratch buffer is used to get size in 64-bit VM.
  LP64_ONLY( assert(!do_size, "this method calculates size only for 32-bit VM"); )
  assert(ireg == Op_VecS || // 32bit vector
         (src_lo & 1) == 0 && (src_lo + 1) == src_hi &&
         (dst_lo & 1) == 0 && (dst_lo + 1) == dst_hi,
         "no non-adjacent vector moves" );
  if (cbuf) {
    MacroAssembler _masm(cbuf);
    int offset = __ offset();
    switch (ireg) {
    case Op_VecS: // copy whole register
    case Op_VecD:
    case Op_VecX:
      __ movdqu(as_XMMRegister(Matcher::_regEncode[dst_lo]), as_XMMRegister(Matcher::_regEncode[src_lo]));
      break;
    case Op_VecY:
      __ vmovdqu(as_XMMRegister(Matcher::_regEncode[dst_lo]), as_XMMRegister(Matcher::_regEncode[src_lo]));
      break;
    case Op_VecZ:
      __ evmovdquq(as_XMMRegister(Matcher::_regEncode[dst_lo]), as_XMMRegister(Matcher::_regEncode[src_lo]), 2);
      break;
    default:
      ShouldNotReachHere();
    }
    int size = __ offset() - offset;
#ifdef ASSERT
    // VEX_2bytes prefix is used if UseAVX > 0, so it takes the same 2 bytes as SIMD prefix.
    assert(!do_size || size == 4, "incorrect size calculattion");
#endif
    return size;
#ifndef PRODUCT
  } else if (!do_size) {
    switch (ireg) {
    case Op_VecS:
    case Op_VecD:
    case Op_VecX:
      st->print("movdqu  %s,%s\t# spill",Matcher::regName[dst_lo],Matcher::regName[src_lo]);
      break;
    case Op_VecY:
    case Op_VecZ:
      st->print("vmovdqu %s,%s\t# spill",Matcher::regName[dst_lo],Matcher::regName[src_lo]);
      break;
    default:
      ShouldNotReachHere();
    }
#endif
  }
  // VEX_2bytes prefix is used if UseAVX > 0, and it takes the same 2 bytes as SIMD prefix.
  return (UseAVX > 2) ? 6 : 4;
}

static int vec_spill_helper(CodeBuffer *cbuf, bool do_size, bool is_load,
                            int stack_offset, int reg, uint ireg, outputStream* st) {
  // In 64-bit VM size calculation is very complex. Emitting instructions
  // into scratch buffer is used to get size in 64-bit VM.
  LP64_ONLY( assert(!do_size, "this method calculates size only for 32-bit VM"); )
  if (cbuf) {
    MacroAssembler _masm(cbuf);
    int offset = __ offset();
    if (is_load) {
      switch (ireg) {
      case Op_VecS:
        __ movdl(as_XMMRegister(Matcher::_regEncode[reg]), Address(rsp, stack_offset));
        break;
      case Op_VecD:
        __ movq(as_XMMRegister(Matcher::_regEncode[reg]), Address(rsp, stack_offset));
        break;
      case Op_VecX:
        __ movdqu(as_XMMRegister(Matcher::_regEncode[reg]), Address(rsp, stack_offset));
        break;
      case Op_VecY:
        __ vmovdqu(as_XMMRegister(Matcher::_regEncode[reg]), Address(rsp, stack_offset));
        break;
      case Op_VecZ:
        __ evmovdquq(as_XMMRegister(Matcher::_regEncode[reg]), Address(rsp, stack_offset), 2);
        break;
      default:
        ShouldNotReachHere();
      }
    } else { // store
      switch (ireg) {
      case Op_VecS:
        __ movdl(Address(rsp, stack_offset), as_XMMRegister(Matcher::_regEncode[reg]));
        break;
      case Op_VecD:
        __ movq(Address(rsp, stack_offset), as_XMMRegister(Matcher::_regEncode[reg]));
        break;
      case Op_VecX:
        __ movdqu(Address(rsp, stack_offset), as_XMMRegister(Matcher::_regEncode[reg]));
        break;
      case Op_VecY:
        __ vmovdqu(Address(rsp, stack_offset), as_XMMRegister(Matcher::_regEncode[reg]));
        break;
      case Op_VecZ:
        __ evmovdquq(Address(rsp, stack_offset), as_XMMRegister(Matcher::_regEncode[reg]), 2);
        break;
      default:
        ShouldNotReachHere();
      }
    }
    int size = __ offset() - offset;
#ifdef ASSERT
    int offset_size = (stack_offset == 0) ? 0 : ((stack_offset < 0x80) ? 1 : (UseAVX > 2) ? 6 : 4);
    // VEX_2bytes prefix is used if UseAVX > 0, so it takes the same 2 bytes as SIMD prefix.
    assert(!do_size || size == (5+offset_size), "incorrect size calculattion");
#endif
    return size;
#ifndef PRODUCT
  } else if (!do_size) {
    if (is_load) {
      switch (ireg) {
      case Op_VecS:
        st->print("movd    %s,[rsp + %d]\t# spill", Matcher::regName[reg], stack_offset);
        break;
      case Op_VecD:
        st->print("movq    %s,[rsp + %d]\t# spill", Matcher::regName[reg], stack_offset);
        break;
       case Op_VecX:
        st->print("movdqu  %s,[rsp + %d]\t# spill", Matcher::regName[reg], stack_offset);
        break;
      case Op_VecY:
      case Op_VecZ:
        st->print("vmovdqu %s,[rsp + %d]\t# spill", Matcher::regName[reg], stack_offset);
        break;
      default:
        ShouldNotReachHere();
      }
    } else { // store
      switch (ireg) {
      case Op_VecS:
        st->print("movd    [rsp + %d],%s\t# spill", stack_offset, Matcher::regName[reg]);
        break;
      case Op_VecD:
        st->print("movq    [rsp + %d],%s\t# spill", stack_offset, Matcher::regName[reg]);
        break;
       case Op_VecX:
        st->print("movdqu  [rsp + %d],%s\t# spill", stack_offset, Matcher::regName[reg]);
        break;
      case Op_VecY:
      case Op_VecZ:
        st->print("vmovdqu [rsp + %d],%s\t# spill", stack_offset, Matcher::regName[reg]);
        break;
      default:
        ShouldNotReachHere();
      }
    }
#endif
  }
  bool is_single_byte = false;
  int vec_len = 0;
  if ((UseAVX > 2) && (stack_offset != 0)) {
    int tuple_type = Assembler::EVEX_FVM;
    int input_size = Assembler::EVEX_32bit;
    switch (ireg) {
    case Op_VecS:
      tuple_type = Assembler::EVEX_T1S;
      break;
    case Op_VecD:
      tuple_type = Assembler::EVEX_T1S;
      input_size = Assembler::EVEX_64bit;
      break;
    case Op_VecX:
      break;
    case Op_VecY:
      vec_len = 1;
      break;
    case Op_VecZ:
      vec_len = 2;
      break;
    }
    is_single_byte = Assembler::query_compressed_disp_byte(stack_offset, true, vec_len, tuple_type, input_size, 0);
  }
  int offset_size = 0;
  int size = 5;
  if (UseAVX > 2 ) {
    if (VM_Version::supports_avx512novl() && (vec_len == 2)) {
      offset_size = (stack_offset == 0) ? 0 : ((is_single_byte) ? 1 : 4);
      size += 2; // Need an additional two bytes for EVEX encoding
    } else if (VM_Version::supports_avx512novl() && (vec_len < 2)) {
      offset_size = (stack_offset == 0) ? 0 : ((stack_offset <= 127) ? 1 : 4);
    } else {
      offset_size = (stack_offset == 0) ? 0 : ((is_single_byte) ? 1 : 4);
      size += 2; // Need an additional two bytes for EVEX encodding
    }
  } else {
    offset_size = (stack_offset == 0) ? 0 : ((stack_offset <= 127) ? 1 : 4);
  }
  // VEX_2bytes prefix is used if UseAVX > 0, so it takes the same 2 bytes as SIMD prefix.
  return size+offset_size;
}

static inline jint replicate4_imm(int con, int width) {
  // Load a constant of "width" (in bytes) and replicate it to fill 32bit.
  assert(width == 1 || width == 2, "only byte or short types here");
  int bit_width = width * 8;
  jint val = con;
  val &= (1 << bit_width) - 1;  // mask off sign bits
  while(bit_width < 32) {
    val |= (val << bit_width);
    bit_width <<= 1;
  }
  return val;
}

static inline jlong replicate8_imm(int con, int width) {
  // Load a constant of "width" (in bytes) and replicate it to fill 64bit.
  assert(width == 1 || width == 2 || width == 4, "only byte, short or int types here");
  int bit_width = width * 8;
  jlong val = con;
  val &= (((jlong) 1) << bit_width) - 1;  // mask off sign bits
  while(bit_width < 64) {
    val |= (val << bit_width);
    bit_width <<= 1;
  }
  return val;
}

#ifndef PRODUCT
  void MachNopNode::format(PhaseRegAlloc*, outputStream* st) const {
    st->print("nop \t# %d bytes pad for loops and calls", _count);
  }
#endif

  void MachNopNode::emit(CodeBuffer &cbuf, PhaseRegAlloc*) const {
    MacroAssembler _masm(&cbuf);
    __ nop(_count);
  }

  uint MachNopNode::size(PhaseRegAlloc*) const {
    return _count;
  }

#ifndef PRODUCT
  void MachBreakpointNode::format(PhaseRegAlloc*, outputStream* st) const {
    st->print("# breakpoint");
  }
#endif

  void MachBreakpointNode::emit(CodeBuffer &cbuf, PhaseRegAlloc* ra_) const {
    MacroAssembler _masm(&cbuf);
    __ int3();
  }

  uint MachBreakpointNode::size(PhaseRegAlloc* ra_) const {
    return MachNode::size(ra_);
  }


#line 999999


#ifndef PRODUCT
void Compile::adlc_verification() {

  // Following assertions generated from definition section
}
#endif

// Map from machine-independent register number to register_save_policy
const        char register_save_policy[] = {
  'C', // R10
  'C', // R10_H
  'C', // R11
  'C', // R11_H
  'C', // R8
  'C', // R8_H
  'C', // R9
  'C', // R9_H
  'C', // R12
  'C', // R12_H
  'C', // RCX
  'C', // RCX_H
  'C', // RBX
  'C', // RBX_H
  'C', // RDI
  'C', // RDI_H
  'C', // RDX
  'C', // RDX_H
  'C', // RSI
  'C', // RSI_H
  'C', // RAX
  'C', // RAX_H
  'N', // RBP
  'N', // RBP_H
  'C', // R13
  'C', // R13_H
  'C', // R14
  'C', // R14_H
  'C', // R15
  'C', // R15_H
  'N', // RSP
  'N', // RSP_H
  'C', // XMM0
  'C', // XMM0b
  'C', // XMM0c
  'C', // XMM0d
  'C', // XMM0e
  'C', // XMM0f
  'C', // XMM0g
  'C', // XMM0h
  'C', // XMM0i
  'C', // XMM0j
  'C', // XMM0k
  'C', // XMM0l
  'C', // XMM0m
  'C', // XMM0n
  'C', // XMM0o
  'C', // XMM0p
  'C', // XMM1
  'C', // XMM1b
  'C', // XMM1c
  'C', // XMM1d
  'C', // XMM1e
  'C', // XMM1f
  'C', // XMM1g
  'C', // XMM1h
  'C', // XMM1i
  'C', // XMM1j
  'C', // XMM1k
  'C', // XMM1l
  'C', // XMM1m
  'C', // XMM1n
  'C', // XMM1o
  'C', // XMM1p
  'C', // XMM2
  'C', // XMM2b
  'C', // XMM2c
  'C', // XMM2d
  'C', // XMM2e
  'C', // XMM2f
  'C', // XMM2g
  'C', // XMM2h
  'C', // XMM2i
  'C', // XMM2j
  'C', // XMM2k
  'C', // XMM2l
  'C', // XMM2m
  'C', // XMM2n
  'C', // XMM2o
  'C', // XMM2p
  'C', // XMM3
  'C', // XMM3b
  'C', // XMM3c
  'C', // XMM3d
  'C', // XMM3e
  'C', // XMM3f
  'C', // XMM3g
  'C', // XMM3h
  'C', // XMM3i
  'C', // XMM3j
  'C', // XMM3k
  'C', // XMM3l
  'C', // XMM3m
  'C', // XMM3n
  'C', // XMM3o
  'C', // XMM3p
  'C', // XMM4
  'C', // XMM4b
  'C', // XMM4c
  'C', // XMM4d
  'C', // XMM4e
  'C', // XMM4f
  'C', // XMM4g
  'C', // XMM4h
  'C', // XMM4i
  'C', // XMM4j
  'C', // XMM4k
  'C', // XMM4l
  'C', // XMM4m
  'C', // XMM4n
  'C', // XMM4o
  'C', // XMM4p
  'C', // XMM5
  'C', // XMM5b
  'C', // XMM5c
  'C', // XMM5d
  'C', // XMM5e
  'C', // XMM5f
  'C', // XMM5g
  'C', // XMM5h
  'C', // XMM5i
  'C', // XMM5j
  'C', // XMM5k
  'C', // XMM5l
  'C', // XMM5m
  'C', // XMM5n
  'C', // XMM5o
  'C', // XMM5p
  'C', // XMM6
  'C', // XMM6b
  'C', // XMM6c
  'C', // XMM6d
  'C', // XMM6e
  'C', // XMM6f
  'C', // XMM6g
  'C', // XMM6h
  'C', // XMM6i
  'C', // XMM6j
  'C', // XMM6k
  'C', // XMM6l
  'C', // XMM6m
  'C', // XMM6n
  'C', // XMM6o
  'C', // XMM6p
  'C', // XMM7
  'C', // XMM7b
  'C', // XMM7c
  'C', // XMM7d
  'C', // XMM7e
  'C', // XMM7f
  'C', // XMM7g
  'C', // XMM7h
  'C', // XMM7i
  'C', // XMM7j
  'C', // XMM7k
  'C', // XMM7l
  'C', // XMM7m
  'C', // XMM7n
  'C', // XMM7o
  'C', // XMM7p
  'C', // XMM8
  'C', // XMM8b
  'C', // XMM8c
  'C', // XMM8d
  'C', // XMM8e
  'C', // XMM8f
  'C', // XMM8g
  'C', // XMM8h
  'C', // XMM8i
  'C', // XMM8j
  'C', // XMM8k
  'C', // XMM8l
  'C', // XMM8m
  'C', // XMM8n
  'C', // XMM8o
  'C', // XMM8p
  'C', // XMM9
  'C', // XMM9b
  'C', // XMM9c
  'C', // XMM9d
  'C', // XMM9e
  'C', // XMM9f
  'C', // XMM9g
  'C', // XMM9h
  'C', // XMM9i
  'C', // XMM9j
  'C', // XMM9k
  'C', // XMM9l
  'C', // XMM9m
  'C', // XMM9n
  'C', // XMM9o
  'C', // XMM9p
  'C', // XMM10
  'C', // XMM10b
  'C', // XMM10c
  'C', // XMM10d
  'C', // XMM10e
  'C', // XMM10f
  'C', // XMM10g
  'C', // XMM10h
  'C', // XMM10i
  'C', // XMM10j
  'C', // XMM10k
  'C', // XMM10l
  'C', // XMM10m
  'C', // XMM10n
  'C', // XMM10o
  'C', // XMM10p
  'C', // XMM11
  'C', // XMM11b
  'C', // XMM11c
  'C', // XMM11d
  'C', // XMM11e
  'C', // XMM11f
  'C', // XMM11g
  'C', // XMM11h
  'C', // XMM11i
  'C', // XMM11j
  'C', // XMM11k
  'C', // XMM11l
  'C', // XMM11m
  'C', // XMM11n
  'C', // XMM11o
  'C', // XMM11p
  'C', // XMM12
  'C', // XMM12b
  'C', // XMM12c
  'C', // XMM12d
  'C', // XMM12e
  'C', // XMM12f
  'C', // XMM12g
  'C', // XMM12h
  'C', // XMM12i
  'C', // XMM12j
  'C', // XMM12k
  'C', // XMM12l
  'C', // XMM12m
  'C', // XMM12n
  'C', // XMM12o
  'C', // XMM12p
  'C', // XMM13
  'C', // XMM13b
  'C', // XMM13c
  'C', // XMM13d
  'C', // XMM13e
  'C', // XMM13f
  'C', // XMM13g
  'C', // XMM13h
  'C', // XMM13i
  'C', // XMM13j
  'C', // XMM13k
  'C', // XMM13l
  'C', // XMM13m
  'C', // XMM13n
  'C', // XMM13o
  'C', // XMM13p
  'C', // XMM14
  'C', // XMM14b
  'C', // XMM14c
  'C', // XMM14d
  'C', // XMM14e
  'C', // XMM14f
  'C', // XMM14g
  'C', // XMM14h
  'C', // XMM14i
  'C', // XMM14j
  'C', // XMM14k
  'C', // XMM14l
  'C', // XMM14m
  'C', // XMM14n
  'C', // XMM14o
  'C', // XMM14p
  'C', // XMM15
  'C', // XMM15b
  'C', // XMM15c
  'C', // XMM15d
  'C', // XMM15e
  'C', // XMM15f
  'C', // XMM15g
  'C', // XMM15h
  'C', // XMM15i
  'C', // XMM15j
  'C', // XMM15k
  'C', // XMM15l
  'C', // XMM15m
  'C', // XMM15n
  'C', // XMM15o
  'C', // XMM15p
  'C', // XMM16
  'C', // XMM16b
  'C', // XMM16c
  'C', // XMM16d
  'C', // XMM16e
  'C', // XMM16f
  'C', // XMM16g
  'C', // XMM16h
  'C', // XMM16i
  'C', // XMM16j
  'C', // XMM16k
  'C', // XMM16l
  'C', // XMM16m
  'C', // XMM16n
  'C', // XMM16o
  'C', // XMM16p
  'C', // XMM17
  'C', // XMM17b
  'C', // XMM17c
  'C', // XMM17d
  'C', // XMM17e
  'C', // XMM17f
  'C', // XMM17g
  'C', // XMM17h
  'C', // XMM17i
  'C', // XMM17j
  'C', // XMM17k
  'C', // XMM17l
  'C', // XMM17m
  'C', // XMM17n
  'C', // XMM17o
  'C', // XMM17p
  'C', // XMM18
  'C', // XMM18b
  'C', // XMM18c
  'C', // XMM18d
  'C', // XMM18e
  'C', // XMM18f
  'C', // XMM18g
  'C', // XMM18h
  'C', // XMM18i
  'C', // XMM18j
  'C', // XMM18k
  'C', // XMM18l
  'C', // XMM18m
  'C', // XMM18n
  'C', // XMM18o
  'C', // XMM18p
  'C', // XMM19
  'C', // XMM19b
  'C', // XMM19c
  'C', // XMM19d
  'C', // XMM19e
  'C', // XMM19f
  'C', // XMM19g
  'C', // XMM19h
  'C', // XMM19i
  'C', // XMM19j
  'C', // XMM19k
  'C', // XMM19l
  'C', // XMM19m
  'C', // XMM19n
  'C', // XMM19o
  'C', // XMM19p
  'C', // XMM20
  'C', // XMM20b
  'C', // XMM20c
  'C', // XMM20d
  'C', // XMM20e
  'C', // XMM20f
  'C', // XMM20g
  'C', // XMM20h
  'C', // XMM20i
  'C', // XMM20j
  'C', // XMM20k
  'C', // XMM20l
  'C', // XMM20m
  'C', // XMM20n
  'C', // XMM20o
  'C', // XMM20p
  'C', // XMM21
  'C', // XMM21b
  'C', // XMM21c
  'C', // XMM21d
  'C', // XMM21e
  'C', // XMM21f
  'C', // XMM21g
  'C', // XMM21h
  'C', // XMM21i
  'C', // XMM21j
  'C', // XMM21k
  'C', // XMM21l
  'C', // XMM21m
  'C', // XMM21n
  'C', // XMM21o
  'C', // XMM21p
  'C', // XMM22
  'C', // XMM22b
  'C', // XMM22c
  'C', // XMM22d
  'C', // XMM22e
  'C', // XMM22f
  'C', // XMM22g
  'C', // XMM22h
  'C', // XMM22i
  'C', // XMM22j
  'C', // XMM22k
  'C', // XMM22l
  'C', // XMM22m
  'C', // XMM22n
  'C', // XMM22o
  'C', // XMM22p
  'C', // XMM23
  'C', // XMM23b
  'C', // XMM23c
  'C', // XMM23d
  'C', // XMM23e
  'C', // XMM23f
  'C', // XMM23g
  'C', // XMM23h
  'C', // XMM23i
  'C', // XMM23j
  'C', // XMM23k
  'C', // XMM23l
  'C', // XMM23m
  'C', // XMM23n
  'C', // XMM23o
  'C', // XMM23p
  'C', // XMM24
  'C', // XMM24b
  'C', // XMM24c
  'C', // XMM24d
  'C', // XMM24e
  'C', // XMM24f
  'C', // XMM24g
  'C', // XMM24h
  'C', // XMM24i
  'C', // XMM24j
  'C', // XMM24k
  'C', // XMM24l
  'C', // XMM24m
  'C', // XMM24n
  'C', // XMM24o
  'C', // XMM24p
  'C', // XMM25
  'C', // XMM25b
  'C', // XMM25c
  'C', // XMM25d
  'C', // XMM25e
  'C', // XMM25f
  'C', // XMM25g
  'C', // XMM25h
  'C', // XMM25i
  'C', // XMM25j
  'C', // XMM25k
  'C', // XMM25l
  'C', // XMM25m
  'C', // XMM25n
  'C', // XMM25o
  'C', // XMM25p
  'C', // XMM26
  'C', // XMM26b
  'C', // XMM26c
  'C', // XMM26d
  'C', // XMM26e
  'C', // XMM26f
  'C', // XMM26g
  'C', // XMM26h
  'C', // XMM26i
  'C', // XMM26j
  'C', // XMM26k
  'C', // XMM26l
  'C', // XMM26m
  'C', // XMM26n
  'C', // XMM26o
  'C', // XMM26p
  'C', // XMM27
  'C', // XMM27b
  'C', // XMM27c
  'C', // XMM27d
  'C', // XMM27e
  'C', // XMM27f
  'C', // XMM27g
  'C', // XMM27h
  'C', // XMM27i
  'C', // XMM27j
  'C', // XMM27k
  'C', // XMM27l
  'C', // XMM27m
  'C', // XMM27n
  'C', // XMM27o
  'C', // XMM27p
  'C', // XMM28
  'C', // XMM28b
  'C', // XMM28c
  'C', // XMM28d
  'C', // XMM28e
  'C', // XMM28f
  'C', // XMM28g
  'C', // XMM28h
  'C', // XMM28i
  'C', // XMM28j
  'C', // XMM28k
  'C', // XMM28l
  'C', // XMM28m
  'C', // XMM28n
  'C', // XMM28o
  'C', // XMM28p
  'C', // XMM29
  'C', // XMM29b
  'C', // XMM29c
  'C', // XMM29d
  'C', // XMM29e
  'C', // XMM29f
  'C', // XMM29g
  'C', // XMM29h
  'C', // XMM29i
  'C', // XMM29j
  'C', // XMM29k
  'C', // XMM29l
  'C', // XMM29m
  'C', // XMM29n
  'C', // XMM29o
  'C', // XMM29p
  'C', // XMM30
  'C', // XMM30b
  'C', // XMM30c
  'C', // XMM30d
  'C', // XMM30e
  'C', // XMM30f
  'C', // XMM30g
  'C', // XMM30h
  'C', // XMM30i
  'C', // XMM30j
  'C', // XMM30k
  'C', // XMM30l
  'C', // XMM30m
  'C', // XMM30n
  'C', // XMM30o
  'C', // XMM30p
  'C', // XMM31
  'C', // XMM31b
  'C', // XMM31c
  'C', // XMM31d
  'C', // XMM31e
  'C', // XMM31f
  'C', // XMM31g
  'C', // XMM31h
  'C', // XMM31i
  'C', // XMM31j
  'C', // XMM31k
  'C', // XMM31l
  'C', // XMM31m
  'C', // XMM31n
  'C', // XMM31o
  'C', // XMM31p
  'C' // no trailing comma // RFLAGS
};

// Map from machine-independent register number to c_reg_save_policy
const        char c_reg_save_policy[] = {
  'C', // R10
  'C', // R10_H
  'C', // R11
  'C', // R11_H
  'C', // R8
  'C', // R8_H
  'C', // R9
  'C', // R9_H
  'E', // R12
  'E', // R12_H
  'C', // RCX
  'C', // RCX_H
  'E', // RBX
  'E', // RBX_H
  'C', // RDI
  'C', // RDI_H
  'C', // RDX
  'C', // RDX_H
  'C', // RSI
  'C', // RSI_H
  'C', // RAX
  'C', // RAX_H
  'E', // RBP
  'E', // RBP_H
  'E', // R13
  'E', // R13_H
  'E', // R14
  'E', // R14_H
  'E', // R15
  'E', // R15_H
  'N', // RSP
  'N', // RSP_H
  'C', // XMM0
  'C', // XMM0b
  'C', // XMM0c
  'C', // XMM0d
  'C', // XMM0e
  'C', // XMM0f
  'C', // XMM0g
  'C', // XMM0h
  'C', // XMM0i
  'C', // XMM0j
  'C', // XMM0k
  'C', // XMM0l
  'C', // XMM0m
  'C', // XMM0n
  'C', // XMM0o
  'C', // XMM0p
  'C', // XMM1
  'C', // XMM1b
  'C', // XMM1c
  'C', // XMM1d
  'C', // XMM1e
  'C', // XMM1f
  'C', // XMM1g
  'C', // XMM1h
  'C', // XMM1i
  'C', // XMM1j
  'C', // XMM1k
  'C', // XMM1l
  'C', // XMM1m
  'C', // XMM1n
  'C', // XMM1o
  'C', // XMM1p
  'C', // XMM2
  'C', // XMM2b
  'C', // XMM2c
  'C', // XMM2d
  'C', // XMM2e
  'C', // XMM2f
  'C', // XMM2g
  'C', // XMM2h
  'C', // XMM2i
  'C', // XMM2j
  'C', // XMM2k
  'C', // XMM2l
  'C', // XMM2m
  'C', // XMM2n
  'C', // XMM2o
  'C', // XMM2p
  'C', // XMM3
  'C', // XMM3b
  'C', // XMM3c
  'C', // XMM3d
  'C', // XMM3e
  'C', // XMM3f
  'C', // XMM3g
  'C', // XMM3h
  'C', // XMM3i
  'C', // XMM3j
  'C', // XMM3k
  'C', // XMM3l
  'C', // XMM3m
  'C', // XMM3n
  'C', // XMM3o
  'C', // XMM3p
  'C', // XMM4
  'C', // XMM4b
  'C', // XMM4c
  'C', // XMM4d
  'C', // XMM4e
  'C', // XMM4f
  'C', // XMM4g
  'C', // XMM4h
  'C', // XMM4i
  'C', // XMM4j
  'C', // XMM4k
  'C', // XMM4l
  'C', // XMM4m
  'C', // XMM4n
  'C', // XMM4o
  'C', // XMM4p
  'C', // XMM5
  'C', // XMM5b
  'C', // XMM5c
  'C', // XMM5d
  'C', // XMM5e
  'C', // XMM5f
  'C', // XMM5g
  'C', // XMM5h
  'C', // XMM5i
  'C', // XMM5j
  'C', // XMM5k
  'C', // XMM5l
  'C', // XMM5m
  'C', // XMM5n
  'C', // XMM5o
  'C', // XMM5p
  'C', // XMM6
  'C', // XMM6b
  'C', // XMM6c
  'C', // XMM6d
  'C', // XMM6e
  'C', // XMM6f
  'C', // XMM6g
  'C', // XMM6h
  'C', // XMM6i
  'C', // XMM6j
  'C', // XMM6k
  'C', // XMM6l
  'C', // XMM6m
  'C', // XMM6n
  'C', // XMM6o
  'C', // XMM6p
  'C', // XMM7
  'C', // XMM7b
  'C', // XMM7c
  'C', // XMM7d
  'C', // XMM7e
  'C', // XMM7f
  'C', // XMM7g
  'C', // XMM7h
  'C', // XMM7i
  'C', // XMM7j
  'C', // XMM7k
  'C', // XMM7l
  'C', // XMM7m
  'C', // XMM7n
  'C', // XMM7o
  'C', // XMM7p
  'C', // XMM8
  'C', // XMM8b
  'C', // XMM8c
  'C', // XMM8d
  'C', // XMM8e
  'C', // XMM8f
  'C', // XMM8g
  'C', // XMM8h
  'C', // XMM8i
  'C', // XMM8j
  'C', // XMM8k
  'C', // XMM8l
  'C', // XMM8m
  'C', // XMM8n
  'C', // XMM8o
  'C', // XMM8p
  'C', // XMM9
  'C', // XMM9b
  'C', // XMM9c
  'C', // XMM9d
  'C', // XMM9e
  'C', // XMM9f
  'C', // XMM9g
  'C', // XMM9h
  'C', // XMM9i
  'C', // XMM9j
  'C', // XMM9k
  'C', // XMM9l
  'C', // XMM9m
  'C', // XMM9n
  'C', // XMM9o
  'C', // XMM9p
  'C', // XMM10
  'C', // XMM10b
  'C', // XMM10c
  'C', // XMM10d
  'C', // XMM10e
  'C', // XMM10f
  'C', // XMM10g
  'C', // XMM10h
  'C', // XMM10i
  'C', // XMM10j
  'C', // XMM10k
  'C', // XMM10l
  'C', // XMM10m
  'C', // XMM10n
  'C', // XMM10o
  'C', // XMM10p
  'C', // XMM11
  'C', // XMM11b
  'C', // XMM11c
  'C', // XMM11d
  'C', // XMM11e
  'C', // XMM11f
  'C', // XMM11g
  'C', // XMM11h
  'C', // XMM11i
  'C', // XMM11j
  'C', // XMM11k
  'C', // XMM11l
  'C', // XMM11m
  'C', // XMM11n
  'C', // XMM11o
  'C', // XMM11p
  'C', // XMM12
  'C', // XMM12b
  'C', // XMM12c
  'C', // XMM12d
  'C', // XMM12e
  'C', // XMM12f
  'C', // XMM12g
  'C', // XMM12h
  'C', // XMM12i
  'C', // XMM12j
  'C', // XMM12k
  'C', // XMM12l
  'C', // XMM12m
  'C', // XMM12n
  'C', // XMM12o
  'C', // XMM12p
  'C', // XMM13
  'C', // XMM13b
  'C', // XMM13c
  'C', // XMM13d
  'C', // XMM13e
  'C', // XMM13f
  'C', // XMM13g
  'C', // XMM13h
  'C', // XMM13i
  'C', // XMM13j
  'C', // XMM13k
  'C', // XMM13l
  'C', // XMM13m
  'C', // XMM13n
  'C', // XMM13o
  'C', // XMM13p
  'C', // XMM14
  'C', // XMM14b
  'C', // XMM14c
  'C', // XMM14d
  'C', // XMM14e
  'C', // XMM14f
  'C', // XMM14g
  'C', // XMM14h
  'C', // XMM14i
  'C', // XMM14j
  'C', // XMM14k
  'C', // XMM14l
  'C', // XMM14m
  'C', // XMM14n
  'C', // XMM14o
  'C', // XMM14p
  'C', // XMM15
  'C', // XMM15b
  'C', // XMM15c
  'C', // XMM15d
  'C', // XMM15e
  'C', // XMM15f
  'C', // XMM15g
  'C', // XMM15h
  'C', // XMM15i
  'C', // XMM15j
  'C', // XMM15k
  'C', // XMM15l
  'C', // XMM15m
  'C', // XMM15n
  'C', // XMM15o
  'C', // XMM15p
  'C', // XMM16
  'C', // XMM16b
  'C', // XMM16c
  'C', // XMM16d
  'C', // XMM16e
  'C', // XMM16f
  'C', // XMM16g
  'C', // XMM16h
  'C', // XMM16i
  'C', // XMM16j
  'C', // XMM16k
  'C', // XMM16l
  'C', // XMM16m
  'C', // XMM16n
  'C', // XMM16o
  'C', // XMM16p
  'C', // XMM17
  'C', // XMM17b
  'C', // XMM17c
  'C', // XMM17d
  'C', // XMM17e
  'C', // XMM17f
  'C', // XMM17g
  'C', // XMM17h
  'C', // XMM17i
  'C', // XMM17j
  'C', // XMM17k
  'C', // XMM17l
  'C', // XMM17m
  'C', // XMM17n
  'C', // XMM17o
  'C', // XMM17p
  'C', // XMM18
  'C', // XMM18b
  'C', // XMM18c
  'C', // XMM18d
  'C', // XMM18e
  'C', // XMM18f
  'C', // XMM18g
  'C', // XMM18h
  'C', // XMM18i
  'C', // XMM18j
  'C', // XMM18k
  'C', // XMM18l
  'C', // XMM18m
  'C', // XMM18n
  'C', // XMM18o
  'C', // XMM18p
  'C', // XMM19
  'C', // XMM19b
  'C', // XMM19c
  'C', // XMM19d
  'C', // XMM19e
  'C', // XMM19f
  'C', // XMM19g
  'C', // XMM19h
  'C', // XMM19i
  'C', // XMM19j
  'C', // XMM19k
  'C', // XMM19l
  'C', // XMM19m
  'C', // XMM19n
  'C', // XMM19o
  'C', // XMM19p
  'C', // XMM20
  'C', // XMM20b
  'C', // XMM20c
  'C', // XMM20d
  'C', // XMM20e
  'C', // XMM20f
  'C', // XMM20g
  'C', // XMM20h
  'C', // XMM20i
  'C', // XMM20j
  'C', // XMM20k
  'C', // XMM20l
  'C', // XMM20m
  'C', // XMM20n
  'C', // XMM20o
  'C', // XMM20p
  'C', // XMM21
  'C', // XMM21b
  'C', // XMM21c
  'C', // XMM21d
  'C', // XMM21e
  'C', // XMM21f
  'C', // XMM21g
  'C', // XMM21h
  'C', // XMM21i
  'C', // XMM21j
  'C', // XMM21k
  'C', // XMM21l
  'C', // XMM21m
  'C', // XMM21n
  'C', // XMM21o
  'C', // XMM21p
  'C', // XMM22
  'C', // XMM22b
  'C', // XMM22c
  'C', // XMM22d
  'C', // XMM22e
  'C', // XMM22f
  'C', // XMM22g
  'C', // XMM22h
  'C', // XMM22i
  'C', // XMM22j
  'C', // XMM22k
  'C', // XMM22l
  'C', // XMM22m
  'C', // XMM22n
  'C', // XMM22o
  'C', // XMM22p
  'C', // XMM23
  'C', // XMM23b
  'C', // XMM23c
  'C', // XMM23d
  'C', // XMM23e
  'C', // XMM23f
  'C', // XMM23g
  'C', // XMM23h
  'C', // XMM23i
  'C', // XMM23j
  'C', // XMM23k
  'C', // XMM23l
  'C', // XMM23m
  'C', // XMM23n
  'C', // XMM23o
  'C', // XMM23p
  'C', // XMM24
  'C', // XMM24b
  'C', // XMM24c
  'C', // XMM24d
  'C', // XMM24e
  'C', // XMM24f
  'C', // XMM24g
  'C', // XMM24h
  'C', // XMM24i
  'C', // XMM24j
  'C', // XMM24k
  'C', // XMM24l
  'C', // XMM24m
  'C', // XMM24n
  'C', // XMM24o
  'C', // XMM24p
  'C', // XMM25
  'C', // XMM25b
  'C', // XMM25c
  'C', // XMM25d
  'C', // XMM25e
  'C', // XMM25f
  'C', // XMM25g
  'C', // XMM25h
  'C', // XMM25i
  'C', // XMM25j
  'C', // XMM25k
  'C', // XMM25l
  'C', // XMM25m
  'C', // XMM25n
  'C', // XMM25o
  'C', // XMM25p
  'C', // XMM26
  'C', // XMM26b
  'C', // XMM26c
  'C', // XMM26d
  'C', // XMM26e
  'C', // XMM26f
  'C', // XMM26g
  'C', // XMM26h
  'C', // XMM26i
  'C', // XMM26j
  'C', // XMM26k
  'C', // XMM26l
  'C', // XMM26m
  'C', // XMM26n
  'C', // XMM26o
  'C', // XMM26p
  'C', // XMM27
  'C', // XMM27b
  'C', // XMM27c
  'C', // XMM27d
  'C', // XMM27e
  'C', // XMM27f
  'C', // XMM27g
  'C', // XMM27h
  'C', // XMM27i
  'C', // XMM27j
  'C', // XMM27k
  'C', // XMM27l
  'C', // XMM27m
  'C', // XMM27n
  'C', // XMM27o
  'C', // XMM27p
  'C', // XMM28
  'C', // XMM28b
  'C', // XMM28c
  'C', // XMM28d
  'C', // XMM28e
  'C', // XMM28f
  'C', // XMM28g
  'C', // XMM28h
  'C', // XMM28i
  'C', // XMM28j
  'C', // XMM28k
  'C', // XMM28l
  'C', // XMM28m
  'C', // XMM28n
  'C', // XMM28o
  'C', // XMM28p
  'C', // XMM29
  'C', // XMM29b
  'C', // XMM29c
  'C', // XMM29d
  'C', // XMM29e
  'C', // XMM29f
  'C', // XMM29g
  'C', // XMM29h
  'C', // XMM29i
  'C', // XMM29j
  'C', // XMM29k
  'C', // XMM29l
  'C', // XMM29m
  'C', // XMM29n
  'C', // XMM29o
  'C', // XMM29p
  'C', // XMM30
  'C', // XMM30b
  'C', // XMM30c
  'C', // XMM30d
  'C', // XMM30e
  'C', // XMM30f
  'C', // XMM30g
  'C', // XMM30h
  'C', // XMM30i
  'C', // XMM30j
  'C', // XMM30k
  'C', // XMM30l
  'C', // XMM30m
  'C', // XMM30n
  'C', // XMM30o
  'C', // XMM30p
  'C', // XMM31
  'C', // XMM31b
  'C', // XMM31c
  'C', // XMM31d
  'C', // XMM31e
  'C', // XMM31f
  'C', // XMM31g
  'C', // XMM31h
  'C', // XMM31i
  'C', // XMM31j
  'C', // XMM31k
  'C', // XMM31l
  'C', // XMM31m
  'C', // XMM31n
  'C', // XMM31o
  'C', // XMM31p
  'C' // no trailing comma // RFLAGS
};

// Map from machine-independent register number to register_save_type
const        int register_save_type[] = {
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegI,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  Op_RegF,
  0 // no trailing comma
};


const        int   reduceOp[] = {
  /*    0 */  0,
  /*    1 */  0,
  /*    2 */  0,
  /*    3 */  0,
  /*    4 */  0,
  /*    5 */  0,
  /*    6 */  0,
  /*    7 */  0,
  /*    8 */  immI_rule,
  /*    9 */  immI0_rule,
  /*   10 */  immI1_rule,
  /*   11 */  immI_M1_rule,
  /*   12 */  immI2_rule,
  /*   13 */  immI8_rule,
  /*   14 */  immI16_rule,
  /*   15 */  immU31_rule,
  /*   16 */  immI_32_rule,
  /*   17 */  immI_64_rule,
  /*   18 */  immP_rule,
  /*   19 */  immP0_rule,
  /*   20 */  immN_rule,
  /*   21 */  immNKlass_rule,
  /*   22 */  immN0_rule,
  /*   23 */  immP31_rule,
  /*   24 */  immL_rule,
  /*   25 */  immL8_rule,
  /*   26 */  immUL32_rule,
  /*   27 */  immL32_rule,
  /*   28 */  immL0_rule,
  /*   29 */  immL1_rule,
  /*   30 */  immL_M1_rule,
  /*   31 */  immL10_rule,
  /*   32 */  immL_127_rule,
  /*   33 */  immL_32bits_rule,
  /*   34 */  immF0_rule,
  /*   35 */  immF_rule,
  /*   36 */  immD0_rule,
  /*   37 */  immD_rule,
  /*   38 */  immI_16_rule,
  /*   39 */  immI_24_rule,
  /*   40 */  immI_255_rule,
  /*   41 */  immI_65535_rule,
  /*   42 */  immL_255_rule,
  /*   43 */  immL_65535_rule,
  /*   44 */  rRegI_rule,
  /*   45 */  rax_RegI_rule,
  /*   46 */  rbx_RegI_rule,
  /*   47 */  rcx_RegI_rule,
  /*   48 */  rdx_RegI_rule,
  /*   49 */  rdi_RegI_rule,
  /*   50 */  no_rcx_RegI_rule,
  /*   51 */  no_rax_rdx_RegI_rule,
  /*   52 */  any_RegP_rule,
  /*   53 */  rRegP_rule,
  /*   54 */  rRegN_rule,
  /*   55 */  no_rax_RegP_rule,
  /*   56 */  no_rbp_RegP_rule,
  /*   57 */  no_rax_rbx_RegP_rule,
  /*   58 */  rax_RegP_rule,
  /*   59 */  rax_RegN_rule,
  /*   60 */  rbx_RegP_rule,
  /*   61 */  rsi_RegP_rule,
  /*   62 */  rdi_RegP_rule,
  /*   63 */  r15_RegP_rule,
  /*   64 */  rRegL_rule,
  /*   65 */  no_rax_rdx_RegL_rule,
  /*   66 */  no_rax_RegL_rule,
  /*   67 */  no_rcx_RegL_rule,
  /*   68 */  rax_RegL_rule,
  /*   69 */  rcx_RegL_rule,
  /*   70 */  rdx_RegL_rule,
  /*   71 */  rFlagsReg_rule,
  /*   72 */  rFlagsRegU_rule,
  /*   73 */  rFlagsRegUCF_rule,
  /*   74 */  regF_rule,
  /*   75 */  regD_rule,
  /*   76 */  vecS_rule,
  /*   77 */  vecD_rule,
  /*   78 */  vecX_rule,
  /*   79 */  vecY_rule,
  /*   80 */  indirect_rule,
  /*   81 */  indOffset8_rule,
  /*   82 */  indOffset32_rule,
  /*   83 */  indIndexOffset_rule,
  /*   84 */  indIndex_rule,
  /*   85 */  indIndexScale_rule,
  /*   86 */  indPosIndexScale_rule,
  /*   87 */  indIndexScaleOffset_rule,
  /*   88 */  indPosIndexOffset_rule,
  /*   89 */  indPosIndexScaleOffset_rule,
  /*   90 */  indCompressedOopOffset_rule,
  /*   91 */  indirectNarrow_rule,
  /*   92 */  indOffset8Narrow_rule,
  /*   93 */  indOffset32Narrow_rule,
  /*   94 */  indIndexOffsetNarrow_rule,
  /*   95 */  indIndexNarrow_rule,
  /*   96 */  indIndexScaleNarrow_rule,
  /*   97 */  indIndexScaleOffsetNarrow_rule,
  /*   98 */  indPosIndexOffsetNarrow_rule,
  /*   99 */  indPosIndexScaleOffsetNarrow_rule,
  /*  100 */  stackSlotP_rule,
  /*  101 */  stackSlotI_rule,
  /*  102 */  stackSlotF_rule,
  /*  103 */  stackSlotD_rule,
  /*  104 */  stackSlotL_rule,
  /*  105 */  cmpOp_rule,
  /*  106 */  cmpOpU_rule,
  /*  107 */  cmpOpUCF_rule,
  /*  108 */  cmpOpUCF2_rule,
  /*  109 */  vecZ_rule,
  /*  110 */  cmpOp_vcmppd_rule,
  // last operand
  /*  111 */  memory_rule,
  // last operand class
  /*  112 */  _AddP_any_RegP_rRegL_rule,
  /*  113 */  _LShiftL_rRegL_immI2_rule,
  /*  114 */  _ConvI2L_rRegI__rule,
  /*  115 */  _LShiftL__ConvI2L_rRegI__immI2_rule,
  /*  116 */  _AddP_any_RegP__LShiftL_rRegL_immI2_rule,
  /*  117 */  _AddP_any_RegP__ConvI2L_rRegI__rule,
  /*  118 */  _AddP_any_RegP__LShiftL__ConvI2L_rRegI__immI2_rule,
  /*  119 */  _DecodeN_rRegN__rule,
  /*  120 */  _AddP__DecodeN_rRegN__rRegL_rule,
  /*  121 */  _AddP__DecodeN_rRegN___LShiftL_rRegL_immI2_rule,
  /*  122 */  _AddP__DecodeN_rRegN___ConvI2L_rRegI__rule,
  /*  123 */  _AddP__DecodeN_rRegN___LShiftL__ConvI2L_rRegI__immI2_rule,
  /*  124 */  _LoadB_memory__rule,
  /*  125 */  _LoadUB_memory__rule,
  /*  126 */  _AndI__LoadUB_memory__immI_rule,
  /*  127 */  _LoadS_memory__rule,
  /*  128 */  _LShiftI__LoadS_memory__immI_24_rule,
  /*  129 */  _LoadUS_memory__rule,
  /*  130 */  _LShiftI__LoadUS_memory__immI_24_rule,
  /*  131 */  _AndI__LoadUS_memory__immI_255_rule,
  /*  132 */  _AndI__LoadUS_memory__immI_rule,
  /*  133 */  _LoadI_memory__rule,
  /*  134 */  _LShiftI__LoadI_memory__immI_24_rule,
  /*  135 */  _LShiftI__LoadI_memory__immI_16_rule,
  /*  136 */  _AndI__LoadI_memory__immI_255_rule,
  /*  137 */  _AndI__LoadI_memory__immI_65535_rule,
  /*  138 */  _AndI__LoadI_memory__immU31_rule,
  /*  139 */  _ConvI2L__LoadI_memory___rule,
  /*  140 */  _LoadL_memory__rule,
  /*  141 */  _CastP2X_rRegP__rule,
  /*  142 */  _CastP2X__DecodeN_rRegN___rule,
  /*  143 */  _AddL__LShiftL_rRegL_immI2_immL32_rule,
  /*  144 */  _Binary_cmpOp_rFlagsReg_rule,
  /*  145 */  _Binary_rRegI_rRegI_rule,
  /*  146 */  _Binary_cmpOpU_rFlagsRegU_rule,
  /*  147 */  _Binary_cmpOpUCF_rFlagsRegUCF_rule,
  /*  148 */  _Binary_rRegI__LoadI_memory__rule,
  /*  149 */  _Binary_rRegN_rRegN_rule,
  /*  150 */  _Binary_rRegP_rRegP_rule,
  /*  151 */  _Binary_rRegL_rRegL_rule,
  /*  152 */  _Binary_rRegL__LoadL_memory__rule,
  /*  153 */  _Binary_regF_regF_rule,
  /*  154 */  _Binary_regD_regD_rule,
  /*  155 */  _AddI__LoadI_memory__rRegI_rule,
  /*  156 */  _AddI_rRegI__LoadI_memory__rule,
  /*  157 */  _AddI__LoadI_memory__immI_rule,
  /*  158 */  _AddI__LoadI_memory__immI1_rule,
  /*  159 */  _AddI__LoadI_memory__immI_M1_rule,
  /*  160 */  _AddL__LoadL_memory__rRegL_rule,
  /*  161 */  _AddL_rRegL__LoadL_memory__rule,
  /*  162 */  _AddL__LoadL_memory__immL32_rule,
  /*  163 */  _AddL__LoadL_memory__immL1_rule,
  /*  164 */  _AddL__LoadL_memory__immL_M1_rule,
  /*  165 */  _Binary_rax_RegP_rRegP_rule,
  /*  166 */  _Binary_rax_RegI_rRegI_rule,
  /*  167 */  _Binary_rax_RegL_rRegL_rule,
  /*  168 */  _Binary_rax_RegN_rRegN_rule,
  /*  169 */  _SubI__LoadI_memory__rRegI_rule,
  /*  170 */  _SubI__LoadI_memory__immI_rule,
  /*  171 */  _SubL__LoadL_memory__rRegL_rule,
  /*  172 */  _SubL__LoadL_memory__immL32_rule,
  /*  173 */  _SubI_immI0_rRegI_rule,
  /*  174 */  _SubI_immI0__LoadI_memory__rule,
  /*  175 */  _SubL_immL0__LoadL_memory__rule,
  /*  176 */  _LShiftI__LoadI_memory__immI1_rule,
  /*  177 */  _LShiftI__LoadI_memory__immI8_rule,
  /*  178 */  _LShiftI__LoadI_memory__rcx_RegI_rule,
  /*  179 */  _RShiftI__LoadI_memory__immI1_rule,
  /*  180 */  _RShiftI__LoadI_memory__immI8_rule,
  /*  181 */  _RShiftI__LoadI_memory__rcx_RegI_rule,
  /*  182 */  _URShiftI__LoadI_memory__immI1_rule,
  /*  183 */  _URShiftI__LoadI_memory__immI8_rule,
  /*  184 */  _URShiftI__LoadI_memory__rcx_RegI_rule,
  /*  185 */  _LShiftL__LoadL_memory__immI1_rule,
  /*  186 */  _LShiftL__LoadL_memory__immI8_rule,
  /*  187 */  _LShiftL__LoadL_memory__rcx_RegI_rule,
  /*  188 */  _RShiftL__LoadL_memory__immI1_rule,
  /*  189 */  _RShiftL__LoadL_memory__immI8_rule,
  /*  190 */  _RShiftL__LoadL_memory__rcx_RegI_rule,
  /*  191 */  _URShiftL__LoadL_memory__immI1_rule,
  /*  192 */  _URShiftL__LoadL_memory__immI8_rule,
  /*  193 */  _URShiftL__LoadL_memory__rcx_RegI_rule,
  /*  194 */  _LShiftI_rRegI_immI_24_rule,
  /*  195 */  _LShiftI_rRegI_immI_16_rule,
  /*  196 */  _LShiftI_rRegI_immI1_rule,
  /*  197 */  _URShiftI_rRegI_immI_M1_rule,
  /*  198 */  _LShiftI_rRegI_immI8_rule,
  /*  199 */  _URShiftI_rRegI_immI8_rule,
  /*  200 */  _LShiftI_no_rcx_RegI_rcx_RegI_rule,
  /*  201 */  _SubI_immI0_rcx_RegI_rule,
  /*  202 */  _URShiftI_no_rcx_RegI__SubI_immI0_rcx_RegI_rule,
  /*  203 */  _SubI_immI_32_rcx_RegI_rule,
  /*  204 */  _URShiftI_no_rcx_RegI__SubI_immI_32_rcx_RegI_rule,
  /*  205 */  _URShiftI_rRegI_immI1_rule,
  /*  206 */  _LShiftI_rRegI_immI_M1_rule,
  /*  207 */  _URShiftI_no_rcx_RegI_rcx_RegI_rule,
  /*  208 */  _LShiftI_no_rcx_RegI__SubI_immI0_rcx_RegI_rule,
  /*  209 */  _LShiftI_no_rcx_RegI__SubI_immI_32_rcx_RegI_rule,
  /*  210 */  _LShiftL_rRegL_immI1_rule,
  /*  211 */  _URShiftL_rRegL_immI_M1_rule,
  /*  212 */  _LShiftL_rRegL_immI8_rule,
  /*  213 */  _URShiftL_rRegL_immI8_rule,
  /*  214 */  _LShiftL_no_rcx_RegL_rcx_RegI_rule,
  /*  215 */  _URShiftL_no_rcx_RegL__SubI_immI0_rcx_RegI_rule,
  /*  216 */  _SubI_immI_64_rcx_RegI_rule,
  /*  217 */  _URShiftL_no_rcx_RegL__SubI_immI_64_rcx_RegI_rule,
  /*  218 */  _URShiftL_rRegL_immI1_rule,
  /*  219 */  _LShiftL_rRegL_immI_M1_rule,
  /*  220 */  _URShiftL_no_rcx_RegL_rcx_RegI_rule,
  /*  221 */  _LShiftL_no_rcx_RegL__SubI_immI0_rcx_RegI_rule,
  /*  222 */  _LShiftL_no_rcx_RegL__SubI_immI_64_rcx_RegI_rule,
  /*  223 */  _AndI_rRegI_immI_255_rule,
  /*  224 */  _AndI_rRegI_immI_65535_rule,
  /*  225 */  _AndI__LoadI_memory__rRegI_rule,
  /*  226 */  _AndI_rRegI__LoadI_memory__rule,
  /*  227 */  _AndI__LoadI_memory__immI_rule,
  /*  228 */  _XorI_rRegI_immI_M1_rule,
  /*  229 */  _AddI_rRegI_immI_M1_rule,
  /*  230 */  _OrI__LoadI_memory__rRegI_rule,
  /*  231 */  _OrI_rRegI__LoadI_memory__rule,
  /*  232 */  _OrI__LoadI_memory__immI_rule,
  /*  233 */  _XorI__LoadI_memory__rRegI_rule,
  /*  234 */  _XorI_rRegI__LoadI_memory__rule,
  /*  235 */  _XorI__LoadI_memory__immI_rule,
  /*  236 */  _AndL__LoadL_memory__rRegL_rule,
  /*  237 */  _AndL_rRegL__LoadL_memory__rule,
  /*  238 */  _AndL__LoadL_memory__immL32_rule,
  /*  239 */  _XorL_rRegL_immL_M1_rule,
  /*  240 */  _SubL_immL0_rRegL_rule,
  /*  241 */  _AddL_rRegL_immL_M1_rule,
  /*  242 */  _CastP2X_any_RegP__rule,
  /*  243 */  _OrL__LoadL_memory__rRegL_rule,
  /*  244 */  _OrL_rRegL__LoadL_memory__rule,
  /*  245 */  _OrL__LoadL_memory__immL32_rule,
  /*  246 */  _XorL__LoadL_memory__rRegL_rule,
  /*  247 */  _XorL_rRegL__LoadL_memory__rule,
  /*  248 */  _XorL__LoadL_memory__immL32_rule,
  /*  249 */  _CmpLTMask_rRegI_rRegI_rule,
  /*  250 */  _AndI__CmpLTMask_rRegI_rRegI_rRegI_rule,
  /*  251 */  _SubI_rRegI_rRegI_rule,
  /*  252 */  _AndI_rRegI__CmpLTMask_rRegI_rRegI_rule,
  /*  253 */  _LoadF_memory__rule,
  /*  254 */  _LoadD_memory__rule,
  /*  255 */  _Binary_rdi_RegP_rcx_RegI_rule,
  /*  256 */  _Binary_rsi_RegP_rdx_RegI_rule,
  /*  257 */  _Binary_rdi_RegP_rdx_RegI_rule,
  /*  258 */  _Binary_rsi_RegP_immI_rule,
  /*  259 */  _Binary_rsi_RegP_rax_RegI_rule,
  /*  260 */  _Binary_rdi_RegP_rsi_RegP_rule,
  /*  261 */  _AndI_rRegI_immI_rule,
  /*  262 */  _LoadP_memory__rule,
  /*  263 */  _LoadN_memory__rule,
  /*  264 */  _LoadNKlass_memory__rule,
  /*  265 */  _AndL_rRegL_immL32_rule,
  /*  266 */  _PartialSubtypeCheck_rsi_RegP_rax_RegP_rule,
  /*  267 */  _ConvF2D_regF__rule,
  /*  268 */  _SqrtD__ConvF2D_regF___rule,
  /*  269 */  _ConvF2D__LoadF_memory___rule,
  /*  270 */  _SqrtD__ConvF2D__LoadF_memory____rule,
  /*  271 */  _ConvF2D_immF__rule,
  /*  272 */  _SqrtD__ConvF2D_immF___rule,
  /*  273 */  _LoadVector_memory__rule,
  /*  274 */  _Binary_cmpOp_vcmppd_immI8_rule,
  /*  275 */  _Binary_vecY_vecY_rule,
  // last internally defined operand
  /*  276 */  stackSlotI_rule,
  /*  277 */  stackSlotL_rule,
  /*  278 */  stackSlotP_rule,
  /*  279 */  stackSlotF_rule,
  /*  280 */  stackSlotD_rule,
  /*  281 */  rRegP_rule,
  /*  282 */  rRegP_rule,
  /*  283 */  rRegP_rule,
  /*  284 */  rRegP_rule,
  /*  285 */  rRegP_rule,
  /*  286 */  rRegP_rule,
  /*  287 */  rRegP_rule,
  /*  288 */  rRegP_rule,
  /*  289 */  rRegP_rule,
  /*  290 */  rRegP_rule,
  /*  291 */  rRegP_rule,
  /*  292 */  rRegP_rule,
  /*  293 */  rRegP_rule,
  /*  294 */  rRegP_rule,
  /*  295 */  rRegP_rule,
  /*  296 */  rRegP_rule,
  /*  297 */  rRegI_rule,
  /*  298 */  rRegI_rule,
  /*  299 */  rRegL_rule,
  /*  300 */  rRegL_rule,
  /*  301 */  rRegL_rule,
  /*  302 */  rRegL_rule,
  /*  303 */  rRegP_rule,
  /*  304 */  rRegP_rule,
  /*  305 */  rRegP_rule,
  /*  306 */  regF_rule,
  /*  307 */  rRegN_rule,
  /*  308 */  rRegN_rule,
  /*  309 */  rRegN_rule,
  /*  310 */  regF_rule,
  /*  311 */  regD_rule,
  /*  312 */  regD_rule,
  /*  313 */  rRegI_rule,
  /*  314 */  rRegL_rule,
  /*  315 */  rRegP_rule,
  /*  316 */  regF_rule,
  /*  317 */  regD_rule,
  /*  318 */  Universe_rule,
  /*  319 */  rRegP_rule,
  /*  320 */  rRegL_rule,
  /*  321 */  rRegP_rule,
  /*  322 */  rRegP_rule,
  /*  323 */  rRegI_rule,
  /*  324 */  rFlagsReg_rule,
  /*  325 */  rFlagsReg_rule,
  /*  326 */  rFlagsReg_rule,
  /*  327 */  rFlagsRegU_rule,
  /*  328 */  rFlagsRegUCF_rule,
  /*  329 */  rFlagsRegU_rule,
  /*  330 */  rFlagsRegUCF_rule,
  /*  331 */  rFlagsRegU_rule,
  /*  332 */  rFlagsRegUCF_rule,
  /*  333 */  rFlagsRegU_rule,
  /*  334 */  rFlagsRegUCF_rule,
  /*  335 */  rFlagsRegU_rule,
  /*  336 */  rFlagsRegUCF_rule,
  /*  337 */  rFlagsRegU_rule,
  /*  338 */  rFlagsRegUCF_rule,
  /*  339 */  regF_rule,
  /*  340 */  regD_rule,
  /*  341 */  rRegI_rule,
  /*  342 */  regF_rule,
  /*  343 */  rRegL_rule,
  /*  344 */  regD_rule,
  /*  345 */  regD_rule,
  /*  346 */  rRegI_rule,
  /*  347 */  rRegL_rule,
  /*  348 */  regF_rule,
  /*  349 */  regD_rule,
  /*  350 */  rFlagsReg_rule,
  /*  351 */  rFlagsReg_rule,
  /*  352 */  rFlagsReg_rule,
  /*  353 */  rFlagsReg_rule,
  /*  354 */  rFlagsReg_rule,
  /*  355 */  rFlagsReg_rule,
  /*  356 */  rFlagsReg_rule,
  /*  357 */  rFlagsReg_rule,
  /*  358 */  rFlagsReg_rule,
  /*  359 */  rFlagsReg_rule,
  /*  360 */  rFlagsReg_rule,
  /*  361 */  rFlagsReg_rule,
  /*  362 */  rFlagsReg_rule,
  /*  363 */  rFlagsReg_rule,
  /*  364 */  rFlagsReg_rule,
  /*  365 */  rFlagsReg_rule,
  /*  366 */  rFlagsReg_rule,
  /*  367 */  rFlagsReg_rule,
  /*  368 */  rFlagsReg_rule,
  /*  369 */  rFlagsReg_rule,
  /*  370 */  rFlagsReg_rule,
  /*  371 */  rFlagsRegU_rule,
  /*  372 */  rFlagsRegU_rule,
  /*  373 */  rFlagsRegU_rule,
  /*  374 */  rFlagsRegU_rule,
  /*  375 */  rFlagsRegU_rule,
  /*  376 */  rFlagsRegU_rule,
  /*  377 */  rFlagsRegU_rule,
  /*  378 */  rFlagsReg_rule,
  /*  379 */  rFlagsReg_rule,
  /*  380 */  rFlagsReg_rule,
  /*  381 */  rFlagsRegU_rule,
  /*  382 */  rFlagsRegU_rule,
  /*  383 */  rFlagsRegU_rule,
  /*  384 */  rFlagsRegU_rule,
  /*  385 */  rFlagsRegU_rule,
  /*  386 */  rFlagsRegU_rule,
  /*  387 */  rFlagsReg_rule,
  /*  388 */  rFlagsReg_rule,
  /*  389 */  rFlagsReg_rule,
  /*  390 */  rFlagsReg_rule,
  /*  391 */  rFlagsReg_rule,
  /*  392 */  rFlagsReg_rule,
  /*  393 */  rFlagsReg_rule,
  /*  394 */  rFlagsReg_rule,
  /*  395 */  rFlagsReg_rule,
  /*  396 */  rFlagsReg_rule,
  /*  397 */  rFlagsRegU_rule,
  /*  398 */  rFlagsRegU_rule,
  /*  399 */  rFlagsRegU_rule,
  /*  400 */  rFlagsRegU_rule,
  /*  401 */  rFlagsReg_rule,
  /*  402 */  rFlagsReg_rule,
  /*  403 */  rFlagsReg_rule,
  /*  404 */  rFlagsReg_rule,
  /*  405 */  Universe_rule,
  /*  406 */  r15_RegP_rule,
  /*  407 */  regF_rule,
  /*  408 */  regF_rule,
  /*  409 */  regF_rule,
  /*  410 */  regD_rule,
  /*  411 */  regD_rule,
  /*  412 */  regD_rule,
  /*  413 */  regF_rule,
  /*  414 */  regF_rule,
  /*  415 */  regD_rule,
  /*  416 */  regD_rule,
  /*  417 */  vecS_rule,
  /*  418 */  vecS_rule,
  /*  419 */  vecX_rule,
  /*  420 */  vecX_rule,
  /*  421 */  vecY_rule,
  /*  422 */  vecY_rule,
  /*  423 */  vecZ_rule,
  /*  424 */  vecZ_rule,
  /*  425 */  rRegI_rule,
  /*  426 */  rRegL_rule,
  /*  427 */  rRegI_rule,
  /*  428 */  rRegL_rule,
  /*  429 */  rRegL_rule,
  /*  430 */  rRegI_rule,
  /*  431 */  rRegI_rule,
  /*  432 */  rRegL_rule,
  /*  433 */  rRegI_rule,
  /*  434 */  rRegI_rule,
  /*  435 */  rRegL_rule,
  /*  436 */  rRegL_rule,
  /*  437 */  rRegL_rule,
  /*  438 */  rRegI_rule,
  /*  439 */  rRegI_rule,
  /*  440 */  rRegI_rule,
  /*  441 */  rRegI_rule,
  /*  442 */  rRegI_rule,
  /*  443 */  rRegL_rule,
  /*  444 */  rRegL_rule,
  /*  445 */  rRegL_rule,
  /*  446 */  rRegL_rule,
  /*  447 */  rRegL_rule,
  /*  448 */  rRegL_rule,
  /*  449 */  rRegI_rule,
  /*  450 */  rRegP_rule,
  /*  451 */  rRegN_rule,
  /*  452 */  rRegP_rule,
  /*  453 */  rRegN_rule,
  /*  454 */  regF_rule,
  /*  455 */  regD_rule,
  /*  456 */  regD_rule,
  /*  457 */  Universe_rule,
  /*  458 */  Universe_rule,
  /*  459 */  Universe_rule,
  /*  460 */  Universe_rule,
  /*  461 */  Universe_rule,
  /*  462 */  Universe_rule,
  /*  463 */  Universe_rule,
  /*  464 */  Universe_rule,
  /*  465 */  Universe_rule,
  /*  466 */  Universe_rule,
  /*  467 */  Universe_rule,
  /*  468 */  Universe_rule,
  /*  469 */  Universe_rule,
  /*  470 */  Universe_rule,
  /*  471 */  Universe_rule,
  /*  472 */  Universe_rule,
  /*  473 */  Universe_rule,
  /*  474 */  Universe_rule,
  /*  475 */  Universe_rule,
  /*  476 */  Universe_rule,
  /*  477 */  Universe_rule,
  /*  478 */  Universe_rule,
  /*  479 */  Universe_rule,
  /*  480 */  Universe_rule,
  /*  481 */  Universe_rule,
  /*  482 */  Universe_rule,
  /*  483 */  Universe_rule,
  /*  484 */  Universe_rule,
  /*  485 */  Universe_rule,
  /*  486 */  Universe_rule,
  /*  487 */  Universe_rule,
  /*  488 */  Universe_rule,
  /*  489 */  rRegI_rule,
  /*  490 */  rRegL_rule,
  /*  491 */  rRegI_rule,
  /*  492 */  rRegI_rule,
  /*  493 */  rRegI_rule,
  /*  494 */  rRegI_rule,
  /*  495 */  rRegI_rule,
  /*  496 */  rRegI_rule,
  /*  497 */  rRegI_rule,
  /*  498 */  rRegI_rule,
  /*  499 */  rRegI_rule,
  /*  500 */  rRegI_rule,
  /*  501 */  rRegI_rule,
  /*  502 */  rRegI_rule,
  /*  503 */  rRegI_rule,
  /*  504 */  rRegI_rule,
  /*  505 */  Universe_rule,
  /*  506 */  Universe_rule,
  /*  507 */  Universe_rule,
  /*  508 */  Universe_rule,
  /*  509 */  Universe_rule,
  /*  510 */  Universe_rule,
  /*  511 */  Universe_rule,
  /*  512 */  Universe_rule,
  /*  513 */  rRegI_rule,
  /*  514 */  rRegI_rule,
  /*  515 */  rRegN_rule,
  /*  516 */  rRegN_rule,
  /*  517 */  rRegP_rule,
  /*  518 */  rRegP_rule,
  /*  519 */  rRegN_rule,
  /*  520 */  rRegP_rule,
  /*  521 */  Universe_rule,
  /*  522 */  Universe_rule,
  /*  523 */  Universe_rule,
  /*  524 */  rRegI_rule,
  /*  525 */  rRegI_rule,
  /*  526 */  rRegI_rule,
  /*  527 */  rRegI_rule,
  /*  528 */  rRegI_rule,
  /*  529 */  rRegI_rule,
  /*  530 */  rRegN_rule,
  /*  531 */  rRegN_rule,
  /*  532 */  rRegN_rule,
  /*  533 */  rRegP_rule,
  /*  534 */  rRegP_rule,
  /*  535 */  rRegP_rule,
  /*  536 */  rRegL_rule,
  /*  537 */  rRegL_rule,
  /*  538 */  rRegL_rule,
  /*  539 */  rRegL_rule,
  /*  540 */  rRegL_rule,
  /*  541 */  rRegL_rule,
  /*  542 */  regF_rule,
  /*  543 */  regF_rule,
  /*  544 */  regF_rule,
  /*  545 */  regD_rule,
  /*  546 */  regD_rule,
  /*  547 */  regD_rule,
  /*  548 */  rRegI_rule,
  /*  549 */  rRegI_rule,
  /*  550 */  rRegI_rule,
  /*  551 */  rRegI_rule,
  /*  552 */  Universe_rule,
  /*  553 */  Universe_rule,
  /*  554 */  Universe_rule,
  /*  555 */  rRegI_rule,
  /*  556 */  Universe_rule,
  /*  557 */  rRegI_rule,
  /*  558 */  Universe_rule,
  /*  559 */  rRegI_rule,
  /*  560 */  rRegL_rule,
  /*  561 */  rRegL_rule,
  /*  562 */  rRegL_rule,
  /*  563 */  rRegL_rule,
  /*  564 */  Universe_rule,
  /*  565 */  Universe_rule,
  /*  566 */  Universe_rule,
  /*  567 */  rRegI_rule,
  /*  568 */  Universe_rule,
  /*  569 */  rRegL_rule,
  /*  570 */  Universe_rule,
  /*  571 */  rRegL_rule,
  /*  572 */  rRegP_rule,
  /*  573 */  rRegP_rule,
  /*  574 */  rRegP_rule,
  /*  575 */  rRegP_rule,
  /*  576 */  rRegI_rule,
  /*  577 */  rRegI_rule,
  /*  578 */  rRegI_rule,
  /*  579 */  rRegI_rule,
  /*  580 */  rRegI_rule,
  /*  581 */  rRegI_rule,
  /*  582 */  rRegI_rule,
  /*  583 */  rRegI_rule,
  /*  584 */  rRegI_rule,
  /*  585 */  rRegI_rule,
  /*  586 */  rRegI_rule,
  /*  587 */  rRegI_rule,
  /*  588 */  rax_RegI_rule,
  /*  589 */  rax_RegI_rule,
  /*  590 */  rax_RegI_rule,
  /*  591 */  rax_RegL_rule,
  /*  592 */  rax_RegN_rule,
  /*  593 */  rax_RegP_rule,
  /*  594 */  Universe_rule,
  /*  595 */  rRegI_rule,
  /*  596 */  Universe_rule,
  /*  597 */  rRegI_rule,
  /*  598 */  Universe_rule,
  /*  599 */  rRegI_rule,
  /*  600 */  Universe_rule,
  /*  601 */  rRegL_rule,
  /*  602 */  rRegI_rule,
  /*  603 */  rRegI_rule,
  /*  604 */  rRegI_rule,
  /*  605 */  rRegL_rule,
  /*  606 */  rRegP_rule,
  /*  607 */  rRegN_rule,
  /*  608 */  rRegI_rule,
  /*  609 */  rRegI_rule,
  /*  610 */  rRegI_rule,
  /*  611 */  Universe_rule,
  /*  612 */  Universe_rule,
  /*  613 */  rRegL_rule,
  /*  614 */  rRegI_rule,
  /*  615 */  rRegL_rule,
  /*  616 */  Universe_rule,
  /*  617 */  Universe_rule,
  /*  618 */  rRegP_rule,
  /*  619 */  rRegI_rule,
  /*  620 */  Universe_rule,
  /*  621 */  rRegL_rule,
  /*  622 */  Universe_rule,
  /*  623 */  rRegI_rule,
  /*  624 */  rRegI_rule,
  /*  625 */  rRegI_rule,
  /*  626 */  rRegI_rule,
  /*  627 */  rRegI_rule,
  /*  628 */  rRegL_rule,
  /*  629 */  rRegL_rule,
  /*  630 */  rRegL_rule,
  /*  631 */  rRegL_rule,
  /*  632 */  rRegL_rule,
  /*  633 */  rdx_RegL_rule,
  /*  634 */  rax_RegI_rule,
  /*  635 */  rax_RegL_rule,
  /*  636 */  Universe_rule,
  /*  637 */  Universe_rule,
  /*  638 */  0,
  /*  639 */  0,
  /*  640 */  0,
  /*  641 */  0,
  /*  642 */  rdx_RegL_rule,
  /*  643 */  rdx_RegI_rule,
  /*  644 */  rdx_RegL_rule,
  /*  645 */  rRegI_rule,
  /*  646 */  Universe_rule,
  /*  647 */  rRegI_rule,
  /*  648 */  Universe_rule,
  /*  649 */  rRegI_rule,
  /*  650 */  Universe_rule,
  /*  651 */  rRegI_rule,
  /*  652 */  Universe_rule,
  /*  653 */  rRegI_rule,
  /*  654 */  Universe_rule,
  /*  655 */  rRegI_rule,
  /*  656 */  Universe_rule,
  /*  657 */  rRegI_rule,
  /*  658 */  Universe_rule,
  /*  659 */  rRegI_rule,
  /*  660 */  Universe_rule,
  /*  661 */  rRegI_rule,
  /*  662 */  Universe_rule,
  /*  663 */  rRegL_rule,
  /*  664 */  Universe_rule,
  /*  665 */  rRegL_rule,
  /*  666 */  Universe_rule,
  /*  667 */  rRegL_rule,
  /*  668 */  Universe_rule,
  /*  669 */  rRegL_rule,
  /*  670 */  Universe_rule,
  /*  671 */  rRegL_rule,
  /*  672 */  Universe_rule,
  /*  673 */  rRegL_rule,
  /*  674 */  Universe_rule,
  /*  675 */  rRegL_rule,
  /*  676 */  Universe_rule,
  /*  677 */  rRegL_rule,
  /*  678 */  Universe_rule,
  /*  679 */  rRegL_rule,
  /*  680 */  Universe_rule,
  /*  681 */  rRegI_rule,
  /*  682 */  rRegI_rule,
  /*  683 */  0,
  /*  684 */  0,
  /*  685 */  0,
  /*  686 */  rRegI_rule,
  /*  687 */  rRegI_rule,
  /*  688 */  rRegI_rule,
  /*  689 */  rRegI_rule,
  /*  690 */  no_rcx_RegI_rule,
  /*  691 */  no_rcx_RegI_rule,
  /*  692 */  no_rcx_RegI_rule,
  /*  693 */  no_rcx_RegI_rule,
  /*  694 */  0,
  /*  695 */  0,
  /*  696 */  0,
  /*  697 */  rRegI_rule,
  /*  698 */  rRegI_rule,
  /*  699 */  rRegI_rule,
  /*  700 */  rRegI_rule,
  /*  701 */  no_rcx_RegI_rule,
  /*  702 */  no_rcx_RegI_rule,
  /*  703 */  no_rcx_RegI_rule,
  /*  704 */  no_rcx_RegI_rule,
  /*  705 */  0,
  /*  706 */  0,
  /*  707 */  0,
  /*  708 */  rRegL_rule,
  /*  709 */  rRegL_rule,
  /*  710 */  rRegL_rule,
  /*  711 */  rRegL_rule,
  /*  712 */  no_rcx_RegL_rule,
  /*  713 */  no_rcx_RegL_rule,
  /*  714 */  no_rcx_RegL_rule,
  /*  715 */  no_rcx_RegL_rule,
  /*  716 */  0,
  /*  717 */  0,
  /*  718 */  0,
  /*  719 */  rRegL_rule,
  /*  720 */  rRegL_rule,
  /*  721 */  rRegL_rule,
  /*  722 */  rRegL_rule,
  /*  723 */  no_rcx_RegL_rule,
  /*  724 */  no_rcx_RegL_rule,
  /*  725 */  no_rcx_RegL_rule,
  /*  726 */  no_rcx_RegL_rule,
  /*  727 */  rRegI_rule,
  /*  728 */  rRegI_rule,
  /*  729 */  rRegL_rule,
  /*  730 */  rRegI_rule,
  /*  731 */  rRegL_rule,
  /*  732 */  rRegI_rule,
  /*  733 */  rRegI_rule,
  /*  734 */  rRegI_rule,
  /*  735 */  Universe_rule,
  /*  736 */  Universe_rule,
  /*  737 */  Universe_rule,
  /*  738 */  rRegI_rule,
  /*  739 */  rRegI_rule,
  /*  740 */  rRegI_rule,
  /*  741 */  rRegI_rule,
  /*  742 */  rRegI_rule,
  /*  743 */  rRegI_rule,
  /*  744 */  rRegI_rule,
  /*  745 */  rRegI_rule,
  /*  746 */  rRegI_rule,
  /*  747 */  rRegI_rule,
  /*  748 */  rRegI_rule,
  /*  749 */  rRegI_rule,
  /*  750 */  rRegI_rule,
  /*  751 */  rRegI_rule,
  /*  752 */  rRegI_rule,
  /*  753 */  rRegI_rule,
  /*  754 */  rRegI_rule,
  /*  755 */  rRegI_rule,
  /*  756 */  rRegI_rule,
  /*  757 */  rRegI_rule,
  /*  758 */  Universe_rule,
  /*  759 */  Universe_rule,
  /*  760 */  Universe_rule,
  /*  761 */  rRegI_rule,
  /*  762 */  rRegI_rule,
  /*  763 */  rRegI_rule,
  /*  764 */  rRegI_rule,
  /*  765 */  rRegI_rule,
  /*  766 */  Universe_rule,
  /*  767 */  Universe_rule,
  /*  768 */  Universe_rule,
  /*  769 */  rRegL_rule,
  /*  770 */  rRegL_rule,
  /*  771 */  rRegL_rule,
  /*  772 */  rRegL_rule,
  /*  773 */  rRegL_rule,
  /*  774 */  rRegL_rule,
  /*  775 */  Universe_rule,
  /*  776 */  Universe_rule,
  /*  777 */  Universe_rule,
  /*  778 */  rRegL_rule,
  /*  779 */  rRegL_rule,
  /*  780 */  rRegL_rule,
  /*  781 */  rRegL_rule,
  /*  782 */  rRegL_rule,
  /*  783 */  rRegL_rule,
  /*  784 */  rRegL_rule,
  /*  785 */  rRegL_rule,
  /*  786 */  rRegL_rule,
  /*  787 */  rRegL_rule,
  /*  788 */  rRegL_rule,
  /*  789 */  rRegL_rule,
  /*  790 */  rRegL_rule,
  /*  791 */  rRegL_rule,
  /*  792 */  rRegL_rule,
  /*  793 */  rRegL_rule,
  /*  794 */  rRegL_rule,
  /*  795 */  rRegL_rule,
  /*  796 */  rRegL_rule,
  /*  797 */  rRegL_rule,
  /*  798 */  rRegL_rule,
  /*  799 */  rRegL_rule,
  /*  800 */  Universe_rule,
  /*  801 */  Universe_rule,
  /*  802 */  Universe_rule,
  /*  803 */  rRegL_rule,
  /*  804 */  rRegL_rule,
  /*  805 */  rRegL_rule,
  /*  806 */  rRegL_rule,
  /*  807 */  rRegL_rule,
  /*  808 */  Universe_rule,
  /*  809 */  Universe_rule,
  /*  810 */  Universe_rule,
  /*  811 */  rRegI_rule,
  /*  812 */  rRegI_rule,
  /*  813 */  rRegI_rule,
  /*  814 */  rRegI_rule,
  /*  815 */  rRegI_rule,
  /*  816 */  rRegI_rule,
  /*  817 */  rRegI_rule,
  /*  818 */  rRegI_rule,
  /*  819 */  rRegI_rule,
  /*  820 */  rRegI_rule,
  /*  821 */  rRegI_rule,
  /*  822 */  rRegI_rule,
  /*  823 */  rRegI_rule,
  /*  824 */  rRegI_rule,
  /*  825 */  rRegI_rule,
  /*  826 */  rRegI_rule,
  /*  827 */  regD_rule,
  /*  828 */  regD_rule,
  /*  829 */  regF_rule,
  /*  830 */  regF_rule,
  /*  831 */  rRegI_rule,
  /*  832 */  rRegL_rule,
  /*  833 */  rRegI_rule,
  /*  834 */  rRegL_rule,
  /*  835 */  regF_rule,
  /*  836 */  regF_rule,
  /*  837 */  regD_rule,
  /*  838 */  regD_rule,
  /*  839 */  regF_rule,
  /*  840 */  regD_rule,
  /*  841 */  regF_rule,
  /*  842 */  regF_rule,
  /*  843 */  regD_rule,
  /*  844 */  regD_rule,
  /*  845 */  rRegL_rule,
  /*  846 */  rRegL_rule,
  /*  847 */  rRegL_rule,
  /*  848 */  rRegL_rule,
  /*  849 */  rRegI_rule,
  /*  850 */  stackSlotI_rule,
  /*  851 */  stackSlotF_rule,
  /*  852 */  stackSlotL_rule,
  /*  853 */  stackSlotD_rule,
  /*  854 */  Universe_rule,
  /*  855 */  Universe_rule,
  /*  856 */  rax_RegI_rule,
  /*  857 */  rax_RegI_rule,
  /*  858 */  rax_RegI_rule,
  /*  859 */  rax_RegI_rule,
  /*  860 */  rbx_RegI_rule,
  /*  861 */  rbx_RegI_rule,
  /*  862 */  rbx_RegI_rule,
  /*  863 */  rbx_RegI_rule,
  /*  864 */  rbx_RegI_rule,
  /*  865 */  rbx_RegI_rule,
  /*  866 */  rbx_RegI_rule,
  /*  867 */  rax_RegI_rule,
  /*  868 */  rax_RegI_rule,
  /*  869 */  rax_RegI_rule,
  /*  870 */  rax_RegI_rule,
  /*  871 */  rax_RegI_rule,
  /*  872 */  Universe_rule,
  /*  873 */  rax_RegI_rule,
  /*  874 */  rRegI_rule,
  /*  875 */  0,
  /*  876 */  rRegI_rule,
  /*  877 */  0,
  /*  878 */  rRegI_rule,
  /*  879 */  Universe_rule,
  /*  880 */  Universe_rule,
  /*  881 */  Universe_rule,
  /*  882 */  Universe_rule,
  /*  883 */  Universe_rule,
  /*  884 */  Universe_rule,
  /*  885 */  Universe_rule,
  /*  886 */  Universe_rule,
  /*  887 */  Universe_rule,
  /*  888 */  Universe_rule,
  /*  889 */  Universe_rule,
  /*  890 */  rdi_RegP_rule,
  /*  891 */  Universe_rule,
  /*  892 */  Universe_rule,
  /*  893 */  Universe_rule,
  /*  894 */  Universe_rule,
  /*  895 */  Universe_rule,
  /*  896 */  Universe_rule,
  /*  897 */  Universe_rule,
  /*  898 */  Universe_rule,
  /*  899 */  Universe_rule,
  /*  900 */  Universe_rule,
  /*  901 */  Universe_rule,
  /*  902 */  Universe_rule,
  /*  903 */  Universe_rule,
  /*  904 */  Universe_rule,
  /*  905 */  Universe_rule,
  /*  906 */  Universe_rule,
  /*  907 */  Universe_rule,
  /*  908 */  rax_RegP_rule,
  /*  909 */  Universe_rule,
  /*  910 */  Universe_rule,
  /*  911 */  rRegI_rule,
  /*  912 */  regF_rule,
  /*  913 */  regF_rule,
  /*  914 */  regF_rule,
  /*  915 */  regF_rule,
  /*  916 */  regF_rule,
  /*  917 */  regF_rule,
  /*  918 */  regF_rule,
  /*  919 */  regF_rule,
  /*  920 */  regD_rule,
  /*  921 */  regD_rule,
  /*  922 */  regD_rule,
  /*  923 */  regD_rule,
  /*  924 */  regD_rule,
  /*  925 */  regD_rule,
  /*  926 */  regD_rule,
  /*  927 */  regD_rule,
  /*  928 */  regF_rule,
  /*  929 */  regF_rule,
  /*  930 */  regF_rule,
  /*  931 */  regF_rule,
  /*  932 */  regF_rule,
  /*  933 */  regF_rule,
  /*  934 */  regD_rule,
  /*  935 */  regD_rule,
  /*  936 */  regD_rule,
  /*  937 */  regD_rule,
  /*  938 */  regD_rule,
  /*  939 */  regD_rule,
  /*  940 */  regF_rule,
  /*  941 */  regF_rule,
  /*  942 */  regF_rule,
  /*  943 */  regF_rule,
  /*  944 */  regF_rule,
  /*  945 */  regF_rule,
  /*  946 */  regF_rule,
  /*  947 */  regF_rule,
  /*  948 */  regD_rule,
  /*  949 */  regD_rule,
  /*  950 */  regD_rule,
  /*  951 */  regD_rule,
  /*  952 */  regD_rule,
  /*  953 */  regD_rule,
  /*  954 */  regD_rule,
  /*  955 */  regD_rule,
  /*  956 */  regF_rule,
  /*  957 */  regF_rule,
  /*  958 */  regF_rule,
  /*  959 */  regF_rule,
  /*  960 */  regF_rule,
  /*  961 */  regF_rule,
  /*  962 */  regD_rule,
  /*  963 */  regD_rule,
  /*  964 */  regD_rule,
  /*  965 */  regD_rule,
  /*  966 */  regD_rule,
  /*  967 */  regD_rule,
  /*  968 */  regF_rule,
  /*  969 */  regD_rule,
  /*  970 */  regF_rule,
  /*  971 */  regF_rule,
  /*  972 */  regF_rule,
  /*  973 */  regD_rule,
  /*  974 */  regD_rule,
  /*  975 */  regD_rule,
  /*  976 */  Universe_rule,
  /*  977 */  regD_rule,
  /*  978 */  regF_rule,
  /*  979 */  vecS_rule,
  /*  980 */  vecD_rule,
  /*  981 */  vecX_rule,
  /*  982 */  vecY_rule,
  /*  983 */  vecZ_rule,
  /*  984 */  vecZ_rule,
  /*  985 */  Universe_rule,
  /*  986 */  Universe_rule,
  /*  987 */  Universe_rule,
  /*  988 */  Universe_rule,
  /*  989 */  Universe_rule,
  /*  990 */  Universe_rule,
  /*  991 */  vecS_rule,
  /*  992 */  vecD_rule,
  /*  993 */  vecX_rule,
  /*  994 */  vecX_rule,
  /*  995 */  vecY_rule,
  /*  996 */  vecY_rule,
  /*  997 */  vecX_rule,
  /*  998 */  vecY_rule,
  /*  999 */  vecD_rule,
  /* 1000 */  vecD_rule,
  /* 1001 */  vecX_rule,
  /* 1002 */  vecX_rule,
  /* 1003 */  vecX_rule,
  /* 1004 */  vecY_rule,
  /* 1005 */  vecY_rule,
  /* 1006 */  vecY_rule,
  /* 1007 */  vecX_rule,
  /* 1008 */  vecX_rule,
  /* 1009 */  vecY_rule,
  /* 1010 */  vecY_rule,
  /* 1011 */  vecX_rule,
  /* 1012 */  vecY_rule,
  /* 1013 */  vecX_rule,
  /* 1014 */  vecY_rule,
  /* 1015 */  vecY_rule,
  /* 1016 */  vecY_rule,
  /* 1017 */  vecD_rule,
  /* 1018 */  vecX_rule,
  /* 1019 */  vecY_rule,
  /* 1020 */  vecY_rule,
  /* 1021 */  vecD_rule,
  /* 1022 */  vecX_rule,
  /* 1023 */  vecY_rule,
  /* 1024 */  vecX_rule,
  /* 1025 */  vecY_rule,
  /* 1026 */  vecY_rule,
  /* 1027 */  vecX_rule,
  /* 1028 */  vecY_rule,
  /* 1029 */  vecS_rule,
  /* 1030 */  vecD_rule,
  /* 1031 */  vecS_rule,
  /* 1032 */  vecD_rule,
  /* 1033 */  vecS_rule,
  /* 1034 */  vecD_rule,
  /* 1035 */  vecX_rule,
  /* 1036 */  vecY_rule,
  /* 1037 */  vecS_rule,
  /* 1038 */  vecS_rule,
  /* 1039 */  vecD_rule,
  /* 1040 */  vecS_rule,
  /* 1041 */  vecD_rule,
  /* 1042 */  vecX_rule,
  /* 1043 */  vecY_rule,
  /* 1044 */  vecD_rule,
  /* 1045 */  vecD_rule,
  /* 1046 */  vecD_rule,
  /* 1047 */  vecD_rule,
  /* 1048 */  vecX_rule,
  /* 1049 */  vecY_rule,
  /* 1050 */  vecX_rule,
  /* 1051 */  vecX_rule,
  /* 1052 */  vecX_rule,
  /* 1053 */  vecY_rule,
  /* 1054 */  vecD_rule,
  /* 1055 */  vecX_rule,
  /* 1056 */  vecX_rule,
  /* 1057 */  vecS_rule,
  /* 1058 */  vecD_rule,
  /* 1059 */  vecX_rule,
  /* 1060 */  vecX_rule,
  /* 1061 */  vecY_rule,
  /* 1062 */  vecY_rule,
  /* 1063 */  vecZ_rule,
  /* 1064 */  vecZ_rule,
  /* 1065 */  vecX_rule,
  /* 1066 */  vecY_rule,
  /* 1067 */  vecZ_rule,
  /* 1068 */  vecZ_rule,
  /* 1069 */  vecD_rule,
  /* 1070 */  vecD_rule,
  /* 1071 */  vecX_rule,
  /* 1072 */  vecX_rule,
  /* 1073 */  vecY_rule,
  /* 1074 */  vecY_rule,
  /* 1075 */  vecZ_rule,
  /* 1076 */  vecZ_rule,
  /* 1077 */  vecX_rule,
  /* 1078 */  vecY_rule,
  /* 1079 */  vecZ_rule,
  /* 1080 */  vecZ_rule,
  /* 1081 */  vecX_rule,
  /* 1082 */  vecX_rule,
  /* 1083 */  vecY_rule,
  /* 1084 */  vecY_rule,
  /* 1085 */  vecZ_rule,
  /* 1086 */  vecZ_rule,
  /* 1087 */  vecX_rule,
  /* 1088 */  vecY_rule,
  /* 1089 */  vecZ_rule,
  /* 1090 */  vecZ_rule,
  /* 1091 */  vecY_rule,
  /* 1092 */  vecZ_rule,
  /* 1093 */  vecY_rule,
  /* 1094 */  vecZ_rule,
  /* 1095 */  vecX_rule,
  /* 1096 */  vecY_rule,
  /* 1097 */  vecZ_rule,
  /* 1098 */  vecZ_rule,
  /* 1099 */  vecY_rule,
  /* 1100 */  vecY_rule,
  /* 1101 */  vecZ_rule,
  /* 1102 */  vecZ_rule,
  /* 1103 */  vecD_rule,
  /* 1104 */  vecX_rule,
  /* 1105 */  vecY_rule,
  /* 1106 */  vecZ_rule,
  /* 1107 */  vecY_rule,
  /* 1108 */  vecY_rule,
  /* 1109 */  vecZ_rule,
  /* 1110 */  vecZ_rule,
  /* 1111 */  vecX_rule,
  /* 1112 */  vecY_rule,
  /* 1113 */  vecZ_rule,
  /* 1114 */  rRegI_rule,
  /* 1115 */  rRegI_rule,
  /* 1116 */  rRegI_rule,
  /* 1117 */  rRegI_rule,
  /* 1118 */  rRegI_rule,
  /* 1119 */  rRegI_rule,
  /* 1120 */  rRegI_rule,
  /* 1121 */  rRegI_rule,
  /* 1122 */  rRegI_rule,
  /* 1123 */  rRegL_rule,
  /* 1124 */  rRegL_rule,
  /* 1125 */  rRegL_rule,
  /* 1126 */  regF_rule,
  /* 1127 */  regF_rule,
  /* 1128 */  regF_rule,
  /* 1129 */  regF_rule,
  /* 1130 */  regF_rule,
  /* 1131 */  regF_rule,
  /* 1132 */  regD_rule,
  /* 1133 */  regD_rule,
  /* 1134 */  regD_rule,
  /* 1135 */  regD_rule,
  /* 1136 */  rRegI_rule,
  /* 1137 */  rRegI_rule,
  /* 1138 */  rRegI_rule,
  /* 1139 */  rRegI_rule,
  /* 1140 */  rRegI_rule,
  /* 1141 */  rRegI_rule,
  /* 1142 */  rRegL_rule,
  /* 1143 */  rRegL_rule,
  /* 1144 */  rRegL_rule,
  /* 1145 */  regF_rule,
  /* 1146 */  regF_rule,
  /* 1147 */  regF_rule,
  /* 1148 */  regF_rule,
  /* 1149 */  regF_rule,
  /* 1150 */  regF_rule,
  /* 1151 */  regD_rule,
  /* 1152 */  regD_rule,
  /* 1153 */  regD_rule,
  /* 1154 */  regD_rule,
  /* 1155 */  vecS_rule,
  /* 1156 */  vecS_rule,
  /* 1157 */  vecS_rule,
  /* 1158 */  vecS_rule,
  /* 1159 */  vecS_rule,
  /* 1160 */  vecS_rule,
  /* 1161 */  vecS_rule,
  /* 1162 */  vecD_rule,
  /* 1163 */  vecD_rule,
  /* 1164 */  vecD_rule,
  /* 1165 */  vecD_rule,
  /* 1166 */  vecD_rule,
  /* 1167 */  vecD_rule,
  /* 1168 */  vecD_rule,
  /* 1169 */  vecX_rule,
  /* 1170 */  vecX_rule,
  /* 1171 */  vecX_rule,
  /* 1172 */  vecX_rule,
  /* 1173 */  vecX_rule,
  /* 1174 */  vecX_rule,
  /* 1175 */  vecX_rule,
  /* 1176 */  vecY_rule,
  /* 1177 */  vecY_rule,
  /* 1178 */  vecY_rule,
  /* 1179 */  vecY_rule,
  /* 1180 */  vecY_rule,
  /* 1181 */  vecY_rule,
  /* 1182 */  vecZ_rule,
  /* 1183 */  vecZ_rule,
  /* 1184 */  vecS_rule,
  /* 1185 */  vecS_rule,
  /* 1186 */  vecS_rule,
  /* 1187 */  vecS_rule,
  /* 1188 */  vecS_rule,
  /* 1189 */  vecS_rule,
  /* 1190 */  vecS_rule,
  /* 1191 */  vecD_rule,
  /* 1192 */  vecD_rule,
  /* 1193 */  vecD_rule,
  /* 1194 */  vecD_rule,
  /* 1195 */  vecD_rule,
  /* 1196 */  vecD_rule,
  /* 1197 */  vecD_rule,
  /* 1198 */  vecX_rule,
  /* 1199 */  vecX_rule,
  /* 1200 */  vecX_rule,
  /* 1201 */  vecX_rule,
  /* 1202 */  vecX_rule,
  /* 1203 */  vecX_rule,
  /* 1204 */  vecX_rule,
  /* 1205 */  vecY_rule,
  /* 1206 */  vecY_rule,
  /* 1207 */  vecY_rule,
  /* 1208 */  vecY_rule,
  /* 1209 */  vecY_rule,
  /* 1210 */  vecY_rule,
  /* 1211 */  vecZ_rule,
  /* 1212 */  vecZ_rule,
  /* 1213 */  vecD_rule,
  /* 1214 */  vecD_rule,
  /* 1215 */  vecD_rule,
  /* 1216 */  vecX_rule,
  /* 1217 */  vecX_rule,
  /* 1218 */  vecX_rule,
  /* 1219 */  vecY_rule,
  /* 1220 */  vecY_rule,
  /* 1221 */  vecZ_rule,
  /* 1222 */  vecZ_rule,
  /* 1223 */  vecX_rule,
  /* 1224 */  vecX_rule,
  /* 1225 */  vecX_rule,
  /* 1226 */  vecY_rule,
  /* 1227 */  vecY_rule,
  /* 1228 */  vecZ_rule,
  /* 1229 */  vecZ_rule,
  /* 1230 */  vecD_rule,
  /* 1231 */  vecD_rule,
  /* 1232 */  vecD_rule,
  /* 1233 */  vecX_rule,
  /* 1234 */  vecX_rule,
  /* 1235 */  vecX_rule,
  /* 1236 */  vecY_rule,
  /* 1237 */  vecY_rule,
  /* 1238 */  vecZ_rule,
  /* 1239 */  vecZ_rule,
  /* 1240 */  vecX_rule,
  /* 1241 */  vecX_rule,
  /* 1242 */  vecX_rule,
  /* 1243 */  vecY_rule,
  /* 1244 */  vecY_rule,
  /* 1245 */  vecZ_rule,
  /* 1246 */  vecZ_rule,
  /* 1247 */  vecS_rule,
  /* 1248 */  vecS_rule,
  /* 1249 */  vecS_rule,
  /* 1250 */  vecS_rule,
  /* 1251 */  vecS_rule,
  /* 1252 */  vecS_rule,
  /* 1253 */  vecS_rule,
  /* 1254 */  vecD_rule,
  /* 1255 */  vecD_rule,
  /* 1256 */  vecD_rule,
  /* 1257 */  vecD_rule,
  /* 1258 */  vecD_rule,
  /* 1259 */  vecD_rule,
  /* 1260 */  vecD_rule,
  /* 1261 */  vecX_rule,
  /* 1262 */  vecX_rule,
  /* 1263 */  vecX_rule,
  /* 1264 */  vecX_rule,
  /* 1265 */  vecX_rule,
  /* 1266 */  vecX_rule,
  /* 1267 */  vecX_rule,
  /* 1268 */  vecY_rule,
  /* 1269 */  vecY_rule,
  /* 1270 */  vecY_rule,
  /* 1271 */  vecY_rule,
  /* 1272 */  vecY_rule,
  /* 1273 */  vecY_rule,
  /* 1274 */  vecZ_rule,
  /* 1275 */  vecZ_rule,
  /* 1276 */  vecS_rule,
  /* 1277 */  vecS_rule,
  /* 1278 */  vecS_rule,
  /* 1279 */  vecS_rule,
  /* 1280 */  vecS_rule,
  /* 1281 */  vecS_rule,
  /* 1282 */  vecS_rule,
  /* 1283 */  vecD_rule,
  /* 1284 */  vecD_rule,
  /* 1285 */  vecD_rule,
  /* 1286 */  vecD_rule,
  /* 1287 */  vecD_rule,
  /* 1288 */  vecD_rule,
  /* 1289 */  vecD_rule,
  /* 1290 */  vecX_rule,
  /* 1291 */  vecX_rule,
  /* 1292 */  vecX_rule,
  /* 1293 */  vecX_rule,
  /* 1294 */  vecX_rule,
  /* 1295 */  vecX_rule,
  /* 1296 */  vecX_rule,
  /* 1297 */  vecY_rule,
  /* 1298 */  vecY_rule,
  /* 1299 */  vecY_rule,
  /* 1300 */  vecY_rule,
  /* 1301 */  vecY_rule,
  /* 1302 */  vecY_rule,
  /* 1303 */  vecZ_rule,
  /* 1304 */  vecZ_rule,
  /* 1305 */  vecD_rule,
  /* 1306 */  vecD_rule,
  /* 1307 */  vecD_rule,
  /* 1308 */  vecX_rule,
  /* 1309 */  vecX_rule,
  /* 1310 */  vecX_rule,
  /* 1311 */  vecY_rule,
  /* 1312 */  vecY_rule,
  /* 1313 */  vecZ_rule,
  /* 1314 */  vecZ_rule,
  /* 1315 */  vecX_rule,
  /* 1316 */  vecX_rule,
  /* 1317 */  vecX_rule,
  /* 1318 */  vecY_rule,
  /* 1319 */  vecY_rule,
  /* 1320 */  vecZ_rule,
  /* 1321 */  vecZ_rule,
  /* 1322 */  vecD_rule,
  /* 1323 */  vecD_rule,
  /* 1324 */  vecD_rule,
  /* 1325 */  vecX_rule,
  /* 1326 */  vecX_rule,
  /* 1327 */  vecX_rule,
  /* 1328 */  vecY_rule,
  /* 1329 */  vecY_rule,
  /* 1330 */  vecZ_rule,
  /* 1331 */  vecZ_rule,
  /* 1332 */  vecX_rule,
  /* 1333 */  vecX_rule,
  /* 1334 */  vecX_rule,
  /* 1335 */  vecY_rule,
  /* 1336 */  vecY_rule,
  /* 1337 */  vecZ_rule,
  /* 1338 */  vecZ_rule,
  /* 1339 */  vecS_rule,
  /* 1340 */  vecS_rule,
  /* 1341 */  vecS_rule,
  /* 1342 */  vecS_rule,
  /* 1343 */  vecS_rule,
  /* 1344 */  vecS_rule,
  /* 1345 */  vecS_rule,
  /* 1346 */  vecD_rule,
  /* 1347 */  vecD_rule,
  /* 1348 */  vecD_rule,
  /* 1349 */  vecD_rule,
  /* 1350 */  vecD_rule,
  /* 1351 */  vecD_rule,
  /* 1352 */  vecD_rule,
  /* 1353 */  vecX_rule,
  /* 1354 */  vecX_rule,
  /* 1355 */  vecX_rule,
  /* 1356 */  vecX_rule,
  /* 1357 */  vecX_rule,
  /* 1358 */  vecX_rule,
  /* 1359 */  vecX_rule,
  /* 1360 */  vecY_rule,
  /* 1361 */  vecY_rule,
  /* 1362 */  vecY_rule,
  /* 1363 */  vecY_rule,
  /* 1364 */  vecY_rule,
  /* 1365 */  vecY_rule,
  /* 1366 */  vecZ_rule,
  /* 1367 */  vecZ_rule,
  /* 1368 */  vecD_rule,
  /* 1369 */  vecD_rule,
  /* 1370 */  vecD_rule,
  /* 1371 */  vecX_rule,
  /* 1372 */  vecX_rule,
  /* 1373 */  vecX_rule,
  /* 1374 */  vecX_rule,
  /* 1375 */  vecX_rule,
  /* 1376 */  vecY_rule,
  /* 1377 */  vecY_rule,
  /* 1378 */  vecZ_rule,
  /* 1379 */  vecZ_rule,
  /* 1380 */  vecY_rule,
  /* 1381 */  vecY_rule,
  /* 1382 */  vecZ_rule,
  /* 1383 */  vecZ_rule,
  /* 1384 */  vecD_rule,
  /* 1385 */  vecD_rule,
  /* 1386 */  vecD_rule,
  /* 1387 */  vecX_rule,
  /* 1388 */  vecX_rule,
  /* 1389 */  vecX_rule,
  /* 1390 */  vecY_rule,
  /* 1391 */  vecY_rule,
  /* 1392 */  vecZ_rule,
  /* 1393 */  vecZ_rule,
  /* 1394 */  vecX_rule,
  /* 1395 */  vecX_rule,
  /* 1396 */  vecX_rule,
  /* 1397 */  vecY_rule,
  /* 1398 */  vecY_rule,
  /* 1399 */  vecZ_rule,
  /* 1400 */  vecZ_rule,
  /* 1401 */  vecY_rule,
  /* 1402 */  vecD_rule,
  /* 1403 */  vecD_rule,
  /* 1404 */  vecD_rule,
  /* 1405 */  vecX_rule,
  /* 1406 */  vecX_rule,
  /* 1407 */  vecX_rule,
  /* 1408 */  vecY_rule,
  /* 1409 */  vecY_rule,
  /* 1410 */  vecZ_rule,
  /* 1411 */  vecZ_rule,
  /* 1412 */  vecX_rule,
  /* 1413 */  vecX_rule,
  /* 1414 */  vecX_rule,
  /* 1415 */  vecY_rule,
  /* 1416 */  vecY_rule,
  /* 1417 */  vecZ_rule,
  /* 1418 */  vecZ_rule,
  /* 1419 */  vecS_rule,
  /* 1420 */  vecS_rule,
  /* 1421 */  vecS_rule,
  /* 1422 */  vecS_rule,
  /* 1423 */  vecS_rule,
  /* 1424 */  vecS_rule,
  /* 1425 */  vecS_rule,
  /* 1426 */  vecS_rule,
  /* 1427 */  vecD_rule,
  /* 1428 */  vecD_rule,
  /* 1429 */  vecD_rule,
  /* 1430 */  vecD_rule,
  /* 1431 */  vecD_rule,
  /* 1432 */  vecD_rule,
  /* 1433 */  vecD_rule,
  /* 1434 */  vecD_rule,
  /* 1435 */  vecX_rule,
  /* 1436 */  vecX_rule,
  /* 1437 */  vecX_rule,
  /* 1438 */  vecX_rule,
  /* 1439 */  vecX_rule,
  /* 1440 */  vecX_rule,
  /* 1441 */  vecX_rule,
  /* 1442 */  vecX_rule,
  /* 1443 */  vecY_rule,
  /* 1444 */  vecY_rule,
  /* 1445 */  vecY_rule,
  /* 1446 */  vecY_rule,
  /* 1447 */  vecY_rule,
  /* 1448 */  vecY_rule,
  /* 1449 */  vecZ_rule,
  /* 1450 */  vecZ_rule,
  /* 1451 */  vecD_rule,
  /* 1452 */  vecD_rule,
  /* 1453 */  vecD_rule,
  /* 1454 */  vecD_rule,
  /* 1455 */  vecX_rule,
  /* 1456 */  vecX_rule,
  /* 1457 */  vecX_rule,
  /* 1458 */  vecX_rule,
  /* 1459 */  vecY_rule,
  /* 1460 */  vecY_rule,
  /* 1461 */  vecZ_rule,
  /* 1462 */  vecZ_rule,
  /* 1463 */  vecX_rule,
  /* 1464 */  vecX_rule,
  /* 1465 */  vecX_rule,
  /* 1466 */  vecX_rule,
  /* 1467 */  vecY_rule,
  /* 1468 */  vecY_rule,
  /* 1469 */  vecZ_rule,
  /* 1470 */  vecZ_rule,
  /* 1471 */  vecS_rule,
  /* 1472 */  vecS_rule,
  /* 1473 */  vecS_rule,
  /* 1474 */  vecS_rule,
  /* 1475 */  vecS_rule,
  /* 1476 */  vecS_rule,
  /* 1477 */  vecS_rule,
  /* 1478 */  vecS_rule,
  /* 1479 */  vecD_rule,
  /* 1480 */  vecD_rule,
  /* 1481 */  vecD_rule,
  /* 1482 */  vecD_rule,
  /* 1483 */  vecD_rule,
  /* 1484 */  vecD_rule,
  /* 1485 */  vecD_rule,
  /* 1486 */  vecD_rule,
  /* 1487 */  vecX_rule,
  /* 1488 */  vecX_rule,
  /* 1489 */  vecX_rule,
  /* 1490 */  vecX_rule,
  /* 1491 */  vecX_rule,
  /* 1492 */  vecX_rule,
  /* 1493 */  vecX_rule,
  /* 1494 */  vecX_rule,
  /* 1495 */  vecY_rule,
  /* 1496 */  vecY_rule,
  /* 1497 */  vecY_rule,
  /* 1498 */  vecY_rule,
  /* 1499 */  vecY_rule,
  /* 1500 */  vecY_rule,
  /* 1501 */  vecZ_rule,
  /* 1502 */  vecZ_rule,
  /* 1503 */  vecD_rule,
  /* 1504 */  vecD_rule,
  /* 1505 */  vecD_rule,
  /* 1506 */  vecD_rule,
  /* 1507 */  vecX_rule,
  /* 1508 */  vecX_rule,
  /* 1509 */  vecX_rule,
  /* 1510 */  vecX_rule,
  /* 1511 */  vecY_rule,
  /* 1512 */  vecY_rule,
  /* 1513 */  vecZ_rule,
  /* 1514 */  vecZ_rule,
  /* 1515 */  vecX_rule,
  /* 1516 */  vecX_rule,
  /* 1517 */  vecX_rule,
  /* 1518 */  vecX_rule,
  /* 1519 */  vecY_rule,
  /* 1520 */  vecY_rule,
  /* 1521 */  vecZ_rule,
  /* 1522 */  vecZ_rule,
  /* 1523 */  vecS_rule,
  /* 1524 */  vecS_rule,
  /* 1525 */  vecS_rule,
  /* 1526 */  vecS_rule,
  /* 1527 */  vecS_rule,
  /* 1528 */  vecS_rule,
  /* 1529 */  vecS_rule,
  /* 1530 */  vecS_rule,
  /* 1531 */  vecD_rule,
  /* 1532 */  vecD_rule,
  /* 1533 */  vecD_rule,
  /* 1534 */  vecD_rule,
  /* 1535 */  vecD_rule,
  /* 1536 */  vecD_rule,
  /* 1537 */  vecD_rule,
  /* 1538 */  vecD_rule,
  /* 1539 */  vecX_rule,
  /* 1540 */  vecX_rule,
  /* 1541 */  vecX_rule,
  /* 1542 */  vecX_rule,
  /* 1543 */  vecX_rule,
  /* 1544 */  vecX_rule,
  /* 1545 */  vecX_rule,
  /* 1546 */  vecX_rule,
  /* 1547 */  vecY_rule,
  /* 1548 */  vecY_rule,
  /* 1549 */  vecY_rule,
  /* 1550 */  vecY_rule,
  /* 1551 */  vecY_rule,
  /* 1552 */  vecY_rule,
  /* 1553 */  vecZ_rule,
  /* 1554 */  vecZ_rule,
  /* 1555 */  vecD_rule,
  /* 1556 */  vecD_rule,
  /* 1557 */  vecD_rule,
  /* 1558 */  vecD_rule,
  /* 1559 */  vecX_rule,
  /* 1560 */  vecX_rule,
  /* 1561 */  vecX_rule,
  /* 1562 */  vecX_rule,
  /* 1563 */  vecY_rule,
  /* 1564 */  vecY_rule,
  /* 1565 */  vecZ_rule,
  /* 1566 */  vecZ_rule,
  /* 1567 */  vecS_rule,
  /* 1568 */  vecS_rule,
  /* 1569 */  vecS_rule,
  /* 1570 */  vecD_rule,
  /* 1571 */  vecD_rule,
  /* 1572 */  vecD_rule,
  /* 1573 */  vecX_rule,
  /* 1574 */  vecX_rule,
  /* 1575 */  vecX_rule,
  /* 1576 */  vecY_rule,
  /* 1577 */  vecY_rule,
  /* 1578 */  vecZ_rule,
  /* 1579 */  vecZ_rule,
  /* 1580 */  vecS_rule,
  /* 1581 */  vecS_rule,
  /* 1582 */  vecS_rule,
  /* 1583 */  vecD_rule,
  /* 1584 */  vecD_rule,
  /* 1585 */  vecD_rule,
  /* 1586 */  vecX_rule,
  /* 1587 */  vecX_rule,
  /* 1588 */  vecX_rule,
  /* 1589 */  vecY_rule,
  /* 1590 */  vecY_rule,
  /* 1591 */  vecZ_rule,
  /* 1592 */  vecZ_rule,
  /* 1593 */  vecS_rule,
  /* 1594 */  vecS_rule,
  /* 1595 */  vecS_rule,
  /* 1596 */  vecD_rule,
  /* 1597 */  vecD_rule,
  /* 1598 */  vecD_rule,
  /* 1599 */  vecX_rule,
  /* 1600 */  vecX_rule,
  /* 1601 */  vecX_rule,
  /* 1602 */  vecY_rule,
  /* 1603 */  vecY_rule,
  /* 1604 */  vecZ_rule,
  /* 1605 */  vecZ_rule,
  // last instruction
  0 // no trailing comma
};

const        int   leftOp[] = {
  /*    0 */  0,
  /*    1 */  0,
  /*    2 */  0,
  /*    3 */  0,
  /*    4 */  0,
  /*    5 */  0,
  /*    6 */  0,
  /*    7 */  0,
  /*    8 */  0,
  /*    9 */  0,
  /*   10 */  0,
  /*   11 */  0,
  /*   12 */  0,
  /*   13 */  0,
  /*   14 */  0,
  /*   15 */  0,
  /*   16 */  0,
  /*   17 */  0,
  /*   18 */  0,
  /*   19 */  0,
  /*   20 */  0,
  /*   21 */  0,
  /*   22 */  0,
  /*   23 */  0,
  /*   24 */  0,
  /*   25 */  0,
  /*   26 */  0,
  /*   27 */  0,
  /*   28 */  0,
  /*   29 */  0,
  /*   30 */  0,
  /*   31 */  0,
  /*   32 */  0,
  /*   33 */  0,
  /*   34 */  0,
  /*   35 */  0,
  /*   36 */  0,
  /*   37 */  0,
  /*   38 */  0,
  /*   39 */  0,
  /*   40 */  0,
  /*   41 */  0,
  /*   42 */  0,
  /*   43 */  0,
  /*   44 */  0,
  /*   45 */  0,
  /*   46 */  0,
  /*   47 */  0,
  /*   48 */  0,
  /*   49 */  0,
  /*   50 */  0,
  /*   51 */  0,
  /*   52 */  0,
  /*   53 */  0,
  /*   54 */  0,
  /*   55 */  0,
  /*   56 */  0,
  /*   57 */  0,
  /*   58 */  0,
  /*   59 */  0,
  /*   60 */  0,
  /*   61 */  0,
  /*   62 */  0,
  /*   63 */  0,
  /*   64 */  0,
  /*   65 */  0,
  /*   66 */  0,
  /*   67 */  0,
  /*   68 */  0,
  /*   69 */  0,
  /*   70 */  0,
  /*   71 */  0,
  /*   72 */  0,
  /*   73 */  0,
  /*   74 */  0,
  /*   75 */  0,
  /*   76 */  0,
  /*   77 */  0,
  /*   78 */  0,
  /*   79 */  0,
  /*   80 */  0,
  /*   81 */  any_RegP_rule,
  /*   82 */  any_RegP_rule,
  /*   83 */  _AddP_any_RegP_rRegL_rule,
  /*   84 */  any_RegP_rule,
  /*   85 */  any_RegP_rule,
  /*   86 */  any_RegP_rule,
  /*   87 */  _AddP_any_RegP__LShiftL_rRegL_immI2_rule,
  /*   88 */  _AddP_any_RegP__ConvI2L_rRegI__rule,
  /*   89 */  _AddP_any_RegP__LShiftL__ConvI2L_rRegI__immI2_rule,
  /*   90 */  _DecodeN_rRegN__rule,
  /*   91 */  rRegN_rule,
  /*   92 */  _DecodeN_rRegN__rule,
  /*   93 */  _DecodeN_rRegN__rule,
  /*   94 */  _AddP__DecodeN_rRegN__rRegL_rule,
  /*   95 */  _DecodeN_rRegN__rule,
  /*   96 */  _DecodeN_rRegN__rule,
  /*   97 */  _AddP__DecodeN_rRegN___LShiftL_rRegL_immI2_rule,
  /*   98 */  _AddP__DecodeN_rRegN___ConvI2L_rRegI__rule,
  /*   99 */  _AddP__DecodeN_rRegN___LShiftL__ConvI2L_rRegI__immI2_rule,
  /*  100 */  0,
  /*  101 */  0,
  /*  102 */  0,
  /*  103 */  0,
  /*  104 */  0,
  /*  105 */  0,
  /*  106 */  0,
  /*  107 */  0,
  /*  108 */  0,
  /*  109 */  0,
  /*  110 */  0,
  // last operand
  /*  111 */  0,
  // last operand class
  /*  112 */  any_RegP_rule,
  /*  113 */  rRegL_rule,
  /*  114 */  rRegI_rule,
  /*  115 */  _ConvI2L_rRegI__rule,
  /*  116 */  any_RegP_rule,
  /*  117 */  any_RegP_rule,
  /*  118 */  any_RegP_rule,
  /*  119 */  rRegN_rule,
  /*  120 */  _DecodeN_rRegN__rule,
  /*  121 */  _DecodeN_rRegN__rule,
  /*  122 */  _DecodeN_rRegN__rule,
  /*  123 */  _DecodeN_rRegN__rule,
  /*  124 */  memory_rule,
  /*  125 */  memory_rule,
  /*  126 */  _LoadUB_memory__rule,
  /*  127 */  memory_rule,
  /*  128 */  _LoadS_memory__rule,
  /*  129 */  memory_rule,
  /*  130 */  _LoadUS_memory__rule,
  /*  131 */  _LoadUS_memory__rule,
  /*  132 */  _LoadUS_memory__rule,
  /*  133 */  memory_rule,
  /*  134 */  _LoadI_memory__rule,
  /*  135 */  _LoadI_memory__rule,
  /*  136 */  _LoadI_memory__rule,
  /*  137 */  _LoadI_memory__rule,
  /*  138 */  _LoadI_memory__rule,
  /*  139 */  _LoadI_memory__rule,
  /*  140 */  memory_rule,
  /*  141 */  rRegP_rule,
  /*  142 */  _DecodeN_rRegN__rule,
  /*  143 */  _LShiftL_rRegL_immI2_rule,
  /*  144 */  cmpOp_rule,
  /*  145 */  rRegI_rule,
  /*  146 */  cmpOpU_rule,
  /*  147 */  cmpOpUCF_rule,
  /*  148 */  rRegI_rule,
  /*  149 */  rRegN_rule,
  /*  150 */  rRegP_rule,
  /*  151 */  rRegL_rule,
  /*  152 */  rRegL_rule,
  /*  153 */  regF_rule,
  /*  154 */  regD_rule,
  /*  155 */  _LoadI_memory__rule,
  /*  156 */  rRegI_rule,
  /*  157 */  _LoadI_memory__rule,
  /*  158 */  _LoadI_memory__rule,
  /*  159 */  _LoadI_memory__rule,
  /*  160 */  _LoadL_memory__rule,
  /*  161 */  rRegL_rule,
  /*  162 */  _LoadL_memory__rule,
  /*  163 */  _LoadL_memory__rule,
  /*  164 */  _LoadL_memory__rule,
  /*  165 */  rax_RegP_rule,
  /*  166 */  rax_RegI_rule,
  /*  167 */  rax_RegL_rule,
  /*  168 */  rax_RegN_rule,
  /*  169 */  _LoadI_memory__rule,
  /*  170 */  _LoadI_memory__rule,
  /*  171 */  _LoadL_memory__rule,
  /*  172 */  _LoadL_memory__rule,
  /*  173 */  immI0_rule,
  /*  174 */  immI0_rule,
  /*  175 */  immL0_rule,
  /*  176 */  _LoadI_memory__rule,
  /*  177 */  _LoadI_memory__rule,
  /*  178 */  _LoadI_memory__rule,
  /*  179 */  _LoadI_memory__rule,
  /*  180 */  _LoadI_memory__rule,
  /*  181 */  _LoadI_memory__rule,
  /*  182 */  _LoadI_memory__rule,
  /*  183 */  _LoadI_memory__rule,
  /*  184 */  _LoadI_memory__rule,
  /*  185 */  _LoadL_memory__rule,
  /*  186 */  _LoadL_memory__rule,
  /*  187 */  _LoadL_memory__rule,
  /*  188 */  _LoadL_memory__rule,
  /*  189 */  _LoadL_memory__rule,
  /*  190 */  _LoadL_memory__rule,
  /*  191 */  _LoadL_memory__rule,
  /*  192 */  _LoadL_memory__rule,
  /*  193 */  _LoadL_memory__rule,
  /*  194 */  rRegI_rule,
  /*  195 */  rRegI_rule,
  /*  196 */  rRegI_rule,
  /*  197 */  rRegI_rule,
  /*  198 */  rRegI_rule,
  /*  199 */  rRegI_rule,
  /*  200 */  no_rcx_RegI_rule,
  /*  201 */  immI0_rule,
  /*  202 */  no_rcx_RegI_rule,
  /*  203 */  immI_32_rule,
  /*  204 */  no_rcx_RegI_rule,
  /*  205 */  rRegI_rule,
  /*  206 */  rRegI_rule,
  /*  207 */  no_rcx_RegI_rule,
  /*  208 */  no_rcx_RegI_rule,
  /*  209 */  no_rcx_RegI_rule,
  /*  210 */  rRegL_rule,
  /*  211 */  rRegL_rule,
  /*  212 */  rRegL_rule,
  /*  213 */  rRegL_rule,
  /*  214 */  no_rcx_RegL_rule,
  /*  215 */  no_rcx_RegL_rule,
  /*  216 */  immI_64_rule,
  /*  217 */  no_rcx_RegL_rule,
  /*  218 */  rRegL_rule,
  /*  219 */  rRegL_rule,
  /*  220 */  no_rcx_RegL_rule,
  /*  221 */  no_rcx_RegL_rule,
  /*  222 */  no_rcx_RegL_rule,
  /*  223 */  rRegI_rule,
  /*  224 */  rRegI_rule,
  /*  225 */  _LoadI_memory__rule,
  /*  226 */  rRegI_rule,
  /*  227 */  _LoadI_memory__rule,
  /*  228 */  rRegI_rule,
  /*  229 */  rRegI_rule,
  /*  230 */  _LoadI_memory__rule,
  /*  231 */  rRegI_rule,
  /*  232 */  _LoadI_memory__rule,
  /*  233 */  _LoadI_memory__rule,
  /*  234 */  rRegI_rule,
  /*  235 */  _LoadI_memory__rule,
  /*  236 */  _LoadL_memory__rule,
  /*  237 */  rRegL_rule,
  /*  238 */  _LoadL_memory__rule,
  /*  239 */  rRegL_rule,
  /*  240 */  immL0_rule,
  /*  241 */  rRegL_rule,
  /*  242 */  any_RegP_rule,
  /*  243 */  _LoadL_memory__rule,
  /*  244 */  rRegL_rule,
  /*  245 */  _LoadL_memory__rule,
  /*  246 */  _LoadL_memory__rule,
  /*  247 */  rRegL_rule,
  /*  248 */  _LoadL_memory__rule,
  /*  249 */  rRegI_rule,
  /*  250 */  _CmpLTMask_rRegI_rRegI_rule,
  /*  251 */  rRegI_rule,
  /*  252 */  rRegI_rule,
  /*  253 */  memory_rule,
  /*  254 */  memory_rule,
  /*  255 */  rdi_RegP_rule,
  /*  256 */  rsi_RegP_rule,
  /*  257 */  rdi_RegP_rule,
  /*  258 */  rsi_RegP_rule,
  /*  259 */  rsi_RegP_rule,
  /*  260 */  rdi_RegP_rule,
  /*  261 */  rRegI_rule,
  /*  262 */  memory_rule,
  /*  263 */  memory_rule,
  /*  264 */  memory_rule,
  /*  265 */  rRegL_rule,
  /*  266 */  rsi_RegP_rule,
  /*  267 */  regF_rule,
  /*  268 */  _ConvF2D_regF__rule,
  /*  269 */  _LoadF_memory__rule,
  /*  270 */  _ConvF2D__LoadF_memory___rule,
  /*  271 */  immF_rule,
  /*  272 */  _ConvF2D_immF__rule,
  /*  273 */  memory_rule,
  /*  274 */  cmpOp_vcmppd_rule,
  /*  275 */  vecY_rule,
  // last internally defined operand
  /*  276 */  rRegI_rule,
  /*  277 */  rRegL_rule,
  /*  278 */  rRegP_rule,
  /*  279 */  regF_rule,
  /*  280 */  regD_rule,
  /*  281 */  indOffset8_rule,
  /*  282 */  indOffset32_rule,
  /*  283 */  indIndexOffset_rule,
  /*  284 */  indIndexScale_rule,
  /*  285 */  indPosIndexScale_rule,
  /*  286 */  indIndexScaleOffset_rule,
  /*  287 */  indPosIndexOffset_rule,
  /*  288 */  indPosIndexScaleOffset_rule,
  /*  289 */  indCompressedOopOffset_rule,
  /*  290 */  indOffset8Narrow_rule,
  /*  291 */  indOffset32Narrow_rule,
  /*  292 */  indIndexOffsetNarrow_rule,
  /*  293 */  indIndexScaleNarrow_rule,
  /*  294 */  indIndexScaleOffsetNarrow_rule,
  /*  295 */  indPosIndexOffsetNarrow_rule,
  /*  296 */  indPosIndexScaleOffsetNarrow_rule,
  /*  297 */  immI_rule,
  /*  298 */  immI0_rule,
  /*  299 */  immL_rule,
  /*  300 */  immL0_rule,
  /*  301 */  immUL32_rule,
  /*  302 */  immL32_rule,
  /*  303 */  immP_rule,
  /*  304 */  immP0_rule,
  /*  305 */  immP31_rule,
  /*  306 */  immF_rule,
  /*  307 */  immN0_rule,
  /*  308 */  immN_rule,
  /*  309 */  immNKlass_rule,
  /*  310 */  immF0_rule,
  /*  311 */  immD_rule,
  /*  312 */  immD0_rule,
  /*  313 */  stackSlotI_rule,
  /*  314 */  stackSlotL_rule,
  /*  315 */  stackSlotP_rule,
  /*  316 */  stackSlotF_rule,
  /*  317 */  stackSlotD_rule,
  /*  318 */  0,
  /*  319 */  rRegL_rule,
  /*  320 */  rRegP_rule,
  /*  321 */  rRegP_rule,
  /*  322 */  rRegP_rule,
  /*  323 */  rRegI_rule,
  /*  324 */  memory_rule,
  /*  325 */  memory_rule,
  /*  326 */  memory_rule,
  /*  327 */  regF_rule,
  /*  328 */  regF_rule,
  /*  329 */  regF_rule,
  /*  330 */  regF_rule,
  /*  331 */  regF_rule,
  /*  332 */  regF_rule,
  /*  333 */  regD_rule,
  /*  334 */  regD_rule,
  /*  335 */  regD_rule,
  /*  336 */  regD_rule,
  /*  337 */  regD_rule,
  /*  338 */  regD_rule,
  /*  339 */  regF_rule,
  /*  340 */  regD_rule,
  /*  341 */  stackSlotF_rule,
  /*  342 */  stackSlotI_rule,
  /*  343 */  stackSlotD_rule,
  /*  344 */  stackSlotL_rule,
  /*  345 */  stackSlotL_rule,
  /*  346 */  regF_rule,
  /*  347 */  regD_rule,
  /*  348 */  rRegI_rule,
  /*  349 */  rRegL_rule,
  /*  350 */  rax_RegI_rule,
  /*  351 */  rax_RegI_rule,
  /*  352 */  rax_RegL_rule,
  /*  353 */  rax_RegL_rule,
  /*  354 */  rRegI_rule,
  /*  355 */  rRegI_rule,
  /*  356 */  rRegL_rule,
  /*  357 */  rRegL_rule,
  /*  358 */  immI0_rule,
  /*  359 */  immL0_rule,
  /*  360 */  rax_RegI_rule,
  /*  361 */  rRegI_rule,
  /*  362 */  rax_RegL_rule,
  /*  363 */  rRegL_rule,
  /*  364 */  rRegI_rule,
  /*  365 */  rRegI_rule,
  /*  366 */  rRegI_rule,
  /*  367 */  rRegI_rule,
  /*  368 */  _AndI_rRegI_immI_rule,
  /*  369 */  _AndI_rRegI__LoadI_memory__rule,
  /*  370 */  _AndI__LoadI_memory__rRegI_rule,
  /*  371 */  rRegI_rule,
  /*  372 */  rRegI_rule,
  /*  373 */  rRegI_rule,
  /*  374 */  rRegI_rule,
  /*  375 */  rRegP_rule,
  /*  376 */  rRegP_rule,
  /*  377 */  rRegP_rule,
  /*  378 */  rRegP_rule,
  /*  379 */  _LoadP_memory__rule,
  /*  380 */  _LoadP_memory__rule,
  /*  381 */  rRegN_rule,
  /*  382 */  rRegN_rule,
  /*  383 */  rRegN_rule,
  /*  384 */  immN_rule,
  /*  385 */  rRegN_rule,
  /*  386 */  immNKlass_rule,
  /*  387 */  rRegN_rule,
  /*  388 */  _LoadN_memory__rule,
  /*  389 */  _LoadN_memory__rule,
  /*  390 */  rRegL_rule,
  /*  391 */  rRegL_rule,
  /*  392 */  rRegL_rule,
  /*  393 */  rRegL_rule,
  /*  394 */  _AndL_rRegL_immL32_rule,
  /*  395 */  _AndL_rRegL__LoadL_memory__rule,
  /*  396 */  _AndL__LoadL_memory__rRegL_rule,
  /*  397 */  rRegL_rule,
  /*  398 */  rRegL_rule,
  /*  399 */  rRegL_rule,
  /*  400 */  rRegL_rule,
  /*  401 */  _PartialSubtypeCheck_rsi_RegP_rax_RegP_rule,
  /*  402 */  rRegP_rule,
  /*  403 */  rRegP_rule,
  /*  404 */  rRegP_rule,
  /*  405 */  0,
  /*  406 */  0,
  /*  407 */  regF_rule,
  /*  408 */  regF_rule,
  /*  409 */  regF_rule,
  /*  410 */  regD_rule,
  /*  411 */  regD_rule,
  /*  412 */  regD_rule,
  /*  413 */  regF_rule,
  /*  414 */  regF_rule,
  /*  415 */  regD_rule,
  /*  416 */  regD_rule,
  /*  417 */  rRegI_rule,
  /*  418 */  rRegI_rule,
  /*  419 */  vecX_rule,
  /*  420 */  _LoadVector_memory__rule,
  /*  421 */  vecY_rule,
  /*  422 */  _LoadVector_memory__rule,
  /*  423 */  vecZ_rule,
  /*  424 */  _LoadVector_memory__rule,
  /*  425 */  memory_rule,
  /*  426 */  _LoadB_memory__rule,
  /*  427 */  memory_rule,
  /*  428 */  _LoadUB_memory__rule,
  /*  429 */  _AndI__LoadUB_memory__immI_rule,
  /*  430 */  memory_rule,
  /*  431 */  _LShiftI__LoadS_memory__immI_24_rule,
  /*  432 */  _LoadS_memory__rule,
  /*  433 */  memory_rule,
  /*  434 */  _LShiftI__LoadUS_memory__immI_24_rule,
  /*  435 */  _LoadUS_memory__rule,
  /*  436 */  _AndI__LoadUS_memory__immI_255_rule,
  /*  437 */  _AndI__LoadUS_memory__immI_rule,
  /*  438 */  memory_rule,
  /*  439 */  _LShiftI__LoadI_memory__immI_24_rule,
  /*  440 */  _LoadI_memory__rule,
  /*  441 */  _LShiftI__LoadI_memory__immI_16_rule,
  /*  442 */  _LoadI_memory__rule,
  /*  443 */  _LoadI_memory__rule,
  /*  444 */  _AndI__LoadI_memory__immI_255_rule,
  /*  445 */  _AndI__LoadI_memory__immI_65535_rule,
  /*  446 */  _AndI__LoadI_memory__immU31_rule,
  /*  447 */  _ConvI2L__LoadI_memory___rule,
  /*  448 */  memory_rule,
  /*  449 */  memory_rule,
  /*  450 */  memory_rule,
  /*  451 */  memory_rule,
  /*  452 */  memory_rule,
  /*  453 */  memory_rule,
  /*  454 */  memory_rule,
  /*  455 */  memory_rule,
  /*  456 */  memory_rule,
  /*  457 */  memory_rule,
  /*  458 */  memory_rule,
  /*  459 */  memory_rule,
  /*  460 */  memory_rule,
  /*  461 */  memory_rule,
  /*  462 */  memory_rule,
  /*  463 */  memory_rule,
  /*  464 */  memory_rule,
  /*  465 */  memory_rule,
  /*  466 */  memory_rule,
  /*  467 */  memory_rule,
  /*  468 */  memory_rule,
  /*  469 */  memory_rule,
  /*  470 */  memory_rule,
  /*  471 */  memory_rule,
  /*  472 */  memory_rule,
  /*  473 */  memory_rule,
  /*  474 */  memory_rule,
  /*  475 */  memory_rule,
  /*  476 */  memory_rule,
  /*  477 */  memory_rule,
  /*  478 */  memory_rule,
  /*  479 */  memory_rule,
  /*  480 */  memory_rule,
  /*  481 */  memory_rule,
  /*  482 */  memory_rule,
  /*  483 */  memory_rule,
  /*  484 */  memory_rule,
  /*  485 */  memory_rule,
  /*  486 */  memory_rule,
  /*  487 */  memory_rule,
  /*  488 */  memory_rule,
  /*  489 */  rRegI_rule,
  /*  490 */  rRegL_rule,
  /*  491 */  rRegI_rule,
  /*  492 */  rRegI_rule,
  /*  493 */  rRegI_rule,
  /*  494 */  rRegI_rule,
  /*  495 */  rRegL_rule,
  /*  496 */  rRegL_rule,
  /*  497 */  rRegI_rule,
  /*  498 */  rRegI_rule,
  /*  499 */  rRegL_rule,
  /*  500 */  rRegL_rule,
  /*  501 */  rRegI_rule,
  /*  502 */  _LoadI_memory__rule,
  /*  503 */  rRegL_rule,
  /*  504 */  _LoadL_memory__rule,
  /*  505 */  0,
  /*  506 */  0,
  /*  507 */  0,
  /*  508 */  0,
  /*  509 */  0,
  /*  510 */  0,
  /*  511 */  0,
  /*  512 */  0,
  /*  513 */  _CastP2X_rRegP__rule,
  /*  514 */  _CastP2X__DecodeN_rRegN___rule,
  /*  515 */  rRegP_rule,
  /*  516 */  rRegP_rule,
  /*  517 */  rRegN_rule,
  /*  518 */  rRegN_rule,
  /*  519 */  rRegP_rule,
  /*  520 */  rRegN_rule,
  /*  521 */  _LShiftL_rRegL_immI2_rule,
  /*  522 */  _AddL__LShiftL_rRegL_immI2_immL32_rule,
  /*  523 */  rRegL_rule,
  /*  524 */  _Binary_cmpOp_rFlagsReg_rule,
  /*  525 */  _Binary_cmpOpU_rFlagsRegU_rule,
  /*  526 */  _Binary_cmpOpUCF_rFlagsRegUCF_rule,
  /*  527 */  _Binary_cmpOp_rFlagsReg_rule,
  /*  528 */  _Binary_cmpOpU_rFlagsRegU_rule,
  /*  529 */  _Binary_cmpOpUCF_rFlagsRegUCF_rule,
  /*  530 */  _Binary_cmpOp_rFlagsReg_rule,
  /*  531 */  _Binary_cmpOpU_rFlagsRegU_rule,
  /*  532 */  _Binary_cmpOpUCF_rFlagsRegUCF_rule,
  /*  533 */  _Binary_cmpOp_rFlagsReg_rule,
  /*  534 */  _Binary_cmpOpU_rFlagsRegU_rule,
  /*  535 */  _Binary_cmpOpUCF_rFlagsRegUCF_rule,
  /*  536 */  _Binary_cmpOp_rFlagsReg_rule,
  /*  537 */  _Binary_cmpOp_rFlagsReg_rule,
  /*  538 */  _Binary_cmpOpU_rFlagsRegU_rule,
  /*  539 */  _Binary_cmpOpUCF_rFlagsRegUCF_rule,
  /*  540 */  _Binary_cmpOpU_rFlagsRegU_rule,
  /*  541 */  _Binary_cmpOpUCF_rFlagsRegUCF_rule,
  /*  542 */  _Binary_cmpOp_rFlagsReg_rule,
  /*  543 */  _Binary_cmpOpU_rFlagsRegU_rule,
  /*  544 */  _Binary_cmpOpUCF_rFlagsRegUCF_rule,
  /*  545 */  _Binary_cmpOp_rFlagsReg_rule,
  /*  546 */  _Binary_cmpOpU_rFlagsRegU_rule,
  /*  547 */  _Binary_cmpOpUCF_rFlagsRegUCF_rule,
  /*  548 */  rRegI_rule,
  /*  549 */  rRegI_rule,
  /*  550 */  rRegI_rule,
  /*  551 */  _LoadI_memory__rule,
  /*  552 */  memory_rule,
  /*  553 */  memory_rule,
  /*  554 */  memory_rule,
  /*  555 */  rRegI_rule,
  /*  556 */  memory_rule,
  /*  557 */  rRegI_rule,
  /*  558 */  memory_rule,
  /*  559 */  rRegI_rule,
  /*  560 */  rRegL_rule,
  /*  561 */  rRegL_rule,
  /*  562 */  rRegL_rule,
  /*  563 */  _LoadL_memory__rule,
  /*  564 */  memory_rule,
  /*  565 */  memory_rule,
  /*  566 */  memory_rule,
  /*  567 */  rRegI_rule,
  /*  568 */  memory_rule,
  /*  569 */  rRegL_rule,
  /*  570 */  memory_rule,
  /*  571 */  rRegL_rule,
  /*  572 */  rRegP_rule,
  /*  573 */  rRegP_rule,
  /*  574 */  rRegP_rule,
  /*  575 */  memory_rule,
  /*  576 */  memory_rule,
  /*  577 */  memory_rule,
  /*  578 */  memory_rule,
  /*  579 */  memory_rule,
  /*  580 */  memory_rule,
  /*  581 */  memory_rule,
  /*  582 */  memory_rule,
  /*  583 */  memory_rule,
  /*  584 */  memory_rule,
  /*  585 */  memory_rule,
  /*  586 */  memory_rule,
  /*  587 */  memory_rule,
  /*  588 */  memory_rule,
  /*  589 */  memory_rule,
  /*  590 */  memory_rule,
  /*  591 */  memory_rule,
  /*  592 */  memory_rule,
  /*  593 */  memory_rule,
  /*  594 */  memory_rule,
  /*  595 */  memory_rule,
  /*  596 */  memory_rule,
  /*  597 */  memory_rule,
  /*  598 */  memory_rule,
  /*  599 */  memory_rule,
  /*  600 */  memory_rule,
  /*  601 */  memory_rule,
  /*  602 */  memory_rule,
  /*  603 */  memory_rule,
  /*  604 */  memory_rule,
  /*  605 */  memory_rule,
  /*  606 */  memory_rule,
  /*  607 */  memory_rule,
  /*  608 */  rRegI_rule,
  /*  609 */  rRegI_rule,
  /*  610 */  rRegI_rule,
  /*  611 */  memory_rule,
  /*  612 */  memory_rule,
  /*  613 */  rRegL_rule,
  /*  614 */  rRegI_rule,
  /*  615 */  rRegL_rule,
  /*  616 */  memory_rule,
  /*  617 */  memory_rule,
  /*  618 */  rRegP_rule,
  /*  619 */  immI0_rule,
  /*  620 */  memory_rule,
  /*  621 */  immL0_rule,
  /*  622 */  memory_rule,
  /*  623 */  rRegI_rule,
  /*  624 */  rRegI_rule,
  /*  625 */  rRegI_rule,
  /*  626 */  _LoadI_memory__rule,
  /*  627 */  _LoadI_memory__rule,
  /*  628 */  rRegL_rule,
  /*  629 */  rRegL_rule,
  /*  630 */  rRegL_rule,
  /*  631 */  _LoadL_memory__rule,
  /*  632 */  _LoadL_memory__rule,
  /*  633 */  no_rax_RegL_rule,
  /*  634 */  rax_RegI_rule,
  /*  635 */  rax_RegL_rule,
  /*  636 */  rax_RegI_rule,
  /*  637 */  rax_RegL_rule,
  /*  638 */  0,
  /*  639 */  0,
  /*  640 */  0,
  /*  641 */  0,
  /*  642 */  no_rax_RegL_rule,
  /*  643 */  rax_RegI_rule,
  /*  644 */  rax_RegL_rule,
  /*  645 */  rRegI_rule,
  /*  646 */  memory_rule,
  /*  647 */  rRegI_rule,
  /*  648 */  memory_rule,
  /*  649 */  rRegI_rule,
  /*  650 */  memory_rule,
  /*  651 */  rRegI_rule,
  /*  652 */  memory_rule,
  /*  653 */  rRegI_rule,
  /*  654 */  memory_rule,
  /*  655 */  rRegI_rule,
  /*  656 */  memory_rule,
  /*  657 */  rRegI_rule,
  /*  658 */  memory_rule,
  /*  659 */  rRegI_rule,
  /*  660 */  memory_rule,
  /*  661 */  rRegI_rule,
  /*  662 */  memory_rule,
  /*  663 */  rRegL_rule,
  /*  664 */  memory_rule,
  /*  665 */  rRegL_rule,
  /*  666 */  memory_rule,
  /*  667 */  rRegL_rule,
  /*  668 */  memory_rule,
  /*  669 */  rRegL_rule,
  /*  670 */  memory_rule,
  /*  671 */  rRegL_rule,
  /*  672 */  memory_rule,
  /*  673 */  rRegL_rule,
  /*  674 */  memory_rule,
  /*  675 */  rRegL_rule,
  /*  676 */  memory_rule,
  /*  677 */  rRegL_rule,
  /*  678 */  memory_rule,
  /*  679 */  rRegL_rule,
  /*  680 */  memory_rule,
  /*  681 */  _LShiftI_rRegI_immI_24_rule,
  /*  682 */  _LShiftI_rRegI_immI_16_rule,
  /*  683 */  0,
  /*  684 */  0,
  /*  685 */  0,
  /*  686 */  _LShiftI_rRegI_immI1_rule,
  /*  687 */  _URShiftI_rRegI_immI_M1_rule,
  /*  688 */  _LShiftI_rRegI_immI8_rule,
  /*  689 */  _URShiftI_rRegI_immI8_rule,
  /*  690 */  _LShiftI_no_rcx_RegI_rcx_RegI_rule,
  /*  691 */  _URShiftI_no_rcx_RegI__SubI_immI0_rcx_RegI_rule,
  /*  692 */  _LShiftI_no_rcx_RegI_rcx_RegI_rule,
  /*  693 */  _URShiftI_no_rcx_RegI__SubI_immI_32_rcx_RegI_rule,
  /*  694 */  0,
  /*  695 */  0,
  /*  696 */  0,
  /*  697 */  _URShiftI_rRegI_immI1_rule,
  /*  698 */  _LShiftI_rRegI_immI_M1_rule,
  /*  699 */  _URShiftI_rRegI_immI8_rule,
  /*  700 */  _LShiftI_rRegI_immI8_rule,
  /*  701 */  _URShiftI_no_rcx_RegI_rcx_RegI_rule,
  /*  702 */  _LShiftI_no_rcx_RegI__SubI_immI0_rcx_RegI_rule,
  /*  703 */  _URShiftI_no_rcx_RegI_rcx_RegI_rule,
  /*  704 */  _LShiftI_no_rcx_RegI__SubI_immI_32_rcx_RegI_rule,
  /*  705 */  0,
  /*  706 */  0,
  /*  707 */  0,
  /*  708 */  _LShiftL_rRegL_immI1_rule,
  /*  709 */  _URShiftL_rRegL_immI_M1_rule,
  /*  710 */  _LShiftL_rRegL_immI8_rule,
  /*  711 */  _URShiftL_rRegL_immI8_rule,
  /*  712 */  _LShiftL_no_rcx_RegL_rcx_RegI_rule,
  /*  713 */  _URShiftL_no_rcx_RegL__SubI_immI0_rcx_RegI_rule,
  /*  714 */  _LShiftL_no_rcx_RegL_rcx_RegI_rule,
  /*  715 */  _URShiftL_no_rcx_RegL__SubI_immI_64_rcx_RegI_rule,
  /*  716 */  0,
  /*  717 */  0,
  /*  718 */  0,
  /*  719 */  _URShiftL_rRegL_immI1_rule,
  /*  720 */  _LShiftL_rRegL_immI_M1_rule,
  /*  721 */  _URShiftL_rRegL_immI8_rule,
  /*  722 */  _LShiftL_rRegL_immI8_rule,
  /*  723 */  _URShiftL_no_rcx_RegL_rcx_RegI_rule,
  /*  724 */  _LShiftL_no_rcx_RegL__SubI_immI0_rcx_RegI_rule,
  /*  725 */  _URShiftL_no_rcx_RegL_rcx_RegI_rule,
  /*  726 */  _LShiftL_no_rcx_RegL__SubI_immI_64_rcx_RegI_rule,
  /*  727 */  rRegI_rule,
  /*  728 */  rRegI_rule,
  /*  729 */  _AndI_rRegI_immI_255_rule,
  /*  730 */  rRegI_rule,
  /*  731 */  _AndI_rRegI_immI_65535_rule,
  /*  732 */  rRegI_rule,
  /*  733 */  rRegI_rule,
  /*  734 */  _LoadI_memory__rule,
  /*  735 */  memory_rule,
  /*  736 */  memory_rule,
  /*  737 */  memory_rule,
  /*  738 */  _XorI_rRegI_immI_M1_rule,
  /*  739 */  _LoadI_memory__rule,
  /*  740 */  _XorI_rRegI_immI_M1_rule,
  /*  741 */  rRegI_rule,
  /*  742 */  _SubI_immI0_rRegI_rule,
  /*  743 */  rRegI_rule,
  /*  744 */  _SubI_immI0__LoadI_memory__rule,
  /*  745 */  _LoadI_memory__rule,
  /*  746 */  _AddI__LoadI_memory__immI_M1_rule,
  /*  747 */  _LoadI_memory__rule,
  /*  748 */  _AddI_rRegI_immI_M1_rule,
  /*  749 */  rRegI_rule,
  /*  750 */  _AddI_rRegI_immI_M1_rule,
  /*  751 */  rRegI_rule,
  /*  752 */  _AddI__LoadI_memory__immI_M1_rule,
  /*  753 */  _LoadI_memory__rule,
  /*  754 */  rRegI_rule,
  /*  755 */  rRegI_rule,
  /*  756 */  rRegI_rule,
  /*  757 */  _LoadI_memory__rule,
  /*  758 */  memory_rule,
  /*  759 */  memory_rule,
  /*  760 */  memory_rule,
  /*  761 */  rRegI_rule,
  /*  762 */  rRegI_rule,
  /*  763 */  rRegI_rule,
  /*  764 */  rRegI_rule,
  /*  765 */  _LoadI_memory__rule,
  /*  766 */  memory_rule,
  /*  767 */  memory_rule,
  /*  768 */  memory_rule,
  /*  769 */  rRegL_rule,
  /*  770 */  rRegL_rule,
  /*  771 */  rRegL_rule,
  /*  772 */  rRegL_rule,
  /*  773 */  rRegL_rule,
  /*  774 */  _LoadL_memory__rule,
  /*  775 */  memory_rule,
  /*  776 */  memory_rule,
  /*  777 */  memory_rule,
  /*  778 */  _XorL_rRegL_immL_M1_rule,
  /*  779 */  _LoadL_memory__rule,
  /*  780 */  _XorL_rRegL_immL_M1_rule,
  /*  781 */  rRegL_rule,
  /*  782 */  _SubL_immL0_rRegL_rule,
  /*  783 */  rRegL_rule,
  /*  784 */  _SubL_immL0__LoadL_memory__rule,
  /*  785 */  _LoadL_memory__rule,
  /*  786 */  _AddL__LoadL_memory__immL_M1_rule,
  /*  787 */  _LoadL_memory__rule,
  /*  788 */  _AddL_rRegL_immL_M1_rule,
  /*  789 */  rRegL_rule,
  /*  790 */  _AddL_rRegL_immL_M1_rule,
  /*  791 */  rRegL_rule,
  /*  792 */  _AddL__LoadL_memory__immL_M1_rule,
  /*  793 */  _LoadL_memory__rule,
  /*  794 */  rRegL_rule,
  /*  795 */  rRegL_rule,
  /*  796 */  _CastP2X_any_RegP__rule,
  /*  797 */  rRegL_rule,
  /*  798 */  rRegL_rule,
  /*  799 */  _LoadL_memory__rule,
  /*  800 */  memory_rule,
  /*  801 */  memory_rule,
  /*  802 */  memory_rule,
  /*  803 */  rRegL_rule,
  /*  804 */  rRegL_rule,
  /*  805 */  rRegL_rule,
  /*  806 */  rRegL_rule,
  /*  807 */  _LoadL_memory__rule,
  /*  808 */  memory_rule,
  /*  809 */  memory_rule,
  /*  810 */  memory_rule,
  /*  811 */  rRegI_rule,
  /*  812 */  rRegP_rule,
  /*  813 */  rRegI_rule,
  /*  814 */  rRegI_rule,
  /*  815 */  _AndI__CmpLTMask_rRegI_rRegI_rRegI_rule,
  /*  816 */  _SubI_rRegI_rRegI_rule,
  /*  817 */  _AndI_rRegI__CmpLTMask_rRegI_rRegI_rule,
  /*  818 */  _SubI_rRegI_rRegI_rule,
  /*  819 */  _CmpLTMask_rRegI_rRegI_rule,
  /*  820 */  rRegI_rule,
  /*  821 */  regF_rule,
  /*  822 */  regF_rule,
  /*  823 */  regF_rule,
  /*  824 */  regD_rule,
  /*  825 */  regD_rule,
  /*  826 */  regD_rule,
  /*  827 */  regF_rule,
  /*  828 */  _LoadF_memory__rule,
  /*  829 */  regD_rule,
  /*  830 */  _LoadD_memory__rule,
  /*  831 */  regF_rule,
  /*  832 */  regF_rule,
  /*  833 */  regD_rule,
  /*  834 */  regD_rule,
  /*  835 */  rRegI_rule,
  /*  836 */  _LoadI_memory__rule,
  /*  837 */  rRegI_rule,
  /*  838 */  _LoadI_memory__rule,
  /*  839 */  rRegI_rule,
  /*  840 */  rRegI_rule,
  /*  841 */  rRegL_rule,
  /*  842 */  _LoadL_memory__rule,
  /*  843 */  rRegL_rule,
  /*  844 */  _LoadL_memory__rule,
  /*  845 */  rRegI_rule,
  /*  846 */  _ConvI2L_rRegI__rule,
  /*  847 */  _ConvI2L__LoadI_memory___rule,
  /*  848 */  rRegL_rule,
  /*  849 */  rRegL_rule,
  /*  850 */  regF_rule,
  /*  851 */  rRegI_rule,
  /*  852 */  regD_rule,
  /*  853 */  rRegL_rule,
  /*  854 */  rcx_RegL_rule,
  /*  855 */  rcx_RegL_rule,
  /*  856 */  _Binary_rdi_RegP_rcx_RegI_rule,
  /*  857 */  _Binary_rdi_RegP_rcx_RegI_rule,
  /*  858 */  _Binary_rdi_RegP_rcx_RegI_rule,
  /*  859 */  _Binary_rsi_RegP_rdx_RegI_rule,
  /*  860 */  _Binary_rdi_RegP_rdx_RegI_rule,
  /*  861 */  _Binary_rdi_RegP_rdx_RegI_rule,
  /*  862 */  _Binary_rdi_RegP_rdx_RegI_rule,
  /*  863 */  _Binary_rdi_RegP_rdx_RegI_rule,
  /*  864 */  _Binary_rdi_RegP_rdx_RegI_rule,
  /*  865 */  _Binary_rdi_RegP_rdx_RegI_rule,
  /*  866 */  _Binary_rdi_RegP_rdx_RegI_rule,
  /*  867 */  _Binary_rdi_RegP_rsi_RegP_rule,
  /*  868 */  rdi_RegP_rule,
  /*  869 */  rdi_RegP_rule,
  /*  870 */  rsi_RegP_rule,
  /*  871 */  rsi_RegP_rule,
  /*  872 */  rsi_RegP_rule,
  /*  873 */  rsi_RegP_rule,
  /*  874 */  rRegL_rule,
  /*  875 */  0,
  /*  876 */  rRegI_rule,
  /*  877 */  0,
  /*  878 */  rRegI_rule,
  /*  879 */  0,
  /*  880 */  cmpOp_rule,
  /*  881 */  cmpOp_rule,
  /*  882 */  cmpOpU_rule,
  /*  883 */  cmpOpUCF_rule,
  /*  884 */  cmpOp_rule,
  /*  885 */  cmpOpU_rule,
  /*  886 */  cmpOpUCF_rule,
  /*  887 */  cmpOpU_rule,
  /*  888 */  cmpOpUCF_rule,
  /*  889 */  cmpOpUCF2_rule,
  /*  890 */  rsi_RegP_rule,
  /*  891 */  0,
  /*  892 */  cmpOp_rule,
  /*  893 */  cmpOp_rule,
  /*  894 */  cmpOpU_rule,
  /*  895 */  cmpOpUCF_rule,
  /*  896 */  cmpOpU_rule,
  /*  897 */  cmpOpUCF_rule,
  /*  898 */  cmpOpUCF2_rule,
  /*  899 */  rRegP_rule,
  /*  900 */  0,
  /*  901 */  0,
  /*  902 */  0,
  /*  903 */  0,
  /*  904 */  0,
  /*  905 */  0,
  /*  906 */  no_rbp_RegP_rule,
  /*  907 */  no_rbp_RegP_rule,
  /*  908 */  0,
  /*  909 */  0,
  /*  910 */  0,
  /*  911 */  rRegI_rule,
  /*  912 */  regF_rule,
  /*  913 */  regF_rule,
  /*  914 */  _LoadF_memory__rule,
  /*  915 */  regF_rule,
  /*  916 */  regF_rule,
  /*  917 */  regF_rule,
  /*  918 */  _LoadF_memory__rule,
  /*  919 */  regF_rule,
  /*  920 */  regD_rule,
  /*  921 */  regD_rule,
  /*  922 */  _LoadD_memory__rule,
  /*  923 */  regD_rule,
  /*  924 */  regD_rule,
  /*  925 */  regD_rule,
  /*  926 */  _LoadD_memory__rule,
  /*  927 */  regD_rule,
  /*  928 */  regF_rule,
  /*  929 */  regF_rule,
  /*  930 */  regF_rule,
  /*  931 */  regF_rule,
  /*  932 */  regF_rule,
  /*  933 */  regF_rule,
  /*  934 */  regD_rule,
  /*  935 */  regD_rule,
  /*  936 */  regD_rule,
  /*  937 */  regD_rule,
  /*  938 */  regD_rule,
  /*  939 */  regD_rule,
  /*  940 */  regF_rule,
  /*  941 */  regF_rule,
  /*  942 */  _LoadF_memory__rule,
  /*  943 */  regF_rule,
  /*  944 */  regF_rule,
  /*  945 */  regF_rule,
  /*  946 */  _LoadF_memory__rule,
  /*  947 */  regF_rule,
  /*  948 */  regD_rule,
  /*  949 */  regD_rule,
  /*  950 */  _LoadD_memory__rule,
  /*  951 */  regD_rule,
  /*  952 */  regD_rule,
  /*  953 */  regD_rule,
  /*  954 */  _LoadD_memory__rule,
  /*  955 */  regD_rule,
  /*  956 */  regF_rule,
  /*  957 */  regF_rule,
  /*  958 */  regF_rule,
  /*  959 */  regF_rule,
  /*  960 */  regF_rule,
  /*  961 */  regF_rule,
  /*  962 */  regD_rule,
  /*  963 */  regD_rule,
  /*  964 */  regD_rule,
  /*  965 */  regD_rule,
  /*  966 */  regD_rule,
  /*  967 */  regD_rule,
  /*  968 */  regF_rule,
  /*  969 */  regD_rule,
  /*  970 */  _SqrtD__ConvF2D_regF___rule,
  /*  971 */  _SqrtD__ConvF2D__LoadF_memory____rule,
  /*  972 */  _SqrtD__ConvF2D_immF___rule,
  /*  973 */  regD_rule,
  /*  974 */  _LoadD_memory__rule,
  /*  975 */  immD_rule,
  /*  976 */  0,
  /*  977 */  regD_rule,
  /*  978 */  regF_rule,
  /*  979 */  memory_rule,
  /*  980 */  memory_rule,
  /*  981 */  memory_rule,
  /*  982 */  memory_rule,
  /*  983 */  memory_rule,
  /*  984 */  memory_rule,
  /*  985 */  memory_rule,
  /*  986 */  memory_rule,
  /*  987 */  memory_rule,
  /*  988 */  memory_rule,
  /*  989 */  memory_rule,
  /*  990 */  memory_rule,
  /*  991 */  _LoadB_memory__rule,
  /*  992 */  _LoadB_memory__rule,
  /*  993 */  rRegI_rule,
  /*  994 */  _LoadB_memory__rule,
  /*  995 */  rRegI_rule,
  /*  996 */  _LoadB_memory__rule,
  /*  997 */  immI_rule,
  /*  998 */  immI_rule,
  /*  999 */  rRegI_rule,
  /* 1000 */  _LoadS_memory__rule,
  /* 1001 */  rRegI_rule,
  /* 1002 */  _LoadS_memory__rule,
  /* 1003 */  immI_rule,
  /* 1004 */  rRegI_rule,
  /* 1005 */  _LoadS_memory__rule,
  /* 1006 */  immI_rule,
  /* 1007 */  rRegI_rule,
  /* 1008 */  _LoadI_memory__rule,
  /* 1009 */  rRegI_rule,
  /* 1010 */  _LoadI_memory__rule,
  /* 1011 */  immI_rule,
  /* 1012 */  immI_rule,
  /* 1013 */  _LoadL_memory__rule,
  /* 1014 */  rRegL_rule,
  /* 1015 */  immL_rule,
  /* 1016 */  _LoadL_memory__rule,
  /* 1017 */  _LoadF_memory__rule,
  /* 1018 */  _LoadF_memory__rule,
  /* 1019 */  regF_rule,
  /* 1020 */  _LoadF_memory__rule,
  /* 1021 */  immF0_rule,
  /* 1022 */  immF0_rule,
  /* 1023 */  immF0_rule,
  /* 1024 */  _LoadD_memory__rule,
  /* 1025 */  regD_rule,
  /* 1026 */  _LoadD_memory__rule,
  /* 1027 */  immD0_rule,
  /* 1028 */  immD0_rule,
  /* 1029 */  rRegI_rule,
  /* 1030 */  rRegI_rule,
  /* 1031 */  immI_rule,
  /* 1032 */  immI_rule,
  /* 1033 */  immI0_rule,
  /* 1034 */  immI0_rule,
  /* 1035 */  immI0_rule,
  /* 1036 */  immI0_rule,
  /* 1037 */  rRegI_rule,
  /* 1038 */  immI_rule,
  /* 1039 */  immI_rule,
  /* 1040 */  immI0_rule,
  /* 1041 */  immI0_rule,
  /* 1042 */  immI0_rule,
  /* 1043 */  immI0_rule,
  /* 1044 */  rRegI_rule,
  /* 1045 */  _LoadI_memory__rule,
  /* 1046 */  immI_rule,
  /* 1047 */  immI0_rule,
  /* 1048 */  immI0_rule,
  /* 1049 */  immI0_rule,
  /* 1050 */  rRegL_rule,
  /* 1051 */  immL_rule,
  /* 1052 */  immL0_rule,
  /* 1053 */  immL0_rule,
  /* 1054 */  regF_rule,
  /* 1055 */  regF_rule,
  /* 1056 */  regD_rule,
  /* 1057 */  _LoadB_memory__rule,
  /* 1058 */  _LoadB_memory__rule,
  /* 1059 */  rRegI_rule,
  /* 1060 */  _LoadB_memory__rule,
  /* 1061 */  rRegI_rule,
  /* 1062 */  _LoadB_memory__rule,
  /* 1063 */  rRegI_rule,
  /* 1064 */  _LoadB_memory__rule,
  /* 1065 */  immI_rule,
  /* 1066 */  immI_rule,
  /* 1067 */  immI_rule,
  /* 1068 */  immI0_rule,
  /* 1069 */  rRegI_rule,
  /* 1070 */  _LoadS_memory__rule,
  /* 1071 */  rRegI_rule,
  /* 1072 */  _LoadS_memory__rule,
  /* 1073 */  rRegI_rule,
  /* 1074 */  _LoadS_memory__rule,
  /* 1075 */  rRegI_rule,
  /* 1076 */  _LoadS_memory__rule,
  /* 1077 */  immI_rule,
  /* 1078 */  immI_rule,
  /* 1079 */  immI_rule,
  /* 1080 */  immI0_rule,
  /* 1081 */  rRegI_rule,
  /* 1082 */  _LoadI_memory__rule,
  /* 1083 */  rRegI_rule,
  /* 1084 */  _LoadI_memory__rule,
  /* 1085 */  rRegI_rule,
  /* 1086 */  _LoadI_memory__rule,
  /* 1087 */  immI_rule,
  /* 1088 */  immI_rule,
  /* 1089 */  immI_rule,
  /* 1090 */  immI0_rule,
  /* 1091 */  rRegL_rule,
  /* 1092 */  rRegL_rule,
  /* 1093 */  immL_rule,
  /* 1094 */  immL_rule,
  /* 1095 */  _LoadL_memory__rule,
  /* 1096 */  _LoadL_memory__rule,
  /* 1097 */  _LoadL_memory__rule,
  /* 1098 */  immL0_rule,
  /* 1099 */  regF_rule,
  /* 1100 */  _LoadF_memory__rule,
  /* 1101 */  regF_rule,
  /* 1102 */  _LoadF_memory__rule,
  /* 1103 */  immF0_rule,
  /* 1104 */  immF0_rule,
  /* 1105 */  immF0_rule,
  /* 1106 */  immF0_rule,
  /* 1107 */  regD_rule,
  /* 1108 */  _LoadD_memory__rule,
  /* 1109 */  regD_rule,
  /* 1110 */  _LoadD_memory__rule,
  /* 1111 */  immD0_rule,
  /* 1112 */  immD0_rule,
  /* 1113 */  immD0_rule,
  /* 1114 */  rRegI_rule,
  /* 1115 */  rRegI_rule,
  /* 1116 */  rRegI_rule,
  /* 1117 */  rRegI_rule,
  /* 1118 */  rRegI_rule,
  /* 1119 */  rRegI_rule,
  /* 1120 */  rRegI_rule,
  /* 1121 */  rRegI_rule,
  /* 1122 */  rRegI_rule,
  /* 1123 */  rRegL_rule,
  /* 1124 */  rRegL_rule,
  /* 1125 */  rRegL_rule,
  /* 1126 */  regF_rule,
  /* 1127 */  regF_rule,
  /* 1128 */  regF_rule,
  /* 1129 */  regF_rule,
  /* 1130 */  regF_rule,
  /* 1131 */  regF_rule,
  /* 1132 */  regD_rule,
  /* 1133 */  regD_rule,
  /* 1134 */  regD_rule,
  /* 1135 */  regD_rule,
  /* 1136 */  rRegI_rule,
  /* 1137 */  rRegI_rule,
  /* 1138 */  rRegI_rule,
  /* 1139 */  rRegI_rule,
  /* 1140 */  rRegI_rule,
  /* 1141 */  rRegI_rule,
  /* 1142 */  rRegL_rule,
  /* 1143 */  rRegL_rule,
  /* 1144 */  rRegL_rule,
  /* 1145 */  regF_rule,
  /* 1146 */  regF_rule,
  /* 1147 */  regF_rule,
  /* 1148 */  regF_rule,
  /* 1149 */  regF_rule,
  /* 1150 */  regF_rule,
  /* 1151 */  regD_rule,
  /* 1152 */  regD_rule,
  /* 1153 */  regD_rule,
  /* 1154 */  regD_rule,
  /* 1155 */  vecS_rule,
  /* 1156 */  vecS_rule,
  /* 1157 */  vecS_rule,
  /* 1158 */  vecS_rule,
  /* 1159 */  vecS_rule,
  /* 1160 */  vecS_rule,
  /* 1161 */  vecS_rule,
  /* 1162 */  vecD_rule,
  /* 1163 */  vecD_rule,
  /* 1164 */  vecD_rule,
  /* 1165 */  vecD_rule,
  /* 1166 */  vecD_rule,
  /* 1167 */  vecD_rule,
  /* 1168 */  vecD_rule,
  /* 1169 */  vecX_rule,
  /* 1170 */  vecX_rule,
  /* 1171 */  vecX_rule,
  /* 1172 */  vecX_rule,
  /* 1173 */  vecX_rule,
  /* 1174 */  vecX_rule,
  /* 1175 */  vecX_rule,
  /* 1176 */  vecY_rule,
  /* 1177 */  vecY_rule,
  /* 1178 */  vecY_rule,
  /* 1179 */  vecY_rule,
  /* 1180 */  vecY_rule,
  /* 1181 */  vecY_rule,
  /* 1182 */  vecZ_rule,
  /* 1183 */  vecZ_rule,
  /* 1184 */  vecS_rule,
  /* 1185 */  vecS_rule,
  /* 1186 */  vecS_rule,
  /* 1187 */  vecS_rule,
  /* 1188 */  vecS_rule,
  /* 1189 */  vecS_rule,
  /* 1190 */  vecS_rule,
  /* 1191 */  vecD_rule,
  /* 1192 */  vecD_rule,
  /* 1193 */  vecD_rule,
  /* 1194 */  vecD_rule,
  /* 1195 */  vecD_rule,
  /* 1196 */  vecD_rule,
  /* 1197 */  vecD_rule,
  /* 1198 */  vecX_rule,
  /* 1199 */  vecX_rule,
  /* 1200 */  vecX_rule,
  /* 1201 */  vecX_rule,
  /* 1202 */  vecX_rule,
  /* 1203 */  vecX_rule,
  /* 1204 */  vecX_rule,
  /* 1205 */  vecY_rule,
  /* 1206 */  vecY_rule,
  /* 1207 */  vecY_rule,
  /* 1208 */  vecY_rule,
  /* 1209 */  vecY_rule,
  /* 1210 */  vecY_rule,
  /* 1211 */  vecZ_rule,
  /* 1212 */  vecZ_rule,
  /* 1213 */  vecD_rule,
  /* 1214 */  vecD_rule,
  /* 1215 */  vecD_rule,
  /* 1216 */  vecX_rule,
  /* 1217 */  vecX_rule,
  /* 1218 */  vecX_rule,
  /* 1219 */  vecY_rule,
  /* 1220 */  vecY_rule,
  /* 1221 */  vecZ_rule,
  /* 1222 */  vecZ_rule,
  /* 1223 */  vecX_rule,
  /* 1224 */  vecX_rule,
  /* 1225 */  vecX_rule,
  /* 1226 */  vecY_rule,
  /* 1227 */  vecY_rule,
  /* 1228 */  vecZ_rule,
  /* 1229 */  vecZ_rule,
  /* 1230 */  vecD_rule,
  /* 1231 */  vecD_rule,
  /* 1232 */  vecD_rule,
  /* 1233 */  vecX_rule,
  /* 1234 */  vecX_rule,
  /* 1235 */  vecX_rule,
  /* 1236 */  vecY_rule,
  /* 1237 */  vecY_rule,
  /* 1238 */  vecZ_rule,
  /* 1239 */  vecZ_rule,
  /* 1240 */  vecX_rule,
  /* 1241 */  vecX_rule,
  /* 1242 */  vecX_rule,
  /* 1243 */  vecY_rule,
  /* 1244 */  vecY_rule,
  /* 1245 */  vecZ_rule,
  /* 1246 */  vecZ_rule,
  /* 1247 */  vecS_rule,
  /* 1248 */  vecS_rule,
  /* 1249 */  vecS_rule,
  /* 1250 */  vecS_rule,
  /* 1251 */  vecS_rule,
  /* 1252 */  vecS_rule,
  /* 1253 */  vecS_rule,
  /* 1254 */  vecD_rule,
  /* 1255 */  vecD_rule,
  /* 1256 */  vecD_rule,
  /* 1257 */  vecD_rule,
  /* 1258 */  vecD_rule,
  /* 1259 */  vecD_rule,
  /* 1260 */  vecD_rule,
  /* 1261 */  vecX_rule,
  /* 1262 */  vecX_rule,
  /* 1263 */  vecX_rule,
  /* 1264 */  vecX_rule,
  /* 1265 */  vecX_rule,
  /* 1266 */  vecX_rule,
  /* 1267 */  vecX_rule,
  /* 1268 */  vecY_rule,
  /* 1269 */  vecY_rule,
  /* 1270 */  vecY_rule,
  /* 1271 */  vecY_rule,
  /* 1272 */  vecY_rule,
  /* 1273 */  vecY_rule,
  /* 1274 */  vecZ_rule,
  /* 1275 */  vecZ_rule,
  /* 1276 */  vecS_rule,
  /* 1277 */  vecS_rule,
  /* 1278 */  vecS_rule,
  /* 1279 */  vecS_rule,
  /* 1280 */  vecS_rule,
  /* 1281 */  vecS_rule,
  /* 1282 */  vecS_rule,
  /* 1283 */  vecD_rule,
  /* 1284 */  vecD_rule,
  /* 1285 */  vecD_rule,
  /* 1286 */  vecD_rule,
  /* 1287 */  vecD_rule,
  /* 1288 */  vecD_rule,
  /* 1289 */  vecD_rule,
  /* 1290 */  vecX_rule,
  /* 1291 */  vecX_rule,
  /* 1292 */  vecX_rule,
  /* 1293 */  vecX_rule,
  /* 1294 */  vecX_rule,
  /* 1295 */  vecX_rule,
  /* 1296 */  vecX_rule,
  /* 1297 */  vecY_rule,
  /* 1298 */  vecY_rule,
  /* 1299 */  vecY_rule,
  /* 1300 */  vecY_rule,
  /* 1301 */  vecY_rule,
  /* 1302 */  vecY_rule,
  /* 1303 */  vecZ_rule,
  /* 1304 */  vecZ_rule,
  /* 1305 */  vecD_rule,
  /* 1306 */  vecD_rule,
  /* 1307 */  vecD_rule,
  /* 1308 */  vecX_rule,
  /* 1309 */  vecX_rule,
  /* 1310 */  vecX_rule,
  /* 1311 */  vecY_rule,
  /* 1312 */  vecY_rule,
  /* 1313 */  vecZ_rule,
  /* 1314 */  vecZ_rule,
  /* 1315 */  vecX_rule,
  /* 1316 */  vecX_rule,
  /* 1317 */  vecX_rule,
  /* 1318 */  vecY_rule,
  /* 1319 */  vecY_rule,
  /* 1320 */  vecZ_rule,
  /* 1321 */  vecZ_rule,
  /* 1322 */  vecD_rule,
  /* 1323 */  vecD_rule,
  /* 1324 */  vecD_rule,
  /* 1325 */  vecX_rule,
  /* 1326 */  vecX_rule,
  /* 1327 */  vecX_rule,
  /* 1328 */  vecY_rule,
  /* 1329 */  vecY_rule,
  /* 1330 */  vecZ_rule,
  /* 1331 */  vecZ_rule,
  /* 1332 */  vecX_rule,
  /* 1333 */  vecX_rule,
  /* 1334 */  vecX_rule,
  /* 1335 */  vecY_rule,
  /* 1336 */  vecY_rule,
  /* 1337 */  vecZ_rule,
  /* 1338 */  vecZ_rule,
  /* 1339 */  vecS_rule,
  /* 1340 */  vecS_rule,
  /* 1341 */  vecS_rule,
  /* 1342 */  vecS_rule,
  /* 1343 */  vecS_rule,
  /* 1344 */  vecS_rule,
  /* 1345 */  vecS_rule,
  /* 1346 */  vecD_rule,
  /* 1347 */  vecD_rule,
  /* 1348 */  vecD_rule,
  /* 1349 */  vecD_rule,
  /* 1350 */  vecD_rule,
  /* 1351 */  vecD_rule,
  /* 1352 */  vecD_rule,
  /* 1353 */  vecX_rule,
  /* 1354 */  vecX_rule,
  /* 1355 */  vecX_rule,
  /* 1356 */  vecX_rule,
  /* 1357 */  vecX_rule,
  /* 1358 */  vecX_rule,
  /* 1359 */  vecX_rule,
  /* 1360 */  vecY_rule,
  /* 1361 */  vecY_rule,
  /* 1362 */  vecY_rule,
  /* 1363 */  vecY_rule,
  /* 1364 */  vecY_rule,
  /* 1365 */  vecY_rule,
  /* 1366 */  vecZ_rule,
  /* 1367 */  vecZ_rule,
  /* 1368 */  vecD_rule,
  /* 1369 */  vecD_rule,
  /* 1370 */  vecD_rule,
  /* 1371 */  vecX_rule,
  /* 1372 */  vecX_rule,
  /* 1373 */  vecX_rule,
  /* 1374 */  vecX_rule,
  /* 1375 */  vecX_rule,
  /* 1376 */  vecY_rule,
  /* 1377 */  vecY_rule,
  /* 1378 */  vecZ_rule,
  /* 1379 */  vecZ_rule,
  /* 1380 */  vecY_rule,
  /* 1381 */  vecY_rule,
  /* 1382 */  vecZ_rule,
  /* 1383 */  vecZ_rule,
  /* 1384 */  vecD_rule,
  /* 1385 */  vecD_rule,
  /* 1386 */  vecD_rule,
  /* 1387 */  vecX_rule,
  /* 1388 */  vecX_rule,
  /* 1389 */  vecX_rule,
  /* 1390 */  vecY_rule,
  /* 1391 */  vecY_rule,
  /* 1392 */  vecZ_rule,
  /* 1393 */  vecZ_rule,
  /* 1394 */  vecX_rule,
  /* 1395 */  vecX_rule,
  /* 1396 */  vecX_rule,
  /* 1397 */  vecY_rule,
  /* 1398 */  vecY_rule,
  /* 1399 */  vecZ_rule,
  /* 1400 */  vecZ_rule,
  /* 1401 */  _Binary_cmpOp_vcmppd_immI8_rule,
  /* 1402 */  vecD_rule,
  /* 1403 */  vecD_rule,
  /* 1404 */  vecD_rule,
  /* 1405 */  vecX_rule,
  /* 1406 */  vecX_rule,
  /* 1407 */  vecX_rule,
  /* 1408 */  vecY_rule,
  /* 1409 */  vecY_rule,
  /* 1410 */  vecZ_rule,
  /* 1411 */  vecZ_rule,
  /* 1412 */  vecX_rule,
  /* 1413 */  vecX_rule,
  /* 1414 */  vecX_rule,
  /* 1415 */  vecY_rule,
  /* 1416 */  vecY_rule,
  /* 1417 */  vecZ_rule,
  /* 1418 */  vecZ_rule,
  /* 1419 */  vecS_rule,
  /* 1420 */  vecS_rule,
  /* 1421 */  vecS_rule,
  /* 1422 */  vecS_rule,
  /* 1423 */  vecS_rule,
  /* 1424 */  vecS_rule,
  /* 1425 */  vecS_rule,
  /* 1426 */  vecS_rule,
  /* 1427 */  vecD_rule,
  /* 1428 */  vecD_rule,
  /* 1429 */  vecD_rule,
  /* 1430 */  vecD_rule,
  /* 1431 */  vecD_rule,
  /* 1432 */  vecD_rule,
  /* 1433 */  vecD_rule,
  /* 1434 */  vecD_rule,
  /* 1435 */  vecX_rule,
  /* 1436 */  vecX_rule,
  /* 1437 */  vecX_rule,
  /* 1438 */  vecX_rule,
  /* 1439 */  vecX_rule,
  /* 1440 */  vecX_rule,
  /* 1441 */  vecX_rule,
  /* 1442 */  vecX_rule,
  /* 1443 */  vecY_rule,
  /* 1444 */  vecY_rule,
  /* 1445 */  vecY_rule,
  /* 1446 */  vecY_rule,
  /* 1447 */  vecY_rule,
  /* 1448 */  vecY_rule,
  /* 1449 */  vecZ_rule,
  /* 1450 */  vecZ_rule,
  /* 1451 */  vecD_rule,
  /* 1452 */  vecD_rule,
  /* 1453 */  vecD_rule,
  /* 1454 */  vecD_rule,
  /* 1455 */  vecX_rule,
  /* 1456 */  vecX_rule,
  /* 1457 */  vecX_rule,
  /* 1458 */  vecX_rule,
  /* 1459 */  vecY_rule,
  /* 1460 */  vecY_rule,
  /* 1461 */  vecZ_rule,
  /* 1462 */  vecZ_rule,
  /* 1463 */  vecX_rule,
  /* 1464 */  vecX_rule,
  /* 1465 */  vecX_rule,
  /* 1466 */  vecX_rule,
  /* 1467 */  vecY_rule,
  /* 1468 */  vecY_rule,
  /* 1469 */  vecZ_rule,
  /* 1470 */  vecZ_rule,
  /* 1471 */  vecS_rule,
  /* 1472 */  vecS_rule,
  /* 1473 */  vecS_rule,
  /* 1474 */  vecS_rule,
  /* 1475 */  vecS_rule,
  /* 1476 */  vecS_rule,
  /* 1477 */  vecS_rule,
  /* 1478 */  vecS_rule,
  /* 1479 */  vecD_rule,
  /* 1480 */  vecD_rule,
  /* 1481 */  vecD_rule,
  /* 1482 */  vecD_rule,
  /* 1483 */  vecD_rule,
  /* 1484 */  vecD_rule,
  /* 1485 */  vecD_rule,
  /* 1486 */  vecD_rule,
  /* 1487 */  vecX_rule,
  /* 1488 */  vecX_rule,
  /* 1489 */  vecX_rule,
  /* 1490 */  vecX_rule,
  /* 1491 */  vecX_rule,
  /* 1492 */  vecX_rule,
  /* 1493 */  vecX_rule,
  /* 1494 */  vecX_rule,
  /* 1495 */  vecY_rule,
  /* 1496 */  vecY_rule,
  /* 1497 */  vecY_rule,
  /* 1498 */  vecY_rule,
  /* 1499 */  vecY_rule,
  /* 1500 */  vecY_rule,
  /* 1501 */  vecZ_rule,
  /* 1502 */  vecZ_rule,
  /* 1503 */  vecD_rule,
  /* 1504 */  vecD_rule,
  /* 1505 */  vecD_rule,
  /* 1506 */  vecD_rule,
  /* 1507 */  vecX_rule,
  /* 1508 */  vecX_rule,
  /* 1509 */  vecX_rule,
  /* 1510 */  vecX_rule,
  /* 1511 */  vecY_rule,
  /* 1512 */  vecY_rule,
  /* 1513 */  vecZ_rule,
  /* 1514 */  vecZ_rule,
  /* 1515 */  vecX_rule,
  /* 1516 */  vecX_rule,
  /* 1517 */  vecX_rule,
  /* 1518 */  vecX_rule,
  /* 1519 */  vecY_rule,
  /* 1520 */  vecY_rule,
  /* 1521 */  vecZ_rule,
  /* 1522 */  vecZ_rule,
  /* 1523 */  vecS_rule,
  /* 1524 */  vecS_rule,
  /* 1525 */  vecS_rule,
  /* 1526 */  vecS_rule,
  /* 1527 */  vecS_rule,
  /* 1528 */  vecS_rule,
  /* 1529 */  vecS_rule,
  /* 1530 */  vecS_rule,
  /* 1531 */  vecD_rule,
  /* 1532 */  vecD_rule,
  /* 1533 */  vecD_rule,
  /* 1534 */  vecD_rule,
  /* 1535 */  vecD_rule,
  /* 1536 */  vecD_rule,
  /* 1537 */  vecD_rule,
  /* 1538 */  vecD_rule,
  /* 1539 */  vecX_rule,
  /* 1540 */  vecX_rule,
  /* 1541 */  vecX_rule,
  /* 1542 */  vecX_rule,
  /* 1543 */  vecX_rule,
  /* 1544 */  vecX_rule,
  /* 1545 */  vecX_rule,
  /* 1546 */  vecX_rule,
  /* 1547 */  vecY_rule,
  /* 1548 */  vecY_rule,
  /* 1549 */  vecY_rule,
  /* 1550 */  vecY_rule,
  /* 1551 */  vecY_rule,
  /* 1552 */  vecY_rule,
  /* 1553 */  vecZ_rule,
  /* 1554 */  vecZ_rule,
  /* 1555 */  vecD_rule,
  /* 1556 */  vecD_rule,
  /* 1557 */  vecD_rule,
  /* 1558 */  vecD_rule,
  /* 1559 */  vecX_rule,
  /* 1560 */  vecX_rule,
  /* 1561 */  vecX_rule,
  /* 1562 */  vecX_rule,
  /* 1563 */  vecY_rule,
  /* 1564 */  vecY_rule,
  /* 1565 */  vecZ_rule,
  /* 1566 */  vecZ_rule,
  /* 1567 */  vecS_rule,
  /* 1568 */  vecS_rule,
  /* 1569 */  vecS_rule,
  /* 1570 */  vecD_rule,
  /* 1571 */  vecD_rule,
  /* 1572 */  vecD_rule,
  /* 1573 */  vecX_rule,
  /* 1574 */  vecX_rule,
  /* 1575 */  vecX_rule,
  /* 1576 */  vecY_rule,
  /* 1577 */  vecY_rule,
  /* 1578 */  vecZ_rule,
  /* 1579 */  vecZ_rule,
  /* 1580 */  vecS_rule,
  /* 1581 */  vecS_rule,
  /* 1582 */  vecS_rule,
  /* 1583 */  vecD_rule,
  /* 1584 */  vecD_rule,
  /* 1585 */  vecD_rule,
  /* 1586 */  vecX_rule,
  /* 1587 */  vecX_rule,
  /* 1588 */  vecX_rule,
  /* 1589 */  vecY_rule,
  /* 1590 */  vecY_rule,
  /* 1591 */  vecZ_rule,
  /* 1592 */  vecZ_rule,
  /* 1593 */  vecS_rule,
  /* 1594 */  vecS_rule,
  /* 1595 */  vecS_rule,
  /* 1596 */  vecD_rule,
  /* 1597 */  vecD_rule,
  /* 1598 */  vecD_rule,
  /* 1599 */  vecX_rule,
  /* 1600 */  vecX_rule,
  /* 1601 */  vecX_rule,
  /* 1602 */  vecY_rule,
  /* 1603 */  vecY_rule,
  /* 1604 */  vecZ_rule,
  /* 1605 */  vecZ_rule,
  // last instruction
  0 // no trailing comma
};

const        int   rightOp[] = {
  /*    0 */  0,
  /*    1 */  0,
  /*    2 */  0,
  /*    3 */  0,
  /*    4 */  0,
  /*    5 */  0,
  /*    6 */  0,
  /*    7 */  0,
  /*    8 */  0,
  /*    9 */  0,
  /*   10 */  0,
  /*   11 */  0,
  /*   12 */  0,
  /*   13 */  0,
  /*   14 */  0,
  /*   15 */  0,
  /*   16 */  0,
  /*   17 */  0,
  /*   18 */  0,
  /*   19 */  0,
  /*   20 */  0,
  /*   21 */  0,
  /*   22 */  0,
  /*   23 */  0,
  /*   24 */  0,
  /*   25 */  0,
  /*   26 */  0,
  /*   27 */  0,
  /*   28 */  0,
  /*   29 */  0,
  /*   30 */  0,
  /*   31 */  0,
  /*   32 */  0,
  /*   33 */  0,
  /*   34 */  0,
  /*   35 */  0,
  /*   36 */  0,
  /*   37 */  0,
  /*   38 */  0,
  /*   39 */  0,
  /*   40 */  0,
  /*   41 */  0,
  /*   42 */  0,
  /*   43 */  0,
  /*   44 */  0,
  /*   45 */  0,
  /*   46 */  0,
  /*   47 */  0,
  /*   48 */  0,
  /*   49 */  0,
  /*   50 */  0,
  /*   51 */  0,
  /*   52 */  0,
  /*   53 */  0,
  /*   54 */  0,
  /*   55 */  0,
  /*   56 */  0,
  /*   57 */  0,
  /*   58 */  0,
  /*   59 */  0,
  /*   60 */  0,
  /*   61 */  0,
  /*   62 */  0,
  /*   63 */  0,
  /*   64 */  0,
  /*   65 */  0,
  /*   66 */  0,
  /*   67 */  0,
  /*   68 */  0,
  /*   69 */  0,
  /*   70 */  0,
  /*   71 */  0,
  /*   72 */  0,
  /*   73 */  0,
  /*   74 */  0,
  /*   75 */  0,
  /*   76 */  0,
  /*   77 */  0,
  /*   78 */  0,
  /*   79 */  0,
  /*   80 */  0,
  /*   81 */  immL8_rule,
  /*   82 */  immL32_rule,
  /*   83 */  immL32_rule,
  /*   84 */  rRegL_rule,
  /*   85 */  _LShiftL_rRegL_immI2_rule,
  /*   86 */  _LShiftL__ConvI2L_rRegI__immI2_rule,
  /*   87 */  immL32_rule,
  /*   88 */  immL32_rule,
  /*   89 */  immL32_rule,
  /*   90 */  immL32_rule,
  /*   91 */  0,
  /*   92 */  immL8_rule,
  /*   93 */  immL32_rule,
  /*   94 */  immL32_rule,
  /*   95 */  rRegL_rule,
  /*   96 */  _LShiftL_rRegL_immI2_rule,
  /*   97 */  immL32_rule,
  /*   98 */  immL32_rule,
  /*   99 */  immL32_rule,
  /*  100 */  0,
  /*  101 */  0,
  /*  102 */  0,
  /*  103 */  0,
  /*  104 */  0,
  /*  105 */  0,
  /*  106 */  0,
  /*  107 */  0,
  /*  108 */  0,
  /*  109 */  0,
  /*  110 */  0,
  // last operand
  /*  111 */  0,
  // last operand class
  /*  112 */  rRegL_rule,
  /*  113 */  immI2_rule,
  /*  114 */  0,
  /*  115 */  immI2_rule,
  /*  116 */  _LShiftL_rRegL_immI2_rule,
  /*  117 */  _ConvI2L_rRegI__rule,
  /*  118 */  _LShiftL__ConvI2L_rRegI__immI2_rule,
  /*  119 */  0,
  /*  120 */  rRegL_rule,
  /*  121 */  _LShiftL_rRegL_immI2_rule,
  /*  122 */  _ConvI2L_rRegI__rule,
  /*  123 */  _LShiftL__ConvI2L_rRegI__immI2_rule,
  /*  124 */  0,
  /*  125 */  0,
  /*  126 */  immI_rule,
  /*  127 */  0,
  /*  128 */  immI_24_rule,
  /*  129 */  0,
  /*  130 */  immI_24_rule,
  /*  131 */  immI_255_rule,
  /*  132 */  immI_rule,
  /*  133 */  0,
  /*  134 */  immI_24_rule,
  /*  135 */  immI_16_rule,
  /*  136 */  immI_255_rule,
  /*  137 */  immI_65535_rule,
  /*  138 */  immU31_rule,
  /*  139 */  0,
  /*  140 */  0,
  /*  141 */  0,
  /*  142 */  0,
  /*  143 */  immL32_rule,
  /*  144 */  rFlagsReg_rule,
  /*  145 */  rRegI_rule,
  /*  146 */  rFlagsRegU_rule,
  /*  147 */  rFlagsRegUCF_rule,
  /*  148 */  _LoadI_memory__rule,
  /*  149 */  rRegN_rule,
  /*  150 */  rRegP_rule,
  /*  151 */  rRegL_rule,
  /*  152 */  _LoadL_memory__rule,
  /*  153 */  regF_rule,
  /*  154 */  regD_rule,
  /*  155 */  rRegI_rule,
  /*  156 */  _LoadI_memory__rule,
  /*  157 */  immI_rule,
  /*  158 */  immI1_rule,
  /*  159 */  immI_M1_rule,
  /*  160 */  rRegL_rule,
  /*  161 */  _LoadL_memory__rule,
  /*  162 */  immL32_rule,
  /*  163 */  immL1_rule,
  /*  164 */  immL_M1_rule,
  /*  165 */  rRegP_rule,
  /*  166 */  rRegI_rule,
  /*  167 */  rRegL_rule,
  /*  168 */  rRegN_rule,
  /*  169 */  rRegI_rule,
  /*  170 */  immI_rule,
  /*  171 */  rRegL_rule,
  /*  172 */  immL32_rule,
  /*  173 */  rRegI_rule,
  /*  174 */  _LoadI_memory__rule,
  /*  175 */  _LoadL_memory__rule,
  /*  176 */  immI1_rule,
  /*  177 */  immI8_rule,
  /*  178 */  rcx_RegI_rule,
  /*  179 */  immI1_rule,
  /*  180 */  immI8_rule,
  /*  181 */  rcx_RegI_rule,
  /*  182 */  immI1_rule,
  /*  183 */  immI8_rule,
  /*  184 */  rcx_RegI_rule,
  /*  185 */  immI1_rule,
  /*  186 */  immI8_rule,
  /*  187 */  rcx_RegI_rule,
  /*  188 */  immI1_rule,
  /*  189 */  immI8_rule,
  /*  190 */  rcx_RegI_rule,
  /*  191 */  immI1_rule,
  /*  192 */  immI8_rule,
  /*  193 */  rcx_RegI_rule,
  /*  194 */  immI_24_rule,
  /*  195 */  immI_16_rule,
  /*  196 */  immI1_rule,
  /*  197 */  immI_M1_rule,
  /*  198 */  immI8_rule,
  /*  199 */  immI8_rule,
  /*  200 */  rcx_RegI_rule,
  /*  201 */  rcx_RegI_rule,
  /*  202 */  _SubI_immI0_rcx_RegI_rule,
  /*  203 */  rcx_RegI_rule,
  /*  204 */  _SubI_immI_32_rcx_RegI_rule,
  /*  205 */  immI1_rule,
  /*  206 */  immI_M1_rule,
  /*  207 */  rcx_RegI_rule,
  /*  208 */  _SubI_immI0_rcx_RegI_rule,
  /*  209 */  _SubI_immI_32_rcx_RegI_rule,
  /*  210 */  immI1_rule,
  /*  211 */  immI_M1_rule,
  /*  212 */  immI8_rule,
  /*  213 */  immI8_rule,
  /*  214 */  rcx_RegI_rule,
  /*  215 */  _SubI_immI0_rcx_RegI_rule,
  /*  216 */  rcx_RegI_rule,
  /*  217 */  _SubI_immI_64_rcx_RegI_rule,
  /*  218 */  immI1_rule,
  /*  219 */  immI_M1_rule,
  /*  220 */  rcx_RegI_rule,
  /*  221 */  _SubI_immI0_rcx_RegI_rule,
  /*  222 */  _SubI_immI_64_rcx_RegI_rule,
  /*  223 */  immI_255_rule,
  /*  224 */  immI_65535_rule,
  /*  225 */  rRegI_rule,
  /*  226 */  _LoadI_memory__rule,
  /*  227 */  immI_rule,
  /*  228 */  immI_M1_rule,
  /*  229 */  immI_M1_rule,
  /*  230 */  rRegI_rule,
  /*  231 */  _LoadI_memory__rule,
  /*  232 */  immI_rule,
  /*  233 */  rRegI_rule,
  /*  234 */  _LoadI_memory__rule,
  /*  235 */  immI_rule,
  /*  236 */  rRegL_rule,
  /*  237 */  _LoadL_memory__rule,
  /*  238 */  immL32_rule,
  /*  239 */  immL_M1_rule,
  /*  240 */  rRegL_rule,
  /*  241 */  immL_M1_rule,
  /*  242 */  0,
  /*  243 */  rRegL_rule,
  /*  244 */  _LoadL_memory__rule,
  /*  245 */  immL32_rule,
  /*  246 */  rRegL_rule,
  /*  247 */  _LoadL_memory__rule,
  /*  248 */  immL32_rule,
  /*  249 */  rRegI_rule,
  /*  250 */  rRegI_rule,
  /*  251 */  rRegI_rule,
  /*  252 */  _CmpLTMask_rRegI_rRegI_rule,
  /*  253 */  0,
  /*  254 */  0,
  /*  255 */  rcx_RegI_rule,
  /*  256 */  rdx_RegI_rule,
  /*  257 */  rdx_RegI_rule,
  /*  258 */  immI_rule,
  /*  259 */  rax_RegI_rule,
  /*  260 */  rsi_RegP_rule,
  /*  261 */  immI_rule,
  /*  262 */  0,
  /*  263 */  0,
  /*  264 */  0,
  /*  265 */  immL32_rule,
  /*  266 */  rax_RegP_rule,
  /*  267 */  0,
  /*  268 */  0,
  /*  269 */  0,
  /*  270 */  0,
  /*  271 */  0,
  /*  272 */  0,
  /*  273 */  0,
  /*  274 */  immI8_rule,
  /*  275 */  vecY_rule,
  // last internally defined operand
  /*  276 */  0,
  /*  277 */  0,
  /*  278 */  0,
  /*  279 */  0,
  /*  280 */  0,
  /*  281 */  0,
  /*  282 */  0,
  /*  283 */  0,
  /*  284 */  0,
  /*  285 */  0,
  /*  286 */  0,
  /*  287 */  0,
  /*  288 */  0,
  /*  289 */  0,
  /*  290 */  0,
  /*  291 */  0,
  /*  292 */  0,
  /*  293 */  0,
  /*  294 */  0,
  /*  295 */  0,
  /*  296 */  0,
  /*  297 */  0,
  /*  298 */  0,
  /*  299 */  0,
  /*  300 */  0,
  /*  301 */  0,
  /*  302 */  0,
  /*  303 */  0,
  /*  304 */  0,
  /*  305 */  0,
  /*  306 */  0,
  /*  307 */  0,
  /*  308 */  0,
  /*  309 */  0,
  /*  310 */  0,
  /*  311 */  0,
  /*  312 */  0,
  /*  313 */  0,
  /*  314 */  0,
  /*  315 */  0,
  /*  316 */  0,
  /*  317 */  0,
  /*  318 */  0,
  /*  319 */  0,
  /*  320 */  0,
  /*  321 */  0,
  /*  322 */  0,
  /*  323 */  0,
  /*  324 */  _Binary_rax_RegP_rRegP_rule,
  /*  325 */  _Binary_rax_RegI_rRegI_rule,
  /*  326 */  _Binary_rax_RegL_rRegL_rule,
  /*  327 */  regF_rule,
  /*  328 */  regF_rule,
  /*  329 */  _LoadF_memory__rule,
  /*  330 */  _LoadF_memory__rule,
  /*  331 */  immF_rule,
  /*  332 */  immF_rule,
  /*  333 */  regD_rule,
  /*  334 */  regD_rule,
  /*  335 */  _LoadD_memory__rule,
  /*  336 */  _LoadD_memory__rule,
  /*  337 */  immD_rule,
  /*  338 */  immD_rule,
  /*  339 */  0,
  /*  340 */  0,
  /*  341 */  0,
  /*  342 */  0,
  /*  343 */  0,
  /*  344 */  0,
  /*  345 */  0,
  /*  346 */  0,
  /*  347 */  0,
  /*  348 */  0,
  /*  349 */  0,
  /*  350 */  rRegI_rule,
  /*  351 */  immI_rule,
  /*  352 */  rRegL_rule,
  /*  353 */  immL32_rule,
  /*  354 */  rRegI_rule,
  /*  355 */  immI_rule,
  /*  356 */  rRegL_rule,
  /*  357 */  immL32_rule,
  /*  358 */  rax_RegI_rule,
  /*  359 */  rax_RegL_rule,
  /*  360 */  rRegI_rule,
  /*  361 */  immI_rule,
  /*  362 */  rRegL_rule,
  /*  363 */  immL32_rule,
  /*  364 */  rRegI_rule,
  /*  365 */  immI_rule,
  /*  366 */  _LoadI_memory__rule,
  /*  367 */  immI0_rule,
  /*  368 */  immI0_rule,
  /*  369 */  immI0_rule,
  /*  370 */  immI0_rule,
  /*  371 */  rRegI_rule,
  /*  372 */  immI_rule,
  /*  373 */  _LoadI_memory__rule,
  /*  374 */  immI0_rule,
  /*  375 */  rRegP_rule,
  /*  376 */  _LoadP_memory__rule,
  /*  377 */  _LoadP_memory__rule,
  /*  378 */  immP0_rule,
  /*  379 */  immP0_rule,
  /*  380 */  immP0_rule,
  /*  381 */  rRegN_rule,
  /*  382 */  _LoadN_memory__rule,
  /*  383 */  immN_rule,
  /*  384 */  _LoadN_memory__rule,
  /*  385 */  immNKlass_rule,
  /*  386 */  _LoadNKlass_memory__rule,
  /*  387 */  immN0_rule,
  /*  388 */  immN0_rule,
  /*  389 */  immN0_rule,
  /*  390 */  rRegL_rule,
  /*  391 */  immL32_rule,
  /*  392 */  _LoadL_memory__rule,
  /*  393 */  immL0_rule,
  /*  394 */  immL0_rule,
  /*  395 */  immL0_rule,
  /*  396 */  immL0_rule,
  /*  397 */  rRegL_rule,
  /*  398 */  immL32_rule,
  /*  399 */  _LoadL_memory__rule,
  /*  400 */  immL0_rule,
  /*  401 */  immP0_rule,
  /*  402 */  rbx_RegP_rule,
  /*  403 */  rbx_RegP_rule,
  /*  404 */  rax_RegP_rule,
  /*  405 */  0,
  /*  406 */  0,
  /*  407 */  0,
  /*  408 */  0,
  /*  409 */  0,
  /*  410 */  0,
  /*  411 */  0,
  /*  412 */  0,
  /*  413 */  0,
  /*  414 */  0,
  /*  415 */  0,
  /*  416 */  0,
  /*  417 */  0,
  /*  418 */  0,
  /*  419 */  0,
  /*  420 */  0,
  /*  421 */  0,
  /*  422 */  0,
  /*  423 */  0,
  /*  424 */  0,
  /*  425 */  0,
  /*  426 */  0,
  /*  427 */  0,
  /*  428 */  0,
  /*  429 */  0,
  /*  430 */  0,
  /*  431 */  immI_24_rule,
  /*  432 */  0,
  /*  433 */  0,
  /*  434 */  immI_24_rule,
  /*  435 */  0,
  /*  436 */  0,
  /*  437 */  0,
  /*  438 */  0,
  /*  439 */  immI_24_rule,
  /*  440 */  immI_255_rule,
  /*  441 */  immI_16_rule,
  /*  442 */  immI_65535_rule,
  /*  443 */  0,
  /*  444 */  0,
  /*  445 */  0,
  /*  446 */  0,
  /*  447 */  immL_32bits_rule,
  /*  448 */  0,
  /*  449 */  0,
  /*  450 */  0,
  /*  451 */  0,
  /*  452 */  0,
  /*  453 */  0,
  /*  454 */  0,
  /*  455 */  0,
  /*  456 */  0,
  /*  457 */  0,
  /*  458 */  0,
  /*  459 */  0,
  /*  460 */  0,
  /*  461 */  rRegI_rule,
  /*  462 */  rRegI_rule,
  /*  463 */  rRegI_rule,
  /*  464 */  rRegL_rule,
  /*  465 */  any_RegP_rule,
  /*  466 */  immP0_rule,
  /*  467 */  immP31_rule,
  /*  468 */  rRegN_rule,
  /*  469 */  rRegN_rule,
  /*  470 */  immN0_rule,
  /*  471 */  immN_rule,
  /*  472 */  immNKlass_rule,
  /*  473 */  immI0_rule,
  /*  474 */  immI_rule,
  /*  475 */  immL0_rule,
  /*  476 */  immL32_rule,
  /*  477 */  immI0_rule,
  /*  478 */  immI16_rule,
  /*  479 */  immI0_rule,
  /*  480 */  immI8_rule,
  /*  481 */  immI0_rule,
  /*  482 */  immI0_rule,
  /*  483 */  regF_rule,
  /*  484 */  immF0_rule,
  /*  485 */  immF_rule,
  /*  486 */  regD_rule,
  /*  487 */  immD0_rule,
  /*  488 */  immD0_rule,
  /*  489 */  0,
  /*  490 */  0,
  /*  491 */  0,
  /*  492 */  0,
  /*  493 */  0,
  /*  494 */  0,
  /*  495 */  0,
  /*  496 */  0,
  /*  497 */  0,
  /*  498 */  0,
  /*  499 */  0,
  /*  500 */  0,
  /*  501 */  0,
  /*  502 */  0,
  /*  503 */  0,
  /*  504 */  0,
  /*  505 */  0,
  /*  506 */  0,
  /*  507 */  0,
  /*  508 */  0,
  /*  509 */  0,
  /*  510 */  0,
  /*  511 */  0,
  /*  512 */  0,
  /*  513 */  0,
  /*  514 */  0,
  /*  515 */  0,
  /*  516 */  0,
  /*  517 */  0,
  /*  518 */  0,
  /*  519 */  0,
  /*  520 */  0,
  /*  521 */  0,
  /*  522 */  0,
  /*  523 */  0,
  /*  524 */  _Binary_rRegI_rRegI_rule,
  /*  525 */  _Binary_rRegI_rRegI_rule,
  /*  526 */  _Binary_rRegI_rRegI_rule,
  /*  527 */  _Binary_rRegI__LoadI_memory__rule,
  /*  528 */  _Binary_rRegI__LoadI_memory__rule,
  /*  529 */  _Binary_rRegI__LoadI_memory__rule,
  /*  530 */  _Binary_rRegN_rRegN_rule,
  /*  531 */  _Binary_rRegN_rRegN_rule,
  /*  532 */  _Binary_rRegN_rRegN_rule,
  /*  533 */  _Binary_rRegP_rRegP_rule,
  /*  534 */  _Binary_rRegP_rRegP_rule,
  /*  535 */  _Binary_rRegP_rRegP_rule,
  /*  536 */  _Binary_rRegL_rRegL_rule,
  /*  537 */  _Binary_rRegL__LoadL_memory__rule,
  /*  538 */  _Binary_rRegL_rRegL_rule,
  /*  539 */  _Binary_rRegL_rRegL_rule,
  /*  540 */  _Binary_rRegL__LoadL_memory__rule,
  /*  541 */  _Binary_rRegL__LoadL_memory__rule,
  /*  542 */  _Binary_regF_regF_rule,
  /*  543 */  _Binary_regF_regF_rule,
  /*  544 */  _Binary_regF_regF_rule,
  /*  545 */  _Binary_regD_regD_rule,
  /*  546 */  _Binary_regD_regD_rule,
  /*  547 */  _Binary_regD_regD_rule,
  /*  548 */  rRegI_rule,
  /*  549 */  immI_rule,
  /*  550 */  _LoadI_memory__rule,
  /*  551 */  rRegI_rule,
  /*  552 */  _AddI__LoadI_memory__rRegI_rule,
  /*  553 */  _AddI_rRegI__LoadI_memory__rule,
  /*  554 */  _AddI__LoadI_memory__immI_rule,
  /*  555 */  immI1_rule,
  /*  556 */  _AddI__LoadI_memory__immI1_rule,
  /*  557 */  immI_M1_rule,
  /*  558 */  _AddI__LoadI_memory__immI_M1_rule,
  /*  559 */  immI_rule,
  /*  560 */  rRegL_rule,
  /*  561 */  immL32_rule,
  /*  562 */  _LoadL_memory__rule,
  /*  563 */  rRegL_rule,
  /*  564 */  _AddL__LoadL_memory__rRegL_rule,
  /*  565 */  _AddL_rRegL__LoadL_memory__rule,
  /*  566 */  _AddL__LoadL_memory__immL32_rule,
  /*  567 */  immL1_rule,
  /*  568 */  _AddL__LoadL_memory__immL1_rule,
  /*  569 */  immL_M1_rule,
  /*  570 */  _AddL__LoadL_memory__immL_M1_rule,
  /*  571 */  immL32_rule,
  /*  572 */  rRegL_rule,
  /*  573 */  immL32_rule,
  /*  574 */  immL32_rule,
  /*  575 */  0,
  /*  576 */  _Binary_rax_RegP_rRegP_rule,
  /*  577 */  _Binary_rax_RegP_rRegP_rule,
  /*  578 */  _Binary_rax_RegL_rRegL_rule,
  /*  579 */  _Binary_rax_RegL_rRegL_rule,
  /*  580 */  _Binary_rax_RegI_rRegI_rule,
  /*  581 */  _Binary_rax_RegI_rRegI_rule,
  /*  582 */  _Binary_rax_RegI_rRegI_rule,
  /*  583 */  _Binary_rax_RegI_rRegI_rule,
  /*  584 */  _Binary_rax_RegI_rRegI_rule,
  /*  585 */  _Binary_rax_RegI_rRegI_rule,
  /*  586 */  _Binary_rax_RegN_rRegN_rule,
  /*  587 */  _Binary_rax_RegN_rRegN_rule,
  /*  588 */  _Binary_rax_RegI_rRegI_rule,
  /*  589 */  _Binary_rax_RegI_rRegI_rule,
  /*  590 */  _Binary_rax_RegI_rRegI_rule,
  /*  591 */  _Binary_rax_RegL_rRegL_rule,
  /*  592 */  _Binary_rax_RegN_rRegN_rule,
  /*  593 */  _Binary_rax_RegP_rRegP_rule,
  /*  594 */  immI_rule,
  /*  595 */  rRegI_rule,
  /*  596 */  immI_rule,
  /*  597 */  rRegI_rule,
  /*  598 */  immI_rule,
  /*  599 */  rRegI_rule,
  /*  600 */  immL32_rule,
  /*  601 */  rRegL_rule,
  /*  602 */  rRegI_rule,
  /*  603 */  rRegI_rule,
  /*  604 */  rRegI_rule,
  /*  605 */  rRegL_rule,
  /*  606 */  rRegP_rule,
  /*  607 */  rRegN_rule,
  /*  608 */  rRegI_rule,
  /*  609 */  immI_rule,
  /*  610 */  _LoadI_memory__rule,
  /*  611 */  _SubI__LoadI_memory__rRegI_rule,
  /*  612 */  _SubI__LoadI_memory__immI_rule,
  /*  613 */  rRegL_rule,
  /*  614 */  immL32_rule,
  /*  615 */  _LoadL_memory__rule,
  /*  616 */  _SubL__LoadL_memory__rRegL_rule,
  /*  617 */  _SubL__LoadL_memory__immL32_rule,
  /*  618 */  _SubI_immI0_rRegI_rule,
  /*  619 */  rRegI_rule,
  /*  620 */  _SubI_immI0__LoadI_memory__rule,
  /*  621 */  rRegL_rule,
  /*  622 */  _SubL_immL0__LoadL_memory__rule,
  /*  623 */  rRegI_rule,
  /*  624 */  immI_rule,
  /*  625 */  _LoadI_memory__rule,
  /*  626 */  rRegI_rule,
  /*  627 */  immI_rule,
  /*  628 */  rRegL_rule,
  /*  629 */  immL32_rule,
  /*  630 */  _LoadL_memory__rule,
  /*  631 */  rRegL_rule,
  /*  632 */  immL32_rule,
  /*  633 */  rax_RegL_rule,
  /*  634 */  no_rax_rdx_RegI_rule,
  /*  635 */  no_rax_rdx_RegL_rule,
  /*  636 */  no_rax_rdx_RegI_rule,
  /*  637 */  no_rax_rdx_RegL_rule,
  /*  638 */  0,
  /*  639 */  0,
  /*  640 */  0,
  /*  641 */  0,
  /*  642 */  immL10_rule,
  /*  643 */  no_rax_rdx_RegI_rule,
  /*  644 */  no_rax_rdx_RegL_rule,
  /*  645 */  immI1_rule,
  /*  646 */  _LShiftI__LoadI_memory__immI1_rule,
  /*  647 */  immI8_rule,
  /*  648 */  _LShiftI__LoadI_memory__immI8_rule,
  /*  649 */  rcx_RegI_rule,
  /*  650 */  _LShiftI__LoadI_memory__rcx_RegI_rule,
  /*  651 */  immI1_rule,
  /*  652 */  _RShiftI__LoadI_memory__immI1_rule,
  /*  653 */  immI8_rule,
  /*  654 */  _RShiftI__LoadI_memory__immI8_rule,
  /*  655 */  rcx_RegI_rule,
  /*  656 */  _RShiftI__LoadI_memory__rcx_RegI_rule,
  /*  657 */  immI1_rule,
  /*  658 */  _URShiftI__LoadI_memory__immI1_rule,
  /*  659 */  immI8_rule,
  /*  660 */  _URShiftI__LoadI_memory__immI8_rule,
  /*  661 */  rcx_RegI_rule,
  /*  662 */  _URShiftI__LoadI_memory__rcx_RegI_rule,
  /*  663 */  immI1_rule,
  /*  664 */  _LShiftL__LoadL_memory__immI1_rule,
  /*  665 */  immI8_rule,
  /*  666 */  _LShiftL__LoadL_memory__immI8_rule,
  /*  667 */  rcx_RegI_rule,
  /*  668 */  _LShiftL__LoadL_memory__rcx_RegI_rule,
  /*  669 */  immI1_rule,
  /*  670 */  _RShiftL__LoadL_memory__immI1_rule,
  /*  671 */  immI8_rule,
  /*  672 */  _RShiftL__LoadL_memory__immI8_rule,
  /*  673 */  rcx_RegI_rule,
  /*  674 */  _RShiftL__LoadL_memory__rcx_RegI_rule,
  /*  675 */  immI1_rule,
  /*  676 */  _URShiftL__LoadL_memory__immI1_rule,
  /*  677 */  immI8_rule,
  /*  678 */  _URShiftL__LoadL_memory__immI8_rule,
  /*  679 */  rcx_RegI_rule,
  /*  680 */  _URShiftL__LoadL_memory__rcx_RegI_rule,
  /*  681 */  immI_24_rule,
  /*  682 */  immI_16_rule,
  /*  683 */  0,
  /*  684 */  0,
  /*  685 */  0,
  /*  686 */  _URShiftI_rRegI_immI_M1_rule,
  /*  687 */  _LShiftI_rRegI_immI1_rule,
  /*  688 */  _URShiftI_rRegI_immI8_rule,
  /*  689 */  _LShiftI_rRegI_immI8_rule,
  /*  690 */  _URShiftI_no_rcx_RegI__SubI_immI0_rcx_RegI_rule,
  /*  691 */  _LShiftI_no_rcx_RegI_rcx_RegI_rule,
  /*  692 */  _URShiftI_no_rcx_RegI__SubI_immI_32_rcx_RegI_rule,
  /*  693 */  _LShiftI_no_rcx_RegI_rcx_RegI_rule,
  /*  694 */  0,
  /*  695 */  0,
  /*  696 */  0,
  /*  697 */  _LShiftI_rRegI_immI_M1_rule,
  /*  698 */  _URShiftI_rRegI_immI1_rule,
  /*  699 */  _LShiftI_rRegI_immI8_rule,
  /*  700 */  _URShiftI_rRegI_immI8_rule,
  /*  701 */  _LShiftI_no_rcx_RegI__SubI_immI0_rcx_RegI_rule,
  /*  702 */  _URShiftI_no_rcx_RegI_rcx_RegI_rule,
  /*  703 */  _LShiftI_no_rcx_RegI__SubI_immI_32_rcx_RegI_rule,
  /*  704 */  _URShiftI_no_rcx_RegI_rcx_RegI_rule,
  /*  705 */  0,
  /*  706 */  0,
  /*  707 */  0,
  /*  708 */  _URShiftL_rRegL_immI_M1_rule,
  /*  709 */  _LShiftL_rRegL_immI1_rule,
  /*  710 */  _URShiftL_rRegL_immI8_rule,
  /*  711 */  _LShiftL_rRegL_immI8_rule,
  /*  712 */  _URShiftL_no_rcx_RegL__SubI_immI0_rcx_RegI_rule,
  /*  713 */  _LShiftL_no_rcx_RegL_rcx_RegI_rule,
  /*  714 */  _URShiftL_no_rcx_RegL__SubI_immI_64_rcx_RegI_rule,
  /*  715 */  _LShiftL_no_rcx_RegL_rcx_RegI_rule,
  /*  716 */  0,
  /*  717 */  0,
  /*  718 */  0,
  /*  719 */  _LShiftL_rRegL_immI_M1_rule,
  /*  720 */  _URShiftL_rRegL_immI1_rule,
  /*  721 */  _LShiftL_rRegL_immI8_rule,
  /*  722 */  _URShiftL_rRegL_immI8_rule,
  /*  723 */  _LShiftL_no_rcx_RegL__SubI_immI0_rcx_RegI_rule,
  /*  724 */  _URShiftL_no_rcx_RegL_rcx_RegI_rule,
  /*  725 */  _LShiftL_no_rcx_RegL__SubI_immI_64_rcx_RegI_rule,
  /*  726 */  _URShiftL_no_rcx_RegL_rcx_RegI_rule,
  /*  727 */  rRegI_rule,
  /*  728 */  immI_255_rule,
  /*  729 */  0,
  /*  730 */  immI_65535_rule,
  /*  731 */  0,
  /*  732 */  immI_rule,
  /*  733 */  _LoadI_memory__rule,
  /*  734 */  rRegI_rule,
  /*  735 */  _AndI__LoadI_memory__rRegI_rule,
  /*  736 */  _AndI_rRegI__LoadI_memory__rule,
  /*  737 */  _AndI__LoadI_memory__immI_rule,
  /*  738 */  _LoadI_memory__rule,
  /*  739 */  _XorI_rRegI_immI_M1_rule,
  /*  740 */  rRegI_rule,
  /*  741 */  _XorI_rRegI_immI_M1_rule,
  /*  742 */  rRegI_rule,
  /*  743 */  _SubI_immI0_rRegI_rule,
  /*  744 */  _LoadI_memory__rule,
  /*  745 */  _SubI_immI0__LoadI_memory__rule,
  /*  746 */  _LoadI_memory__rule,
  /*  747 */  _AddI__LoadI_memory__immI_M1_rule,
  /*  748 */  rRegI_rule,
  /*  749 */  _AddI_rRegI_immI_M1_rule,
  /*  750 */  rRegI_rule,
  /*  751 */  _AddI_rRegI_immI_M1_rule,
  /*  752 */  _LoadI_memory__rule,
  /*  753 */  _AddI__LoadI_memory__immI_M1_rule,
  /*  754 */  rRegI_rule,
  /*  755 */  immI_rule,
  /*  756 */  _LoadI_memory__rule,
  /*  757 */  rRegI_rule,
  /*  758 */  _OrI__LoadI_memory__rRegI_rule,
  /*  759 */  _OrI_rRegI__LoadI_memory__rule,
  /*  760 */  _OrI__LoadI_memory__immI_rule,
  /*  761 */  rRegI_rule,
  /*  762 */  immI_M1_rule,
  /*  763 */  immI_rule,
  /*  764 */  _LoadI_memory__rule,
  /*  765 */  rRegI_rule,
  /*  766 */  _XorI__LoadI_memory__rRegI_rule,
  /*  767 */  _XorI_rRegI__LoadI_memory__rule,
  /*  768 */  _XorI__LoadI_memory__immI_rule,
  /*  769 */  rRegL_rule,
  /*  770 */  immL_255_rule,
  /*  771 */  immL_65535_rule,
  /*  772 */  immL32_rule,
  /*  773 */  _LoadL_memory__rule,
  /*  774 */  rRegL_rule,
  /*  775 */  _AndL__LoadL_memory__rRegL_rule,
  /*  776 */  _AndL_rRegL__LoadL_memory__rule,
  /*  777 */  _AndL__LoadL_memory__immL32_rule,
  /*  778 */  _LoadL_memory__rule,
  /*  779 */  _XorL_rRegL_immL_M1_rule,
  /*  780 */  rRegL_rule,
  /*  781 */  _XorL_rRegL_immL_M1_rule,
  /*  782 */  rRegL_rule,
  /*  783 */  _SubL_immL0_rRegL_rule,
  /*  784 */  _LoadL_memory__rule,
  /*  785 */  _SubL_immL0__LoadL_memory__rule,
  /*  786 */  _LoadL_memory__rule,
  /*  787 */  _AddL__LoadL_memory__immL_M1_rule,
  /*  788 */  rRegL_rule,
  /*  789 */  _AddL_rRegL_immL_M1_rule,
  /*  790 */  rRegL_rule,
  /*  791 */  _AddL_rRegL_immL_M1_rule,
  /*  792 */  _LoadL_memory__rule,
  /*  793 */  _AddL__LoadL_memory__immL_M1_rule,
  /*  794 */  rRegL_rule,
  /*  795 */  _CastP2X_any_RegP__rule,
  /*  796 */  rRegL_rule,
  /*  797 */  immL32_rule,
  /*  798 */  _LoadL_memory__rule,
  /*  799 */  rRegL_rule,
  /*  800 */  _OrL__LoadL_memory__rRegL_rule,
  /*  801 */  _OrL_rRegL__LoadL_memory__rule,
  /*  802 */  _OrL__LoadL_memory__immL32_rule,
  /*  803 */  rRegL_rule,
  /*  804 */  immL_M1_rule,
  /*  805 */  immL32_rule,
  /*  806 */  _LoadL_memory__rule,
  /*  807 */  rRegL_rule,
  /*  808 */  _XorL__LoadL_memory__rRegL_rule,
  /*  809 */  _XorL_rRegL__LoadL_memory__rule,
  /*  810 */  _XorL__LoadL_memory__immL32_rule,
  /*  811 */  0,
  /*  812 */  0,
  /*  813 */  rRegI_rule,
  /*  814 */  immI0_rule,
  /*  815 */  _SubI_rRegI_rRegI_rule,
  /*  816 */  _AndI__CmpLTMask_rRegI_rRegI_rRegI_rule,
  /*  817 */  _SubI_rRegI_rRegI_rule,
  /*  818 */  _AndI_rRegI__CmpLTMask_rRegI_rRegI_rule,
  /*  819 */  rRegI_rule,
  /*  820 */  _CmpLTMask_rRegI_rRegI_rule,
  /*  821 */  regF_rule,
  /*  822 */  _LoadF_memory__rule,
  /*  823 */  immF_rule,
  /*  824 */  regD_rule,
  /*  825 */  _LoadD_memory__rule,
  /*  826 */  immD_rule,
  /*  827 */  0,
  /*  828 */  0,
  /*  829 */  0,
  /*  830 */  0,
  /*  831 */  0,
  /*  832 */  0,
  /*  833 */  0,
  /*  834 */  0,
  /*  835 */  0,
  /*  836 */  0,
  /*  837 */  0,
  /*  838 */  0,
  /*  839 */  0,
  /*  840 */  0,
  /*  841 */  0,
  /*  842 */  0,
  /*  843 */  0,
  /*  844 */  0,
  /*  845 */  0,
  /*  846 */  immL_32bits_rule,
  /*  847 */  immL_32bits_rule,
  /*  848 */  immL_32bits_rule,
  /*  849 */  0,
  /*  850 */  0,
  /*  851 */  0,
  /*  852 */  0,
  /*  853 */  0,
  /*  854 */  rdi_RegP_rule,
  /*  855 */  rdi_RegP_rule,
  /*  856 */  _Binary_rsi_RegP_rdx_RegI_rule,
  /*  857 */  _Binary_rsi_RegP_rdx_RegI_rule,
  /*  858 */  _Binary_rsi_RegP_rdx_RegI_rule,
  /*  859 */  _Binary_rdi_RegP_rcx_RegI_rule,
  /*  860 */  _Binary_rsi_RegP_immI_rule,
  /*  861 */  _Binary_rsi_RegP_immI_rule,
  /*  862 */  _Binary_rsi_RegP_immI_rule,
  /*  863 */  _Binary_rsi_RegP_rax_RegI_rule,
  /*  864 */  _Binary_rsi_RegP_rax_RegI_rule,
  /*  865 */  _Binary_rsi_RegP_rax_RegI_rule,
  /*  866 */  rax_RegI_rule,
  /*  867 */  rcx_RegI_rule,
  /*  868 */  rsi_RegP_rule,
  /*  869 */  rsi_RegP_rule,
  /*  870 */  rcx_RegI_rule,
  /*  871 */  _Binary_rdi_RegP_rdx_RegI_rule,
  /*  872 */  _Binary_rdi_RegP_rdx_RegI_rule,
  /*  873 */  _Binary_rdi_RegP_rdx_RegI_rule,
  /*  874 */  rRegL_rule,
  /*  875 */  0,
  /*  876 */  rRegI_rule,
  /*  877 */  0,
  /*  878 */  rRegI_rule,
  /*  879 */  0,
  /*  880 */  rFlagsReg_rule,
  /*  881 */  rFlagsReg_rule,
  /*  882 */  rFlagsRegU_rule,
  /*  883 */  rFlagsRegUCF_rule,
  /*  884 */  rFlagsReg_rule,
  /*  885 */  rFlagsRegU_rule,
  /*  886 */  rFlagsRegUCF_rule,
  /*  887 */  rFlagsRegU_rule,
  /*  888 */  rFlagsRegUCF_rule,
  /*  889 */  rFlagsRegUCF_rule,
  /*  890 */  rax_RegP_rule,
  /*  891 */  0,
  /*  892 */  rFlagsReg_rule,
  /*  893 */  rFlagsReg_rule,
  /*  894 */  rFlagsRegU_rule,
  /*  895 */  rFlagsRegUCF_rule,
  /*  896 */  rFlagsRegU_rule,
  /*  897 */  rFlagsRegUCF_rule,
  /*  898 */  rFlagsRegUCF_rule,
  /*  899 */  0,
  /*  900 */  0,
  /*  901 */  0,
  /*  902 */  0,
  /*  903 */  0,
  /*  904 */  0,
  /*  905 */  0,
  /*  906 */  rbx_RegP_rule,
  /*  907 */  rax_RegP_rule,
  /*  908 */  0,
  /*  909 */  0,
  /*  910 */  0,
  /*  911 */  0,
  /*  912 */  regF_rule,
  /*  913 */  _LoadF_memory__rule,
  /*  914 */  regF_rule,
  /*  915 */  immF_rule,
  /*  916 */  regF_rule,
  /*  917 */  _LoadF_memory__rule,
  /*  918 */  regF_rule,
  /*  919 */  immF_rule,
  /*  920 */  regD_rule,
  /*  921 */  _LoadD_memory__rule,
  /*  922 */  regD_rule,
  /*  923 */  immD_rule,
  /*  924 */  regD_rule,
  /*  925 */  _LoadD_memory__rule,
  /*  926 */  regD_rule,
  /*  927 */  immD_rule,
  /*  928 */  regF_rule,
  /*  929 */  _LoadF_memory__rule,
  /*  930 */  immF_rule,
  /*  931 */  regF_rule,
  /*  932 */  _LoadF_memory__rule,
  /*  933 */  immF_rule,
  /*  934 */  regD_rule,
  /*  935 */  _LoadD_memory__rule,
  /*  936 */  immD_rule,
  /*  937 */  regD_rule,
  /*  938 */  _LoadD_memory__rule,
  /*  939 */  immD_rule,
  /*  940 */  regF_rule,
  /*  941 */  _LoadF_memory__rule,
  /*  942 */  regF_rule,
  /*  943 */  immF_rule,
  /*  944 */  regF_rule,
  /*  945 */  _LoadF_memory__rule,
  /*  946 */  regF_rule,
  /*  947 */  immF_rule,
  /*  948 */  regD_rule,
  /*  949 */  _LoadD_memory__rule,
  /*  950 */  regD_rule,
  /*  951 */  immD_rule,
  /*  952 */  regD_rule,
  /*  953 */  _LoadD_memory__rule,
  /*  954 */  regD_rule,
  /*  955 */  immD_rule,
  /*  956 */  regF_rule,
  /*  957 */  _LoadF_memory__rule,
  /*  958 */  immF_rule,
  /*  959 */  regF_rule,
  /*  960 */  _LoadF_memory__rule,
  /*  961 */  immF_rule,
  /*  962 */  regD_rule,
  /*  963 */  _LoadD_memory__rule,
  /*  964 */  immD_rule,
  /*  965 */  regD_rule,
  /*  966 */  _LoadD_memory__rule,
  /*  967 */  immD_rule,
  /*  968 */  0,
  /*  969 */  0,
  /*  970 */  0,
  /*  971 */  0,
  /*  972 */  0,
  /*  973 */  0,
  /*  974 */  0,
  /*  975 */  0,
  /*  976 */  0,
  /*  977 */  _Binary_regD_regD_rule,
  /*  978 */  _Binary_regF_regF_rule,
  /*  979 */  0,
  /*  980 */  0,
  /*  981 */  0,
  /*  982 */  0,
  /*  983 */  0,
  /*  984 */  0,
  /*  985 */  vecS_rule,
  /*  986 */  vecD_rule,
  /*  987 */  vecX_rule,
  /*  988 */  vecY_rule,
  /*  989 */  vecZ_rule,
  /*  990 */  vecZ_rule,
  /*  991 */  0,
  /*  992 */  0,
  /*  993 */  0,
  /*  994 */  0,
  /*  995 */  0,
  /*  996 */  0,
  /*  997 */  0,
  /*  998 */  0,
  /*  999 */  0,
  /* 1000 */  0,
  /* 1001 */  0,
  /* 1002 */  0,
  /* 1003 */  0,
  /* 1004 */  0,
  /* 1005 */  0,
  /* 1006 */  0,
  /* 1007 */  0,
  /* 1008 */  0,
  /* 1009 */  0,
  /* 1010 */  0,
  /* 1011 */  0,
  /* 1012 */  0,
  /* 1013 */  0,
  /* 1014 */  0,
  /* 1015 */  0,
  /* 1016 */  0,
  /* 1017 */  0,
  /* 1018 */  0,
  /* 1019 */  0,
  /* 1020 */  0,
  /* 1021 */  0,
  /* 1022 */  0,
  /* 1023 */  0,
  /* 1024 */  0,
  /* 1025 */  0,
  /* 1026 */  0,
  /* 1027 */  0,
  /* 1028 */  0,
  /* 1029 */  0,
  /* 1030 */  0,
  /* 1031 */  0,
  /* 1032 */  0,
  /* 1033 */  0,
  /* 1034 */  0,
  /* 1035 */  0,
  /* 1036 */  0,
  /* 1037 */  0,
  /* 1038 */  0,
  /* 1039 */  0,
  /* 1040 */  0,
  /* 1041 */  0,
  /* 1042 */  0,
  /* 1043 */  0,
  /* 1044 */  0,
  /* 1045 */  0,
  /* 1046 */  0,
  /* 1047 */  0,
  /* 1048 */  0,
  /* 1049 */  0,
  /* 1050 */  0,
  /* 1051 */  0,
  /* 1052 */  0,
  /* 1053 */  0,
  /* 1054 */  0,
  /* 1055 */  0,
  /* 1056 */  0,
  /* 1057 */  0,
  /* 1058 */  0,
  /* 1059 */  0,
  /* 1060 */  0,
  /* 1061 */  0,
  /* 1062 */  0,
  /* 1063 */  0,
  /* 1064 */  0,
  /* 1065 */  0,
  /* 1066 */  0,
  /* 1067 */  0,
  /* 1068 */  0,
  /* 1069 */  0,
  /* 1070 */  0,
  /* 1071 */  0,
  /* 1072 */  0,
  /* 1073 */  0,
  /* 1074 */  0,
  /* 1075 */  0,
  /* 1076 */  0,
  /* 1077 */  0,
  /* 1078 */  0,
  /* 1079 */  0,
  /* 1080 */  0,
  /* 1081 */  0,
  /* 1082 */  0,
  /* 1083 */  0,
  /* 1084 */  0,
  /* 1085 */  0,
  /* 1086 */  0,
  /* 1087 */  0,
  /* 1088 */  0,
  /* 1089 */  0,
  /* 1090 */  0,
  /* 1091 */  0,
  /* 1092 */  0,
  /* 1093 */  0,
  /* 1094 */  0,
  /* 1095 */  0,
  /* 1096 */  0,
  /* 1097 */  0,
  /* 1098 */  0,
  /* 1099 */  0,
  /* 1100 */  0,
  /* 1101 */  0,
  /* 1102 */  0,
  /* 1103 */  0,
  /* 1104 */  0,
  /* 1105 */  0,
  /* 1106 */  0,
  /* 1107 */  0,
  /* 1108 */  0,
  /* 1109 */  0,
  /* 1110 */  0,
  /* 1111 */  0,
  /* 1112 */  0,
  /* 1113 */  0,
  /* 1114 */  vecD_rule,
  /* 1115 */  vecD_rule,
  /* 1116 */  vecD_rule,
  /* 1117 */  vecX_rule,
  /* 1118 */  vecX_rule,
  /* 1119 */  vecX_rule,
  /* 1120 */  vecY_rule,
  /* 1121 */  vecY_rule,
  /* 1122 */  vecZ_rule,
  /* 1123 */  vecX_rule,
  /* 1124 */  vecY_rule,
  /* 1125 */  vecZ_rule,
  /* 1126 */  vecD_rule,
  /* 1127 */  vecD_rule,
  /* 1128 */  vecX_rule,
  /* 1129 */  vecX_rule,
  /* 1130 */  vecY_rule,
  /* 1131 */  vecZ_rule,
  /* 1132 */  vecX_rule,
  /* 1133 */  vecX_rule,
  /* 1134 */  vecY_rule,
  /* 1135 */  vecZ_rule,
  /* 1136 */  vecD_rule,
  /* 1137 */  vecD_rule,
  /* 1138 */  vecX_rule,
  /* 1139 */  vecX_rule,
  /* 1140 */  vecY_rule,
  /* 1141 */  vecZ_rule,
  /* 1142 */  vecX_rule,
  /* 1143 */  vecY_rule,
  /* 1144 */  vecZ_rule,
  /* 1145 */  vecD_rule,
  /* 1146 */  vecD_rule,
  /* 1147 */  vecX_rule,
  /* 1148 */  vecX_rule,
  /* 1149 */  vecY_rule,
  /* 1150 */  vecZ_rule,
  /* 1151 */  vecX_rule,
  /* 1152 */  vecX_rule,
  /* 1153 */  vecY_rule,
  /* 1154 */  vecZ_rule,
  /* 1155 */  vecS_rule,
  /* 1156 */  vecS_rule,
  /* 1157 */  vecS_rule,
  /* 1158 */  vecS_rule,
  /* 1159 */  _LoadVector_memory__rule,
  /* 1160 */  _LoadVector_memory__rule,
  /* 1161 */  _LoadVector_memory__rule,
  /* 1162 */  vecD_rule,
  /* 1163 */  vecD_rule,
  /* 1164 */  vecD_rule,
  /* 1165 */  vecD_rule,
  /* 1166 */  _LoadVector_memory__rule,
  /* 1167 */  _LoadVector_memory__rule,
  /* 1168 */  _LoadVector_memory__rule,
  /* 1169 */  vecX_rule,
  /* 1170 */  vecX_rule,
  /* 1171 */  vecX_rule,
  /* 1172 */  vecX_rule,
  /* 1173 */  _LoadVector_memory__rule,
  /* 1174 */  _LoadVector_memory__rule,
  /* 1175 */  _LoadVector_memory__rule,
  /* 1176 */  vecY_rule,
  /* 1177 */  vecY_rule,
  /* 1178 */  vecY_rule,
  /* 1179 */  _LoadVector_memory__rule,
  /* 1180 */  _LoadVector_memory__rule,
  /* 1181 */  _LoadVector_memory__rule,
  /* 1182 */  vecZ_rule,
  /* 1183 */  _LoadVector_memory__rule,
  /* 1184 */  vecS_rule,
  /* 1185 */  vecS_rule,
  /* 1186 */  vecS_rule,
  /* 1187 */  vecS_rule,
  /* 1188 */  _LoadVector_memory__rule,
  /* 1189 */  _LoadVector_memory__rule,
  /* 1190 */  _LoadVector_memory__rule,
  /* 1191 */  vecD_rule,
  /* 1192 */  vecD_rule,
  /* 1193 */  vecD_rule,
  /* 1194 */  vecD_rule,
  /* 1195 */  _LoadVector_memory__rule,
  /* 1196 */  _LoadVector_memory__rule,
  /* 1197 */  _LoadVector_memory__rule,
  /* 1198 */  vecX_rule,
  /* 1199 */  vecX_rule,
  /* 1200 */  vecX_rule,
  /* 1201 */  vecX_rule,
  /* 1202 */  _LoadVector_memory__rule,
  /* 1203 */  _LoadVector_memory__rule,
  /* 1204 */  _LoadVector_memory__rule,
  /* 1205 */  vecY_rule,
  /* 1206 */  vecY_rule,
  /* 1207 */  vecY_rule,
  /* 1208 */  _LoadVector_memory__rule,
  /* 1209 */  _LoadVector_memory__rule,
  /* 1210 */  _LoadVector_memory__rule,
  /* 1211 */  vecZ_rule,
  /* 1212 */  _LoadVector_memory__rule,
  /* 1213 */  vecD_rule,
  /* 1214 */  vecD_rule,
  /* 1215 */  _LoadVector_memory__rule,
  /* 1216 */  vecX_rule,
  /* 1217 */  vecX_rule,
  /* 1218 */  _LoadVector_memory__rule,
  /* 1219 */  vecY_rule,
  /* 1220 */  _LoadVector_memory__rule,
  /* 1221 */  vecZ_rule,
  /* 1222 */  _LoadVector_memory__rule,
  /* 1223 */  vecX_rule,
  /* 1224 */  vecX_rule,
  /* 1225 */  _LoadVector_memory__rule,
  /* 1226 */  vecY_rule,
  /* 1227 */  _LoadVector_memory__rule,
  /* 1228 */  vecZ_rule,
  /* 1229 */  _LoadVector_memory__rule,
  /* 1230 */  vecD_rule,
  /* 1231 */  vecD_rule,
  /* 1232 */  _LoadVector_memory__rule,
  /* 1233 */  vecX_rule,
  /* 1234 */  vecX_rule,
  /* 1235 */  _LoadVector_memory__rule,
  /* 1236 */  vecY_rule,
  /* 1237 */  _LoadVector_memory__rule,
  /* 1238 */  vecZ_rule,
  /* 1239 */  _LoadVector_memory__rule,
  /* 1240 */  vecX_rule,
  /* 1241 */  vecX_rule,
  /* 1242 */  _LoadVector_memory__rule,
  /* 1243 */  vecY_rule,
  /* 1244 */  _LoadVector_memory__rule,
  /* 1245 */  vecZ_rule,
  /* 1246 */  _LoadVector_memory__rule,
  /* 1247 */  vecS_rule,
  /* 1248 */  vecS_rule,
  /* 1249 */  vecS_rule,
  /* 1250 */  vecS_rule,
  /* 1251 */  _LoadVector_memory__rule,
  /* 1252 */  _LoadVector_memory__rule,
  /* 1253 */  _LoadVector_memory__rule,
  /* 1254 */  vecD_rule,
  /* 1255 */  vecD_rule,
  /* 1256 */  vecD_rule,
  /* 1257 */  vecD_rule,
  /* 1258 */  _LoadVector_memory__rule,
  /* 1259 */  _LoadVector_memory__rule,
  /* 1260 */  _LoadVector_memory__rule,
  /* 1261 */  vecX_rule,
  /* 1262 */  vecX_rule,
  /* 1263 */  vecX_rule,
  /* 1264 */  vecX_rule,
  /* 1265 */  _LoadVector_memory__rule,
  /* 1266 */  _LoadVector_memory__rule,
  /* 1267 */  _LoadVector_memory__rule,
  /* 1268 */  vecY_rule,
  /* 1269 */  vecY_rule,
  /* 1270 */  vecY_rule,
  /* 1271 */  _LoadVector_memory__rule,
  /* 1272 */  _LoadVector_memory__rule,
  /* 1273 */  _LoadVector_memory__rule,
  /* 1274 */  vecZ_rule,
  /* 1275 */  _LoadVector_memory__rule,
  /* 1276 */  vecS_rule,
  /* 1277 */  vecS_rule,
  /* 1278 */  vecS_rule,
  /* 1279 */  vecS_rule,
  /* 1280 */  _LoadVector_memory__rule,
  /* 1281 */  _LoadVector_memory__rule,
  /* 1282 */  _LoadVector_memory__rule,
  /* 1283 */  vecD_rule,
  /* 1284 */  vecD_rule,
  /* 1285 */  vecD_rule,
  /* 1286 */  vecD_rule,
  /* 1287 */  _LoadVector_memory__rule,
  /* 1288 */  _LoadVector_memory__rule,
  /* 1289 */  _LoadVector_memory__rule,
  /* 1290 */  vecX_rule,
  /* 1291 */  vecX_rule,
  /* 1292 */  vecX_rule,
  /* 1293 */  vecX_rule,
  /* 1294 */  _LoadVector_memory__rule,
  /* 1295 */  _LoadVector_memory__rule,
  /* 1296 */  _LoadVector_memory__rule,
  /* 1297 */  vecY_rule,
  /* 1298 */  vecY_rule,
  /* 1299 */  vecY_rule,
  /* 1300 */  _LoadVector_memory__rule,
  /* 1301 */  _LoadVector_memory__rule,
  /* 1302 */  _LoadVector_memory__rule,
  /* 1303 */  vecZ_rule,
  /* 1304 */  _LoadVector_memory__rule,
  /* 1305 */  vecD_rule,
  /* 1306 */  vecD_rule,
  /* 1307 */  _LoadVector_memory__rule,
  /* 1308 */  vecX_rule,
  /* 1309 */  vecX_rule,
  /* 1310 */  _LoadVector_memory__rule,
  /* 1311 */  vecY_rule,
  /* 1312 */  _LoadVector_memory__rule,
  /* 1313 */  vecZ_rule,
  /* 1314 */  _LoadVector_memory__rule,
  /* 1315 */  vecX_rule,
  /* 1316 */  vecX_rule,
  /* 1317 */  _LoadVector_memory__rule,
  /* 1318 */  vecY_rule,
  /* 1319 */  _LoadVector_memory__rule,
  /* 1320 */  vecZ_rule,
  /* 1321 */  _LoadVector_memory__rule,
  /* 1322 */  vecD_rule,
  /* 1323 */  vecD_rule,
  /* 1324 */  _LoadVector_memory__rule,
  /* 1325 */  vecX_rule,
  /* 1326 */  vecX_rule,
  /* 1327 */  _LoadVector_memory__rule,
  /* 1328 */  vecY_rule,
  /* 1329 */  _LoadVector_memory__rule,
  /* 1330 */  vecZ_rule,
  /* 1331 */  _LoadVector_memory__rule,
  /* 1332 */  vecX_rule,
  /* 1333 */  vecX_rule,
  /* 1334 */  _LoadVector_memory__rule,
  /* 1335 */  vecY_rule,
  /* 1336 */  _LoadVector_memory__rule,
  /* 1337 */  vecZ_rule,
  /* 1338 */  _LoadVector_memory__rule,
  /* 1339 */  vecS_rule,
  /* 1340 */  vecS_rule,
  /* 1341 */  vecS_rule,
  /* 1342 */  vecS_rule,
  /* 1343 */  _LoadVector_memory__rule,
  /* 1344 */  _LoadVector_memory__rule,
  /* 1345 */  _LoadVector_memory__rule,
  /* 1346 */  vecD_rule,
  /* 1347 */  vecD_rule,
  /* 1348 */  vecD_rule,
  /* 1349 */  vecD_rule,
  /* 1350 */  _LoadVector_memory__rule,
  /* 1351 */  _LoadVector_memory__rule,
  /* 1352 */  _LoadVector_memory__rule,
  /* 1353 */  vecX_rule,
  /* 1354 */  vecX_rule,
  /* 1355 */  vecX_rule,
  /* 1356 */  vecX_rule,
  /* 1357 */  _LoadVector_memory__rule,
  /* 1358 */  _LoadVector_memory__rule,
  /* 1359 */  _LoadVector_memory__rule,
  /* 1360 */  vecY_rule,
  /* 1361 */  vecY_rule,
  /* 1362 */  vecY_rule,
  /* 1363 */  _LoadVector_memory__rule,
  /* 1364 */  _LoadVector_memory__rule,
  /* 1365 */  _LoadVector_memory__rule,
  /* 1366 */  vecZ_rule,
  /* 1367 */  _LoadVector_memory__rule,
  /* 1368 */  vecD_rule,
  /* 1369 */  vecD_rule,
  /* 1370 */  _LoadVector_memory__rule,
  /* 1371 */  vecX_rule,
  /* 1372 */  vecX_rule,
  /* 1373 */  _LoadVector_memory__rule,
  /* 1374 */  vecX_rule,
  /* 1375 */  _LoadVector_memory__rule,
  /* 1376 */  vecY_rule,
  /* 1377 */  _LoadVector_memory__rule,
  /* 1378 */  vecZ_rule,
  /* 1379 */  _LoadVector_memory__rule,
  /* 1380 */  vecY_rule,
  /* 1381 */  _LoadVector_memory__rule,
  /* 1382 */  vecZ_rule,
  /* 1383 */  _LoadVector_memory__rule,
  /* 1384 */  vecD_rule,
  /* 1385 */  vecD_rule,
  /* 1386 */  _LoadVector_memory__rule,
  /* 1387 */  vecX_rule,
  /* 1388 */  vecX_rule,
  /* 1389 */  _LoadVector_memory__rule,
  /* 1390 */  vecY_rule,
  /* 1391 */  _LoadVector_memory__rule,
  /* 1392 */  vecZ_rule,
  /* 1393 */  _LoadVector_memory__rule,
  /* 1394 */  vecX_rule,
  /* 1395 */  vecX_rule,
  /* 1396 */  _LoadVector_memory__rule,
  /* 1397 */  vecY_rule,
  /* 1398 */  _LoadVector_memory__rule,
  /* 1399 */  vecZ_rule,
  /* 1400 */  _LoadVector_memory__rule,
  /* 1401 */  _Binary_vecY_vecY_rule,
  /* 1402 */  vecD_rule,
  /* 1403 */  vecD_rule,
  /* 1404 */  _LoadVector_memory__rule,
  /* 1405 */  vecX_rule,
  /* 1406 */  vecX_rule,
  /* 1407 */  _LoadVector_memory__rule,
  /* 1408 */  vecY_rule,
  /* 1409 */  _LoadVector_memory__rule,
  /* 1410 */  vecZ_rule,
  /* 1411 */  _LoadVector_memory__rule,
  /* 1412 */  vecX_rule,
  /* 1413 */  vecX_rule,
  /* 1414 */  _LoadVector_memory__rule,
  /* 1415 */  vecY_rule,
  /* 1416 */  _LoadVector_memory__rule,
  /* 1417 */  vecZ_rule,
  /* 1418 */  _LoadVector_memory__rule,
  /* 1419 */  vecS_rule,
  /* 1420 */  immI8_rule,
  /* 1421 */  vecS_rule,
  /* 1422 */  vecS_rule,
  /* 1423 */  vecS_rule,
  /* 1424 */  immI8_rule,
  /* 1425 */  immI8_rule,
  /* 1426 */  immI8_rule,
  /* 1427 */  vecS_rule,
  /* 1428 */  immI8_rule,
  /* 1429 */  vecS_rule,
  /* 1430 */  vecS_rule,
  /* 1431 */  vecS_rule,
  /* 1432 */  immI8_rule,
  /* 1433 */  immI8_rule,
  /* 1434 */  immI8_rule,
  /* 1435 */  vecS_rule,
  /* 1436 */  immI8_rule,
  /* 1437 */  vecS_rule,
  /* 1438 */  vecS_rule,
  /* 1439 */  vecS_rule,
  /* 1440 */  immI8_rule,
  /* 1441 */  immI8_rule,
  /* 1442 */  immI8_rule,
  /* 1443 */  vecS_rule,
  /* 1444 */  vecS_rule,
  /* 1445 */  vecS_rule,
  /* 1446 */  immI8_rule,
  /* 1447 */  immI8_rule,
  /* 1448 */  immI8_rule,
  /* 1449 */  vecS_rule,
  /* 1450 */  immI8_rule,
  /* 1451 */  vecS_rule,
  /* 1452 */  immI8_rule,
  /* 1453 */  vecS_rule,
  /* 1454 */  immI8_rule,
  /* 1455 */  vecS_rule,
  /* 1456 */  immI8_rule,
  /* 1457 */  vecS_rule,
  /* 1458 */  immI8_rule,
  /* 1459 */  vecS_rule,
  /* 1460 */  immI8_rule,
  /* 1461 */  vecS_rule,
  /* 1462 */  immI8_rule,
  /* 1463 */  vecS_rule,
  /* 1464 */  immI8_rule,
  /* 1465 */  vecS_rule,
  /* 1466 */  immI8_rule,
  /* 1467 */  vecS_rule,
  /* 1468 */  immI8_rule,
  /* 1469 */  vecS_rule,
  /* 1470 */  immI8_rule,
  /* 1471 */  vecS_rule,
  /* 1472 */  immI8_rule,
  /* 1473 */  vecS_rule,
  /* 1474 */  vecS_rule,
  /* 1475 */  vecS_rule,
  /* 1476 */  immI8_rule,
  /* 1477 */  immI8_rule,
  /* 1478 */  immI8_rule,
  /* 1479 */  vecS_rule,
  /* 1480 */  immI8_rule,
  /* 1481 */  vecS_rule,
  /* 1482 */  vecS_rule,
  /* 1483 */  vecS_rule,
  /* 1484 */  immI8_rule,
  /* 1485 */  immI8_rule,
  /* 1486 */  immI8_rule,
  /* 1487 */  vecS_rule,
  /* 1488 */  immI8_rule,
  /* 1489 */  vecS_rule,
  /* 1490 */  vecS_rule,
  /* 1491 */  vecS_rule,
  /* 1492 */  immI8_rule,
  /* 1493 */  immI8_rule,
  /* 1494 */  immI8_rule,
  /* 1495 */  vecS_rule,
  /* 1496 */  vecS_rule,
  /* 1497 */  vecS_rule,
  /* 1498 */  immI8_rule,
  /* 1499 */  immI8_rule,
  /* 1500 */  immI8_rule,
  /* 1501 */  vecS_rule,
  /* 1502 */  immI8_rule,
  /* 1503 */  vecS_rule,
  /* 1504 */  immI8_rule,
  /* 1505 */  vecS_rule,
  /* 1506 */  immI8_rule,
  /* 1507 */  vecS_rule,
  /* 1508 */  immI8_rule,
  /* 1509 */  vecS_rule,
  /* 1510 */  immI8_rule,
  /* 1511 */  vecS_rule,
  /* 1512 */  immI8_rule,
  /* 1513 */  vecS_rule,
  /* 1514 */  immI8_rule,
  /* 1515 */  vecS_rule,
  /* 1516 */  immI8_rule,
  /* 1517 */  vecS_rule,
  /* 1518 */  immI8_rule,
  /* 1519 */  vecS_rule,
  /* 1520 */  immI8_rule,
  /* 1521 */  vecS_rule,
  /* 1522 */  immI8_rule,
  /* 1523 */  vecS_rule,
  /* 1524 */  immI8_rule,
  /* 1525 */  vecS_rule,
  /* 1526 */  vecS_rule,
  /* 1527 */  vecS_rule,
  /* 1528 */  immI8_rule,
  /* 1529 */  immI8_rule,
  /* 1530 */  immI8_rule,
  /* 1531 */  vecS_rule,
  /* 1532 */  immI8_rule,
  /* 1533 */  vecS_rule,
  /* 1534 */  vecS_rule,
  /* 1535 */  vecS_rule,
  /* 1536 */  immI8_rule,
  /* 1537 */  immI8_rule,
  /* 1538 */  immI8_rule,
  /* 1539 */  vecS_rule,
  /* 1540 */  immI8_rule,
  /* 1541 */  vecS_rule,
  /* 1542 */  vecS_rule,
  /* 1543 */  vecS_rule,
  /* 1544 */  immI8_rule,
  /* 1545 */  immI8_rule,
  /* 1546 */  immI8_rule,
  /* 1547 */  vecS_rule,
  /* 1548 */  vecS_rule,
  /* 1549 */  vecS_rule,
  /* 1550 */  immI8_rule,
  /* 1551 */  immI8_rule,
  /* 1552 */  immI8_rule,
  /* 1553 */  vecS_rule,
  /* 1554 */  immI8_rule,
  /* 1555 */  vecS_rule,
  /* 1556 */  immI8_rule,
  /* 1557 */  vecS_rule,
  /* 1558 */  immI8_rule,
  /* 1559 */  vecS_rule,
  /* 1560 */  immI8_rule,
  /* 1561 */  vecS_rule,
  /* 1562 */  immI8_rule,
  /* 1563 */  vecS_rule,
  /* 1564 */  immI8_rule,
  /* 1565 */  vecS_rule,
  /* 1566 */  immI8_rule,
  /* 1567 */  vecS_rule,
  /* 1568 */  vecS_rule,
  /* 1569 */  _LoadVector_memory__rule,
  /* 1570 */  vecD_rule,
  /* 1571 */  vecD_rule,
  /* 1572 */  _LoadVector_memory__rule,
  /* 1573 */  vecX_rule,
  /* 1574 */  vecX_rule,
  /* 1575 */  _LoadVector_memory__rule,
  /* 1576 */  vecY_rule,
  /* 1577 */  _LoadVector_memory__rule,
  /* 1578 */  vecZ_rule,
  /* 1579 */  _LoadVector_memory__rule,
  /* 1580 */  vecS_rule,
  /* 1581 */  vecS_rule,
  /* 1582 */  _LoadVector_memory__rule,
  /* 1583 */  vecD_rule,
  /* 1584 */  vecD_rule,
  /* 1585 */  _LoadVector_memory__rule,
  /* 1586 */  vecX_rule,
  /* 1587 */  vecX_rule,
  /* 1588 */  _LoadVector_memory__rule,
  /* 1589 */  vecY_rule,
  /* 1590 */  _LoadVector_memory__rule,
  /* 1591 */  vecZ_rule,
  /* 1592 */  _LoadVector_memory__rule,
  /* 1593 */  vecS_rule,
  /* 1594 */  vecS_rule,
  /* 1595 */  _LoadVector_memory__rule,
  /* 1596 */  vecD_rule,
  /* 1597 */  vecD_rule,
  /* 1598 */  _LoadVector_memory__rule,
  /* 1599 */  vecX_rule,
  /* 1600 */  vecX_rule,
  /* 1601 */  _LoadVector_memory__rule,
  /* 1602 */  vecY_rule,
  /* 1603 */  _LoadVector_memory__rule,
  /* 1604 */  vecZ_rule,
  /* 1605 */  _LoadVector_memory__rule,
  // last instruction
  0 // no trailing comma
};

const char        *ruleName[] = {
  /*    0 */  "UNIVERSE",
  /*    1 */  "LABEL",
  /*    2 */  "SREGI",
  /*    3 */  "SREGP",
  /*    4 */  "SREGF",
  /*    5 */  "SREGD",
  /*    6 */  "SREGL",
  /*    7 */  "METHOD",
  /*    8 */  "IMMI",
  /*    9 */  "IMMI0",
  /*   10 */  "IMMI1",
  /*   11 */  "IMMI_M1",
  /*   12 */  "IMMI2",
  /*   13 */  "IMMI8",
  /*   14 */  "IMMI16",
  /*   15 */  "IMMU31",
  /*   16 */  "IMMI_32",
  /*   17 */  "IMMI_64",
  /*   18 */  "IMMP",
  /*   19 */  "IMMP0",
  /*   20 */  "IMMN",
  /*   21 */  "IMMNKLASS",
  /*   22 */  "IMMN0",
  /*   23 */  "IMMP31",
  /*   24 */  "IMML",
  /*   25 */  "IMML8",
  /*   26 */  "IMMUL32",
  /*   27 */  "IMML32",
  /*   28 */  "IMML0",
  /*   29 */  "IMML1",
  /*   30 */  "IMML_M1",
  /*   31 */  "IMML10",
  /*   32 */  "IMML_127",
  /*   33 */  "IMML_32BITS",
  /*   34 */  "IMMF0",
  /*   35 */  "IMMF",
  /*   36 */  "IMMD0",
  /*   37 */  "IMMD",
  /*   38 */  "IMMI_16",
  /*   39 */  "IMMI_24",
  /*   40 */  "IMMI_255",
  /*   41 */  "IMMI_65535",
  /*   42 */  "IMML_255",
  /*   43 */  "IMML_65535",
  /*   44 */  "RREGI",
  /*   45 */  "RAX_REGI",
  /*   46 */  "RBX_REGI",
  /*   47 */  "RCX_REGI",
  /*   48 */  "RDX_REGI",
  /*   49 */  "RDI_REGI",
  /*   50 */  "NO_RCX_REGI",
  /*   51 */  "NO_RAX_RDX_REGI",
  /*   52 */  "ANY_REGP",
  /*   53 */  "RREGP",
  /*   54 */  "RREGN",
  /*   55 */  "NO_RAX_REGP",
  /*   56 */  "NO_RBP_REGP",
  /*   57 */  "NO_RAX_RBX_REGP",
  /*   58 */  "RAX_REGP",
  /*   59 */  "RAX_REGN",
  /*   60 */  "RBX_REGP",
  /*   61 */  "RSI_REGP",
  /*   62 */  "RDI_REGP",
  /*   63 */  "R15_REGP",
  /*   64 */  "RREGL",
  /*   65 */  "NO_RAX_RDX_REGL",
  /*   66 */  "NO_RAX_REGL",
  /*   67 */  "NO_RCX_REGL",
  /*   68 */  "RAX_REGL",
  /*   69 */  "RCX_REGL",
  /*   70 */  "RDX_REGL",
  /*   71 */  "RFLAGSREG",
  /*   72 */  "RFLAGSREGU",
  /*   73 */  "RFLAGSREGUCF",
  /*   74 */  "REGF",
  /*   75 */  "REGD",
  /*   76 */  "VECS",
  /*   77 */  "VECD",
  /*   78 */  "VECX",
  /*   79 */  "VECY",
  /*   80 */  "INDIRECT",
  /*   81 */  "INDOFFSET8",
  /*   82 */  "INDOFFSET32",
  /*   83 */  "INDINDEXOFFSET",
  /*   84 */  "INDINDEX",
  /*   85 */  "INDINDEXSCALE",
  /*   86 */  "INDPOSINDEXSCALE",
  /*   87 */  "INDINDEXSCALEOFFSET",
  /*   88 */  "INDPOSINDEXOFFSET",
  /*   89 */  "INDPOSINDEXSCALEOFFSET",
  /*   90 */  "INDCOMPRESSEDOOPOFFSET",
  /*   91 */  "INDIRECTNARROW",
  /*   92 */  "INDOFFSET8NARROW",
  /*   93 */  "INDOFFSET32NARROW",
  /*   94 */  "INDINDEXOFFSETNARROW",
  /*   95 */  "INDINDEXNARROW",
  /*   96 */  "INDINDEXSCALENARROW",
  /*   97 */  "INDINDEXSCALEOFFSETNARROW",
  /*   98 */  "INDPOSINDEXOFFSETNARROW",
  /*   99 */  "INDPOSINDEXSCALEOFFSETNARROW",
  /*  100 */  "STACKSLOTP",
  /*  101 */  "STACKSLOTI",
  /*  102 */  "STACKSLOTF",
  /*  103 */  "STACKSLOTD",
  /*  104 */  "STACKSLOTL",
  /*  105 */  "CMPOP",
  /*  106 */  "CMPOPU",
  /*  107 */  "CMPOPUCF",
  /*  108 */  "CMPOPUCF2",
  /*  109 */  "VECZ",
  /*  110 */  "CMPOP_VCMPPD",
  // last operand
  /*  111 */  "MEMORY",
  // last operand class
  /*  112 */  "_AddP_any_RegP_rRegL",
  /*  113 */  "_LShiftL_rRegL_immI2",
  /*  114 */  "_ConvI2L_rRegI_",
  /*  115 */  "_LShiftL__ConvI2L_rRegI__immI2",
  /*  116 */  "_AddP_any_RegP__LShiftL_rRegL_immI2",
  /*  117 */  "_AddP_any_RegP__ConvI2L_rRegI_",
  /*  118 */  "_AddP_any_RegP__LShiftL__ConvI2L_rRegI__immI2",
  /*  119 */  "_DecodeN_rRegN_",
  /*  120 */  "_AddP__DecodeN_rRegN__rRegL",
  /*  121 */  "_AddP__DecodeN_rRegN___LShiftL_rRegL_immI2",
  /*  122 */  "_AddP__DecodeN_rRegN___ConvI2L_rRegI_",
  /*  123 */  "_AddP__DecodeN_rRegN___LShiftL__ConvI2L_rRegI__immI2",
  /*  124 */  "_LoadB_memory_",
  /*  125 */  "_LoadUB_memory_",
  /*  126 */  "_AndI__LoadUB_memory__immI",
  /*  127 */  "_LoadS_memory_",
  /*  128 */  "_LShiftI__LoadS_memory__immI_24",
  /*  129 */  "_LoadUS_memory_",
  /*  130 */  "_LShiftI__LoadUS_memory__immI_24",
  /*  131 */  "_AndI__LoadUS_memory__immI_255",
  /*  132 */  "_AndI__LoadUS_memory__immI",
  /*  133 */  "_LoadI_memory_",
  /*  134 */  "_LShiftI__LoadI_memory__immI_24",
  /*  135 */  "_LShiftI__LoadI_memory__immI_16",
  /*  136 */  "_AndI__LoadI_memory__immI_255",
  /*  137 */  "_AndI__LoadI_memory__immI_65535",
  /*  138 */  "_AndI__LoadI_memory__immU31",
  /*  139 */  "_ConvI2L__LoadI_memory__",
  /*  140 */  "_LoadL_memory_",
  /*  141 */  "_CastP2X_rRegP_",
  /*  142 */  "_CastP2X__DecodeN_rRegN__",
  /*  143 */  "_AddL__LShiftL_rRegL_immI2_immL32",
  /*  144 */  "_Binary_cmpOp_rFlagsReg",
  /*  145 */  "_Binary_rRegI_rRegI",
  /*  146 */  "_Binary_cmpOpU_rFlagsRegU",
  /*  147 */  "_Binary_cmpOpUCF_rFlagsRegUCF",
  /*  148 */  "_Binary_rRegI__LoadI_memory_",
  /*  149 */  "_Binary_rRegN_rRegN",
  /*  150 */  "_Binary_rRegP_rRegP",
  /*  151 */  "_Binary_rRegL_rRegL",
  /*  152 */  "_Binary_rRegL__LoadL_memory_",
  /*  153 */  "_Binary_regF_regF",
  /*  154 */  "_Binary_regD_regD",
  /*  155 */  "_AddI__LoadI_memory__rRegI",
  /*  156 */  "_AddI_rRegI__LoadI_memory_",
  /*  157 */  "_AddI__LoadI_memory__immI",
  /*  158 */  "_AddI__LoadI_memory__immI1",
  /*  159 */  "_AddI__LoadI_memory__immI_M1",
  /*  160 */  "_AddL__LoadL_memory__rRegL",
  /*  161 */  "_AddL_rRegL__LoadL_memory_",
  /*  162 */  "_AddL__LoadL_memory__immL32",
  /*  163 */  "_AddL__LoadL_memory__immL1",
  /*  164 */  "_AddL__LoadL_memory__immL_M1",
  /*  165 */  "_Binary_rax_RegP_rRegP",
  /*  166 */  "_Binary_rax_RegI_rRegI",
  /*  167 */  "_Binary_rax_RegL_rRegL",
  /*  168 */  "_Binary_rax_RegN_rRegN",
  /*  169 */  "_SubI__LoadI_memory__rRegI",
  /*  170 */  "_SubI__LoadI_memory__immI",
  /*  171 */  "_SubL__LoadL_memory__rRegL",
  /*  172 */  "_SubL__LoadL_memory__immL32",
  /*  173 */  "_SubI_immI0_rRegI",
  /*  174 */  "_SubI_immI0__LoadI_memory_",
  /*  175 */  "_SubL_immL0__LoadL_memory_",
  /*  176 */  "_LShiftI__LoadI_memory__immI1",
  /*  177 */  "_LShiftI__LoadI_memory__immI8",
  /*  178 */  "_LShiftI__LoadI_memory__rcx_RegI",
  /*  179 */  "_RShiftI__LoadI_memory__immI1",
  /*  180 */  "_RShiftI__LoadI_memory__immI8",
  /*  181 */  "_RShiftI__LoadI_memory__rcx_RegI",
  /*  182 */  "_URShiftI__LoadI_memory__immI1",
  /*  183 */  "_URShiftI__LoadI_memory__immI8",
  /*  184 */  "_URShiftI__LoadI_memory__rcx_RegI",
  /*  185 */  "_LShiftL__LoadL_memory__immI1",
  /*  186 */  "_LShiftL__LoadL_memory__immI8",
  /*  187 */  "_LShiftL__LoadL_memory__rcx_RegI",
  /*  188 */  "_RShiftL__LoadL_memory__immI1",
  /*  189 */  "_RShiftL__LoadL_memory__immI8",
  /*  190 */  "_RShiftL__LoadL_memory__rcx_RegI",
  /*  191 */  "_URShiftL__LoadL_memory__immI1",
  /*  192 */  "_URShiftL__LoadL_memory__immI8",
  /*  193 */  "_URShiftL__LoadL_memory__rcx_RegI",
  /*  194 */  "_LShiftI_rRegI_immI_24",
  /*  195 */  "_LShiftI_rRegI_immI_16",
  /*  196 */  "_LShiftI_rRegI_immI1",
  /*  197 */  "_URShiftI_rRegI_immI_M1",
  /*  198 */  "_LShiftI_rRegI_immI8",
  /*  199 */  "_URShiftI_rRegI_immI8",
  /*  200 */  "_LShiftI_no_rcx_RegI_rcx_RegI",
  /*  201 */  "_SubI_immI0_rcx_RegI",
  /*  202 */  "_URShiftI_no_rcx_RegI__SubI_immI0_rcx_RegI",
  /*  203 */  "_SubI_immI_32_rcx_RegI",
  /*  204 */  "_URShiftI_no_rcx_RegI__SubI_immI_32_rcx_RegI",
  /*  205 */  "_URShiftI_rRegI_immI1",
  /*  206 */  "_LShiftI_rRegI_immI_M1",
  /*  207 */  "_URShiftI_no_rcx_RegI_rcx_RegI",
  /*  208 */  "_LShiftI_no_rcx_RegI__SubI_immI0_rcx_RegI",
  /*  209 */  "_LShiftI_no_rcx_RegI__SubI_immI_32_rcx_RegI",
  /*  210 */  "_LShiftL_rRegL_immI1",
  /*  211 */  "_URShiftL_rRegL_immI_M1",
  /*  212 */  "_LShiftL_rRegL_immI8",
  /*  213 */  "_URShiftL_rRegL_immI8",
  /*  214 */  "_LShiftL_no_rcx_RegL_rcx_RegI",
  /*  215 */  "_URShiftL_no_rcx_RegL__SubI_immI0_rcx_RegI",
  /*  216 */  "_SubI_immI_64_rcx_RegI",
  /*  217 */  "_URShiftL_no_rcx_RegL__SubI_immI_64_rcx_RegI",
  /*  218 */  "_URShiftL_rRegL_immI1",
  /*  219 */  "_LShiftL_rRegL_immI_M1",
  /*  220 */  "_URShiftL_no_rcx_RegL_rcx_RegI",
  /*  221 */  "_LShiftL_no_rcx_RegL__SubI_immI0_rcx_RegI",
  /*  222 */  "_LShiftL_no_rcx_RegL__SubI_immI_64_rcx_RegI",
  /*  223 */  "_AndI_rRegI_immI_255",
  /*  224 */  "_AndI_rRegI_immI_65535",
  /*  225 */  "_AndI__LoadI_memory__rRegI",
  /*  226 */  "_AndI_rRegI__LoadI_memory_",
  /*  227 */  "_AndI__LoadI_memory__immI",
  /*  228 */  "_XorI_rRegI_immI_M1",
  /*  229 */  "_AddI_rRegI_immI_M1",
  /*  230 */  "_OrI__LoadI_memory__rRegI",
  /*  231 */  "_OrI_rRegI__LoadI_memory_",
  /*  232 */  "_OrI__LoadI_memory__immI",
  /*  233 */  "_XorI__LoadI_memory__rRegI",
  /*  234 */  "_XorI_rRegI__LoadI_memory_",
  /*  235 */  "_XorI__LoadI_memory__immI",
  /*  236 */  "_AndL__LoadL_memory__rRegL",
  /*  237 */  "_AndL_rRegL__LoadL_memory_",
  /*  238 */  "_AndL__LoadL_memory__immL32",
  /*  239 */  "_XorL_rRegL_immL_M1",
  /*  240 */  "_SubL_immL0_rRegL",
  /*  241 */  "_AddL_rRegL_immL_M1",
  /*  242 */  "_CastP2X_any_RegP_",
  /*  243 */  "_OrL__LoadL_memory__rRegL",
  /*  244 */  "_OrL_rRegL__LoadL_memory_",
  /*  245 */  "_OrL__LoadL_memory__immL32",
  /*  246 */  "_XorL__LoadL_memory__rRegL",
  /*  247 */  "_XorL_rRegL__LoadL_memory_",
  /*  248 */  "_XorL__LoadL_memory__immL32",
  /*  249 */  "_CmpLTMask_rRegI_rRegI",
  /*  250 */  "_AndI__CmpLTMask_rRegI_rRegI_rRegI",
  /*  251 */  "_SubI_rRegI_rRegI",
  /*  252 */  "_AndI_rRegI__CmpLTMask_rRegI_rRegI",
  /*  253 */  "_LoadF_memory_",
  /*  254 */  "_LoadD_memory_",
  /*  255 */  "_Binary_rdi_RegP_rcx_RegI",
  /*  256 */  "_Binary_rsi_RegP_rdx_RegI",
  /*  257 */  "_Binary_rdi_RegP_rdx_RegI",
  /*  258 */  "_Binary_rsi_RegP_immI",
  /*  259 */  "_Binary_rsi_RegP_rax_RegI",
  /*  260 */  "_Binary_rdi_RegP_rsi_RegP",
  /*  261 */  "_AndI_rRegI_immI",
  /*  262 */  "_LoadP_memory_",
  /*  263 */  "_LoadN_memory_",
  /*  264 */  "_LoadNKlass_memory_",
  /*  265 */  "_AndL_rRegL_immL32",
  /*  266 */  "_PartialSubtypeCheck_rsi_RegP_rax_RegP",
  /*  267 */  "_ConvF2D_regF_",
  /*  268 */  "_SqrtD__ConvF2D_regF__",
  /*  269 */  "_ConvF2D__LoadF_memory__",
  /*  270 */  "_SqrtD__ConvF2D__LoadF_memory___",
  /*  271 */  "_ConvF2D_immF_",
  /*  272 */  "_SqrtD__ConvF2D_immF__",
  /*  273 */  "_LoadVector_memory_",
  /*  274 */  "_Binary_cmpOp_vcmppd_immI8",
  /*  275 */  "_Binary_vecY_vecY",
  // last internally defined operand
  /*  276 */  "storeSSI",
  /*  277 */  "storeSSL",
  /*  278 */  "storeSSP",
  /*  279 */  "storeSSF",
  /*  280 */  "storeSSD",
  /*  281 */  "leaP8",
  /*  282 */  "leaP32",
  /*  283 */  "leaPIdxOff",
  /*  284 */  "leaPIdxScale",
  /*  285 */  "leaPPosIdxScale",
  /*  286 */  "leaPIdxScaleOff",
  /*  287 */  "leaPPosIdxOff",
  /*  288 */  "leaPPosIdxScaleOff",
  /*  289 */  "leaPCompressedOopOffset",
  /*  290 */  "leaP8Narrow",
  /*  291 */  "leaP32Narrow",
  /*  292 */  "leaPIdxOffNarrow",
  /*  293 */  "leaPIdxScaleNarrow",
  /*  294 */  "leaPIdxScaleOffNarrow",
  /*  295 */  "leaPPosIdxOffNarrow",
  /*  296 */  "leaPPosIdxScaleOffNarrow",
  /*  297 */  "loadConI",
  /*  298 */  "loadConI0",
  /*  299 */  "loadConL",
  /*  300 */  "loadConL0",
  /*  301 */  "loadConUL32",
  /*  302 */  "loadConL32",
  /*  303 */  "loadConP",
  /*  304 */  "loadConP0",
  /*  305 */  "loadConP31",
  /*  306 */  "loadConF",
  /*  307 */  "loadConN0",
  /*  308 */  "loadConN",
  /*  309 */  "loadConNKlass",
  /*  310 */  "loadConF0",
  /*  311 */  "loadConD",
  /*  312 */  "loadConD0",
  /*  313 */  "loadSSI",
  /*  314 */  "loadSSL",
  /*  315 */  "loadSSP",
  /*  316 */  "loadSSF",
  /*  317 */  "loadSSD",
  /*  318 */  "membar_volatile",
  /*  319 */  "castX2P",
  /*  320 */  "castP2X",
  /*  321 */  "checkCastPP",
  /*  322 */  "castPP",
  /*  323 */  "castII",
  /*  324 */  "storePConditional",
  /*  325 */  "storeIConditional",
  /*  326 */  "storeLConditional",
  /*  327 */  "cmpF_cc_reg",
  /*  328 */  "cmpF_cc_reg_CF",
  /*  329 */  "cmpF_cc_mem",
  /*  330 */  "cmpF_cc_memCF",
  /*  331 */  "cmpF_cc_imm",
  /*  332 */  "cmpF_cc_immCF",
  /*  333 */  "cmpD_cc_reg",
  /*  334 */  "cmpD_cc_reg_CF",
  /*  335 */  "cmpD_cc_mem",
  /*  336 */  "cmpD_cc_memCF",
  /*  337 */  "cmpD_cc_imm",
  /*  338 */  "cmpD_cc_immCF",
  /*  339 */  "roundFloat_nop",
  /*  340 */  "roundDouble_nop",
  /*  341 */  "MoveF2I_stack_reg",
  /*  342 */  "MoveI2F_stack_reg",
  /*  343 */  "MoveD2L_stack_reg",
  /*  344 */  "MoveL2D_stack_reg_partial",
  /*  345 */  "MoveL2D_stack_reg",
  /*  346 */  "MoveF2I_reg_reg",
  /*  347 */  "MoveD2L_reg_reg",
  /*  348 */  "MoveI2F_reg_reg",
  /*  349 */  "MoveL2D_reg_reg",
  /*  350 */  "overflowAddI_rReg",
  /*  351 */  "overflowAddI_rReg_imm",
  /*  352 */  "overflowAddL_rReg",
  /*  353 */  "overflowAddL_rReg_imm",
  /*  354 */  "overflowSubI_rReg",
  /*  355 */  "overflowSubI_rReg_imm",
  /*  356 */  "overflowSubL_rReg",
  /*  357 */  "overflowSubL_rReg_imm",
  /*  358 */  "overflowNegI_rReg",
  /*  359 */  "overflowNegL_rReg",
  /*  360 */  "overflowMulI_rReg",
  /*  361 */  "overflowMulI_rReg_imm",
  /*  362 */  "overflowMulL_rReg",
  /*  363 */  "overflowMulL_rReg_imm",
  /*  364 */  "compI_rReg",
  /*  365 */  "compI_rReg_imm",
  /*  366 */  "compI_rReg_mem",
  /*  367 */  "testI_reg",
  /*  368 */  "testI_reg_imm",
  /*  369 */  "testI_reg_mem",
  /*  370 */  "testI_reg_mem_0",
  /*  371 */  "compU_rReg",
  /*  372 */  "compU_rReg_imm",
  /*  373 */  "compU_rReg_mem",
  /*  374 */  "testU_reg",
  /*  375 */  "compP_rReg",
  /*  376 */  "compP_rReg_mem",
  /*  377 */  "compP_mem_rReg",
  /*  378 */  "testP_reg",
  /*  379 */  "testP_mem",
  /*  380 */  "testP_mem_reg0",
  /*  381 */  "compN_rReg",
  /*  382 */  "compN_rReg_mem",
  /*  383 */  "compN_rReg_imm",
  /*  384 */  "compN_mem_imm",
  /*  385 */  "compN_rReg_imm_klass",
  /*  386 */  "compN_mem_imm_klass",
  /*  387 */  "testN_reg",
  /*  388 */  "testN_mem",
  /*  389 */  "testN_mem_reg0",
  /*  390 */  "compL_rReg",
  /*  391 */  "compL_rReg_imm",
  /*  392 */  "compL_rReg_mem",
  /*  393 */  "testL_reg",
  /*  394 */  "testL_reg_imm",
  /*  395 */  "testL_reg_mem",
  /*  396 */  "testL_reg_mem_0",
  /*  397 */  "compUL_rReg",
  /*  398 */  "compUL_rReg_imm",
  /*  399 */  "compUL_rReg_mem",
  /*  400 */  "testUL_reg",
  /*  401 */  "partialSubtypeCheck_vs_Zero",
  /*  402 */  "cmpFastLockRTM",
  /*  403 */  "cmpFastLock",
  /*  404 */  "cmpFastUnlock",
  /*  405 */  "safePoint_poll",
  /*  406 */  "tlsLoadP",
  /*  407 */  "absF_reg",
  /*  408 */  "absF_reg_reg",
  /*  409 */  "absF_reg_reg_evex",
  /*  410 */  "absD_reg",
  /*  411 */  "absD_reg_reg",
  /*  412 */  "absD_reg_reg_evex",
  /*  413 */  "negF_reg",
  /*  414 */  "negF_reg_reg",
  /*  415 */  "negD_reg",
  /*  416 */  "negD_reg_reg",
  /*  417 */  "vshiftcnt",
  /*  418 */  "vshiftcnt_0",
  /*  419 */  "vsqrt2D_reg",
  /*  420 */  "vsqrt2D_mem",
  /*  421 */  "vsqrt4D_reg",
  /*  422 */  "vsqrt4D_mem",
  /*  423 */  "vsqrt8D_reg",
  /*  424 */  "vsqrt8D_mem",
  /*  425 */  "loadB",
  /*  426 */  "loadB2L",
  /*  427 */  "loadUB",
  /*  428 */  "loadUB2L",
  /*  429 */  "loadUB2L_immI",
  /*  430 */  "loadS",
  /*  431 */  "loadS2B",
  /*  432 */  "loadS2L",
  /*  433 */  "loadUS",
  /*  434 */  "loadUS2B",
  /*  435 */  "loadUS2L",
  /*  436 */  "loadUS2L_immI_255",
  /*  437 */  "loadUS2L_immI",
  /*  438 */  "loadI",
  /*  439 */  "loadI2B",
  /*  440 */  "loadI2UB",
  /*  441 */  "loadI2S",
  /*  442 */  "loadI2US",
  /*  443 */  "loadI2L",
  /*  444 */  "loadI2L_immI_255",
  /*  445 */  "loadI2L_immI_65535",
  /*  446 */  "loadI2L_immU31",
  /*  447 */  "loadUI2L",
  /*  448 */  "loadL",
  /*  449 */  "loadRange",
  /*  450 */  "loadP",
  /*  451 */  "loadN",
  /*  452 */  "loadKlass",
  /*  453 */  "loadNKlass",
  /*  454 */  "loadF",
  /*  455 */  "loadD_partial",
  /*  456 */  "loadD",
  /*  457 */  "prefetchAlloc",
  /*  458 */  "prefetchAllocNTA",
  /*  459 */  "prefetchAllocT0",
  /*  460 */  "prefetchAllocT2",
  /*  461 */  "storeB",
  /*  462 */  "storeC",
  /*  463 */  "storeI",
  /*  464 */  "storeL",
  /*  465 */  "storeP",
  /*  466 */  "storeImmP0",
  /*  467 */  "storeImmP",
  /*  468 */  "storeN",
  /*  469 */  "storeNKlass",
  /*  470 */  "storeImmN0",
  /*  471 */  "storeImmN",
  /*  472 */  "storeImmNKlass",
  /*  473 */  "storeImmI0",
  /*  474 */  "storeImmI",
  /*  475 */  "storeImmL0",
  /*  476 */  "storeImmL",
  /*  477 */  "storeImmC0",
  /*  478 */  "storeImmI16",
  /*  479 */  "storeImmB0",
  /*  480 */  "storeImmB",
  /*  481 */  "storeImmCM0_reg",
  /*  482 */  "storeImmCM0",
  /*  483 */  "storeF",
  /*  484 */  "storeF0",
  /*  485 */  "storeF_imm",
  /*  486 */  "storeD",
  /*  487 */  "storeD0_imm",
  /*  488 */  "storeD0",
  /*  489 */  "bytes_reverse_int",
  /*  490 */  "bytes_reverse_long",
  /*  491 */  "bytes_reverse_unsigned_short",
  /*  492 */  "bytes_reverse_short",
  /*  493 */  "countLeadingZerosI",
  /*  494 */  "countLeadingZerosI_bsr",
  /*  495 */  "countLeadingZerosL",
  /*  496 */  "countLeadingZerosL_bsr",
  /*  497 */  "countTrailingZerosI",
  /*  498 */  "countTrailingZerosI_bsf",
  /*  499 */  "countTrailingZerosL",
  /*  500 */  "countTrailingZerosL_bsf",
  /*  501 */  "popCountI",
  /*  502 */  "popCountI_mem",
  /*  503 */  "popCountL",
  /*  504 */  "popCountL_mem",
  /*  505 */  "membar_acquire",
  /*  506 */  "membar_acquire_0",
  /*  507 */  "membar_acquire_lock",
  /*  508 */  "membar_release",
  /*  509 */  "membar_release_0",
  /*  510 */  "membar_release_lock",
  /*  511 */  "unnecessary_membar_volatile",
  /*  512 */  "membar_storestore",
  /*  513 */  "convP2I",
  /*  514 */  "convN2I",
  /*  515 */  "encodeHeapOop",
  /*  516 */  "encodeHeapOop_not_null",
  /*  517 */  "decodeHeapOop",
  /*  518 */  "decodeHeapOop_not_null",
  /*  519 */  "encodeKlass_not_null",
  /*  520 */  "decodeKlass_not_null",
  /*  521 */  "jumpXtnd_offset",
  /*  522 */  "jumpXtnd_addr",
  /*  523 */  "jumpXtnd",
  /*  524 */  "cmovI_reg",
  /*  525 */  "cmovI_regU",
  /*  526 */  "cmovI_regUCF",
  /*  527 */  "cmovI_mem",
  /*  528 */  "cmovI_memU",
  /*  529 */  "cmovI_memUCF",
  /*  530 */  "cmovN_reg",
  /*  531 */  "cmovN_regU",
  /*  532 */  "cmovN_regUCF",
  /*  533 */  "cmovP_reg",
  /*  534 */  "cmovP_regU",
  /*  535 */  "cmovP_regUCF",
  /*  536 */  "cmovL_reg",
  /*  537 */  "cmovL_mem",
  /*  538 */  "cmovL_regU",
  /*  539 */  "cmovL_regUCF",
  /*  540 */  "cmovL_memU",
  /*  541 */  "cmovL_memUCF",
  /*  542 */  "cmovF_reg",
  /*  543 */  "cmovF_regU",
  /*  544 */  "cmovF_regUCF",
  /*  545 */  "cmovD_reg",
  /*  546 */  "cmovD_regU",
  /*  547 */  "cmovD_regUCF",
  /*  548 */  "addI_rReg",
  /*  549 */  "addI_rReg_imm",
  /*  550 */  "addI_rReg_mem",
  /*  551 */  "addI_rReg_mem_0",
  /*  552 */  "addI_mem_rReg",
  /*  553 */  "addI_mem_rReg_0",
  /*  554 */  "addI_mem_imm",
  /*  555 */  "incI_rReg",
  /*  556 */  "incI_mem",
  /*  557 */  "decI_rReg",
  /*  558 */  "decI_mem",
  /*  559 */  "leaI_rReg_immI",
  /*  560 */  "addL_rReg",
  /*  561 */  "addL_rReg_imm",
  /*  562 */  "addL_rReg_mem",
  /*  563 */  "addL_rReg_mem_0",
  /*  564 */  "addL_mem_rReg",
  /*  565 */  "addL_mem_rReg_0",
  /*  566 */  "addL_mem_imm",
  /*  567 */  "incL_rReg",
  /*  568 */  "incL_mem",
  /*  569 */  "decL_rReg",
  /*  570 */  "decL_mem",
  /*  571 */  "leaL_rReg_immL",
  /*  572 */  "addP_rReg",
  /*  573 */  "addP_rReg_imm",
  /*  574 */  "leaP_rReg_imm",
  /*  575 */  "loadPLocked",
  /*  576 */  "compareAndSwapP",
  /*  577 */  "compareAndSwapP_0",
  /*  578 */  "compareAndSwapL",
  /*  579 */  "compareAndSwapL_0",
  /*  580 */  "compareAndSwapI",
  /*  581 */  "compareAndSwapI_0",
  /*  582 */  "compareAndSwapB",
  /*  583 */  "compareAndSwapB_0",
  /*  584 */  "compareAndSwapS",
  /*  585 */  "compareAndSwapS_0",
  /*  586 */  "compareAndSwapN",
  /*  587 */  "compareAndSwapN_0",
  /*  588 */  "compareAndExchangeB",
  /*  589 */  "compareAndExchangeS",
  /*  590 */  "compareAndExchangeI",
  /*  591 */  "compareAndExchangeL",
  /*  592 */  "compareAndExchangeN",
  /*  593 */  "compareAndExchangeP",
  /*  594 */  "xaddB_no_res",
  /*  595 */  "xaddB",
  /*  596 */  "xaddS_no_res",
  /*  597 */  "xaddS",
  /*  598 */  "xaddI_no_res",
  /*  599 */  "xaddI",
  /*  600 */  "xaddL_no_res",
  /*  601 */  "xaddL",
  /*  602 */  "xchgB",
  /*  603 */  "xchgS",
  /*  604 */  "xchgI",
  /*  605 */  "xchgL",
  /*  606 */  "xchgP",
  /*  607 */  "xchgN",
  /*  608 */  "subI_rReg",
  /*  609 */  "subI_rReg_imm",
  /*  610 */  "subI_rReg_mem",
  /*  611 */  "subI_mem_rReg",
  /*  612 */  "subI_mem_imm",
  /*  613 */  "subL_rReg",
  /*  614 */  "subL_rReg_imm",
  /*  615 */  "subL_rReg_mem",
  /*  616 */  "subL_mem_rReg",
  /*  617 */  "subL_mem_imm",
  /*  618 */  "subP_rReg",
  /*  619 */  "negI_rReg",
  /*  620 */  "negI_mem",
  /*  621 */  "negL_rReg",
  /*  622 */  "negL_mem",
  /*  623 */  "mulI_rReg",
  /*  624 */  "mulI_rReg_imm",
  /*  625 */  "mulI_mem",
  /*  626 */  "mulI_mem_0",
  /*  627 */  "mulI_mem_imm",
  /*  628 */  "mulL_rReg",
  /*  629 */  "mulL_rReg_imm",
  /*  630 */  "mulL_mem",
  /*  631 */  "mulL_mem_0",
  /*  632 */  "mulL_mem_imm",
  /*  633 */  "mulHiL_rReg",
  /*  634 */  "divI_rReg",
  /*  635 */  "divL_rReg",
  /*  636 */  "divModI_rReg_divmod",
  /*  637 */  "divModL_rReg_divmod",
  /*  638 */  "loadConL_0x6666666666666667",
  /*  639 */  "mul_hi",
  /*  640 */  "sarL_rReg_63",
  /*  641 */  "sarL_rReg_2",
  /*  642 */  "divL_10",
  /*  643 */  "modI_rReg",
  /*  644 */  "modL_rReg",
  /*  645 */  "salI_rReg_1",
  /*  646 */  "salI_mem_1",
  /*  647 */  "salI_rReg_imm",
  /*  648 */  "salI_mem_imm",
  /*  649 */  "salI_rReg_CL",
  /*  650 */  "salI_mem_CL",
  /*  651 */  "sarI_rReg_1",
  /*  652 */  "sarI_mem_1",
  /*  653 */  "sarI_rReg_imm",
  /*  654 */  "sarI_mem_imm",
  /*  655 */  "sarI_rReg_CL",
  /*  656 */  "sarI_mem_CL",
  /*  657 */  "shrI_rReg_1",
  /*  658 */  "shrI_mem_1",
  /*  659 */  "shrI_rReg_imm",
  /*  660 */  "shrI_mem_imm",
  /*  661 */  "shrI_rReg_CL",
  /*  662 */  "shrI_mem_CL",
  /*  663 */  "salL_rReg_1",
  /*  664 */  "salL_mem_1",
  /*  665 */  "salL_rReg_imm",
  /*  666 */  "salL_mem_imm",
  /*  667 */  "salL_rReg_CL",
  /*  668 */  "salL_mem_CL",
  /*  669 */  "sarL_rReg_1",
  /*  670 */  "sarL_mem_1",
  /*  671 */  "sarL_rReg_imm",
  /*  672 */  "sarL_mem_imm",
  /*  673 */  "sarL_rReg_CL",
  /*  674 */  "sarL_mem_CL",
  /*  675 */  "shrL_rReg_1",
  /*  676 */  "shrL_mem_1",
  /*  677 */  "shrL_rReg_imm",
  /*  678 */  "shrL_mem_imm",
  /*  679 */  "shrL_rReg_CL",
  /*  680 */  "shrL_mem_CL",
  /*  681 */  "i2b",
  /*  682 */  "i2s",
  /*  683 */  "rolI_rReg_imm1",
  /*  684 */  "rolI_rReg_imm8",
  /*  685 */  "rolI_rReg_CL",
  /*  686 */  "rolI_rReg_i1",
  /*  687 */  "rolI_rReg_i1_0",
  /*  688 */  "rolI_rReg_i8",
  /*  689 */  "rolI_rReg_i8_0",
  /*  690 */  "rolI_rReg_Var_C0",
  /*  691 */  "rolI_rReg_Var_C0_0",
  /*  692 */  "rolI_rReg_Var_C32",
  /*  693 */  "rolI_rReg_Var_C32_0",
  /*  694 */  "rorI_rReg_imm1",
  /*  695 */  "rorI_rReg_imm8",
  /*  696 */  "rorI_rReg_CL",
  /*  697 */  "rorI_rReg_i1",
  /*  698 */  "rorI_rReg_i1_0",
  /*  699 */  "rorI_rReg_i8",
  /*  700 */  "rorI_rReg_i8_0",
  /*  701 */  "rorI_rReg_Var_C0",
  /*  702 */  "rorI_rReg_Var_C0_0",
  /*  703 */  "rorI_rReg_Var_C32",
  /*  704 */  "rorI_rReg_Var_C32_0",
  /*  705 */  "rolL_rReg_imm1",
  /*  706 */  "rolL_rReg_imm8",
  /*  707 */  "rolL_rReg_CL",
  /*  708 */  "rolL_rReg_i1",
  /*  709 */  "rolL_rReg_i1_0",
  /*  710 */  "rolL_rReg_i8",
  /*  711 */  "rolL_rReg_i8_0",
  /*  712 */  "rolL_rReg_Var_C0",
  /*  713 */  "rolL_rReg_Var_C0_0",
  /*  714 */  "rolL_rReg_Var_C64",
  /*  715 */  "rolL_rReg_Var_C64_0",
  /*  716 */  "rorL_rReg_imm1",
  /*  717 */  "rorL_rReg_imm8",
  /*  718 */  "rorL_rReg_CL",
  /*  719 */  "rorL_rReg_i1",
  /*  720 */  "rorL_rReg_i1_0",
  /*  721 */  "rorL_rReg_i8",
  /*  722 */  "rorL_rReg_i8_0",
  /*  723 */  "rorL_rReg_Var_C0",
  /*  724 */  "rorL_rReg_Var_C0_0",
  /*  725 */  "rorL_rReg_Var_C64",
  /*  726 */  "rorL_rReg_Var_C64_0",
  /*  727 */  "andI_rReg",
  /*  728 */  "andI_rReg_imm255",
  /*  729 */  "andI2L_rReg_imm255",
  /*  730 */  "andI_rReg_imm65535",
  /*  731 */  "andI2L_rReg_imm65535",
  /*  732 */  "andI_rReg_imm",
  /*  733 */  "andI_rReg_mem",
  /*  734 */  "andI_rReg_mem_0",
  /*  735 */  "andI_mem_rReg",
  /*  736 */  "andI_mem_rReg_0",
  /*  737 */  "andI_mem_imm",
  /*  738 */  "andnI_rReg_rReg_mem",
  /*  739 */  "andnI_rReg_rReg_mem_0",
  /*  740 */  "andnI_rReg_rReg_rReg",
  /*  741 */  "andnI_rReg_rReg_rReg_0",
  /*  742 */  "blsiI_rReg_rReg",
  /*  743 */  "blsiI_rReg_rReg_0",
  /*  744 */  "blsiI_rReg_mem",
  /*  745 */  "blsiI_rReg_mem_0",
  /*  746 */  "blsmskI_rReg_mem",
  /*  747 */  "blsmskI_rReg_mem_0",
  /*  748 */  "blsmskI_rReg_rReg",
  /*  749 */  "blsmskI_rReg_rReg_0",
  /*  750 */  "blsrI_rReg_rReg",
  /*  751 */  "blsrI_rReg_rReg_0",
  /*  752 */  "blsrI_rReg_mem",
  /*  753 */  "blsrI_rReg_mem_0",
  /*  754 */  "orI_rReg",
  /*  755 */  "orI_rReg_imm",
  /*  756 */  "orI_rReg_mem",
  /*  757 */  "orI_rReg_mem_0",
  /*  758 */  "orI_mem_rReg",
  /*  759 */  "orI_mem_rReg_0",
  /*  760 */  "orI_mem_imm",
  /*  761 */  "xorI_rReg",
  /*  762 */  "xorI_rReg_im1",
  /*  763 */  "xorI_rReg_imm",
  /*  764 */  "xorI_rReg_mem",
  /*  765 */  "xorI_rReg_mem_0",
  /*  766 */  "xorI_mem_rReg",
  /*  767 */  "xorI_mem_rReg_0",
  /*  768 */  "xorI_mem_imm",
  /*  769 */  "andL_rReg",
  /*  770 */  "andL_rReg_imm255",
  /*  771 */  "andL_rReg_imm65535",
  /*  772 */  "andL_rReg_imm",
  /*  773 */  "andL_rReg_mem",
  /*  774 */  "andL_rReg_mem_0",
  /*  775 */  "andL_mem_rReg",
  /*  776 */  "andL_mem_rReg_0",
  /*  777 */  "andL_mem_imm",
  /*  778 */  "andnL_rReg_rReg_mem",
  /*  779 */  "andnL_rReg_rReg_mem_0",
  /*  780 */  "andnL_rReg_rReg_rReg",
  /*  781 */  "andnL_rReg_rReg_rReg_0",
  /*  782 */  "blsiL_rReg_rReg",
  /*  783 */  "blsiL_rReg_rReg_0",
  /*  784 */  "blsiL_rReg_mem",
  /*  785 */  "blsiL_rReg_mem_0",
  /*  786 */  "blsmskL_rReg_mem",
  /*  787 */  "blsmskL_rReg_mem_0",
  /*  788 */  "blsmskL_rReg_rReg",
  /*  789 */  "blsmskL_rReg_rReg_0",
  /*  790 */  "blsrL_rReg_rReg",
  /*  791 */  "blsrL_rReg_rReg_0",
  /*  792 */  "blsrL_rReg_mem",
  /*  793 */  "blsrL_rReg_mem_0",
  /*  794 */  "orL_rReg",
  /*  795 */  "orL_rReg_castP2X",
  /*  796 */  "orL_rReg_castP2X_0",
  /*  797 */  "orL_rReg_imm",
  /*  798 */  "orL_rReg_mem",
  /*  799 */  "orL_rReg_mem_0",
  /*  800 */  "orL_mem_rReg",
  /*  801 */  "orL_mem_rReg_0",
  /*  802 */  "orL_mem_imm",
  /*  803 */  "xorL_rReg",
  /*  804 */  "xorL_rReg_im1",
  /*  805 */  "xorL_rReg_imm",
  /*  806 */  "xorL_rReg_mem",
  /*  807 */  "xorL_rReg_mem_0",
  /*  808 */  "xorL_mem_rReg",
  /*  809 */  "xorL_mem_rReg_0",
  /*  810 */  "xorL_mem_imm",
  /*  811 */  "convI2B",
  /*  812 */  "convP2B",
  /*  813 */  "cmpLTMask",
  /*  814 */  "cmpLTMask0",
  /*  815 */  "cadd_cmpLTMask",
  /*  816 */  "cadd_cmpLTMask_1",
  /*  817 */  "cadd_cmpLTMask_0",
  /*  818 */  "cadd_cmpLTMask_2",
  /*  819 */  "and_cmpLTMask",
  /*  820 */  "and_cmpLTMask_0",
  /*  821 */  "cmpF_reg",
  /*  822 */  "cmpF_mem",
  /*  823 */  "cmpF_imm",
  /*  824 */  "cmpD_reg",
  /*  825 */  "cmpD_mem",
  /*  826 */  "cmpD_imm",
  /*  827 */  "convF2D_reg_reg",
  /*  828 */  "convF2D_reg_mem",
  /*  829 */  "convD2F_reg_reg",
  /*  830 */  "convD2F_reg_mem",
  /*  831 */  "convF2I_reg_reg",
  /*  832 */  "convF2L_reg_reg",
  /*  833 */  "convD2I_reg_reg",
  /*  834 */  "convD2L_reg_reg",
  /*  835 */  "convI2F_reg_reg",
  /*  836 */  "convI2F_reg_mem",
  /*  837 */  "convI2D_reg_reg",
  /*  838 */  "convI2D_reg_mem",
  /*  839 */  "convXI2F_reg",
  /*  840 */  "convXI2D_reg",
  /*  841 */  "convL2F_reg_reg",
  /*  842 */  "convL2F_reg_mem",
  /*  843 */  "convL2D_reg_reg",
  /*  844 */  "convL2D_reg_mem",
  /*  845 */  "convI2L_reg_reg",
  /*  846 */  "convI2L_reg_reg_zex",
  /*  847 */  "convI2L_reg_mem_zex",
  /*  848 */  "zerox_long_reg_reg",
  /*  849 */  "convL2I_reg_reg",
  /*  850 */  "MoveF2I_reg_stack",
  /*  851 */  "MoveI2F_reg_stack",
  /*  852 */  "MoveD2L_reg_stack",
  /*  853 */  "MoveL2D_reg_stack",
  /*  854 */  "rep_stos",
  /*  855 */  "rep_stos_large",
  /*  856 */  "string_compareL",
  /*  857 */  "string_compareU",
  /*  858 */  "string_compareLU",
  /*  859 */  "string_compareUL",
  /*  860 */  "string_indexof_conL",
  /*  861 */  "string_indexof_conU",
  /*  862 */  "string_indexof_conUL",
  /*  863 */  "string_indexofL",
  /*  864 */  "string_indexofU",
  /*  865 */  "string_indexofUL",
  /*  866 */  "string_indexofU_char",
  /*  867 */  "string_equals",
  /*  868 */  "array_equalsB",
  /*  869 */  "array_equalsC",
  /*  870 */  "has_negatives",
  /*  871 */  "string_compress",
  /*  872 */  "string_inflate",
  /*  873 */  "encode_iso_array",
  /*  874 */  "cmpL3_reg_reg",
  /*  875 */  "cmovI_reg_g",
  /*  876 */  "minI_rReg",
  /*  877 */  "cmovI_reg_l",
  /*  878 */  "maxI_rReg",
  /*  879 */  "jmpDir",
  /*  880 */  "jmpCon",
  /*  881 */  "jmpLoopEnd",
  /*  882 */  "jmpLoopEndU",
  /*  883 */  "jmpLoopEndUCF",
  /*  884 */  "jmpLoopEnd_and_restoreMask",
  /*  885 */  "jmpLoopEndU_and_restoreMask",
  /*  886 */  "jmpLoopEndUCF_and_restoreMask",
  /*  887 */  "jmpConU",
  /*  888 */  "jmpConUCF",
  /*  889 */  "jmpConUCF2",
  /*  890 */  "partialSubtypeCheck",
  /*  891 */  "jmpDir_short",
  /*  892 */  "jmpCon_short",
  /*  893 */  "jmpLoopEnd_short",
  /*  894 */  "jmpLoopEndU_short",
  /*  895 */  "jmpLoopEndUCF_short",
  /*  896 */  "jmpConU_short",
  /*  897 */  "jmpConUCF_short",
  /*  898 */  "jmpConUCF2_short",
  /*  899 */  "safePoint_poll_far",
  /*  900 */  "CallStaticJavaDirect",
  /*  901 */  "CallDynamicJavaDirect",
  /*  902 */  "CallRuntimeDirect",
  /*  903 */  "CallLeafDirect",
  /*  904 */  "CallLeafNoFPDirect",
  /*  905 */  "Ret",
  /*  906 */  "TailCalljmpInd",
  /*  907 */  "tailjmpInd",
  /*  908 */  "CreateException",
  /*  909 */  "RethrowException",
  /*  910 */  "ShouldNotReachHere",
  /*  911 */  "setMask",
  /*  912 */  "addF_reg",
  /*  913 */  "addF_mem",
  /*  914 */  "addF_mem_0",
  /*  915 */  "addF_imm",
  /*  916 */  "addF_reg_reg",
  /*  917 */  "addF_reg_mem",
  /*  918 */  "addF_reg_mem_0",
  /*  919 */  "addF_reg_imm",
  /*  920 */  "addD_reg",
  /*  921 */  "addD_mem",
  /*  922 */  "addD_mem_0",
  /*  923 */  "addD_imm",
  /*  924 */  "addD_reg_reg",
  /*  925 */  "addD_reg_mem",
  /*  926 */  "addD_reg_mem_0",
  /*  927 */  "addD_reg_imm",
  /*  928 */  "subF_reg",
  /*  929 */  "subF_mem",
  /*  930 */  "subF_imm",
  /*  931 */  "subF_reg_reg",
  /*  932 */  "subF_reg_mem",
  /*  933 */  "subF_reg_imm",
  /*  934 */  "subD_reg",
  /*  935 */  "subD_mem",
  /*  936 */  "subD_imm",
  /*  937 */  "subD_reg_reg",
  /*  938 */  "subD_reg_mem",
  /*  939 */  "subD_reg_imm",
  /*  940 */  "mulF_reg",
  /*  941 */  "mulF_mem",
  /*  942 */  "mulF_mem_0",
  /*  943 */  "mulF_imm",
  /*  944 */  "mulF_reg_reg",
  /*  945 */  "mulF_reg_mem",
  /*  946 */  "mulF_reg_mem_0",
  /*  947 */  "mulF_reg_imm",
  /*  948 */  "mulD_reg",
  /*  949 */  "mulD_mem",
  /*  950 */  "mulD_mem_0",
  /*  951 */  "mulD_imm",
  /*  952 */  "mulD_reg_reg",
  /*  953 */  "mulD_reg_mem",
  /*  954 */  "mulD_reg_mem_0",
  /*  955 */  "mulD_reg_imm",
  /*  956 */  "divF_reg",
  /*  957 */  "divF_mem",
  /*  958 */  "divF_imm",
  /*  959 */  "divF_reg_reg",
  /*  960 */  "divF_reg_mem",
  /*  961 */  "divF_reg_imm",
  /*  962 */  "divD_reg",
  /*  963 */  "divD_mem",
  /*  964 */  "divD_imm",
  /*  965 */  "divD_reg_reg",
  /*  966 */  "divD_reg_mem",
  /*  967 */  "divD_reg_imm",
  /*  968 */  "absF_reg_reg_evex_special",
  /*  969 */  "absD_reg_reg_evex_special",
  /*  970 */  "sqrtF_reg",
  /*  971 */  "sqrtF_mem",
  /*  972 */  "sqrtF_imm",
  /*  973 */  "sqrtD_reg",
  /*  974 */  "sqrtD_mem",
  /*  975 */  "sqrtD_imm",
  /*  976 */  "onspinwait",
  /*  977 */  "fmaD_reg",
  /*  978 */  "fmaF_reg",
  /*  979 */  "loadV4",
  /*  980 */  "loadV8",
  /*  981 */  "loadV16",
  /*  982 */  "loadV32",
  /*  983 */  "loadV64_dword",
  /*  984 */  "loadV64_qword",
  /*  985 */  "storeV4",
  /*  986 */  "storeV8",
  /*  987 */  "storeV16",
  /*  988 */  "storeV32",
  /*  989 */  "storeV64_dword",
  /*  990 */  "storeV64_qword",
  /*  991 */  "Repl4B_mem",
  /*  992 */  "Repl8B_mem",
  /*  993 */  "Repl16B",
  /*  994 */  "Repl16B_mem",
  /*  995 */  "Repl32B",
  /*  996 */  "Repl32B_mem",
  /*  997 */  "Repl16B_imm",
  /*  998 */  "Repl32B_imm",
  /*  999 */  "Repl4S",
  /* 1000 */  "Repl4S_mem",
  /* 1001 */  "Repl8S",
  /* 1002 */  "Repl8S_mem",
  /* 1003 */  "Repl8S_imm",
  /* 1004 */  "Repl16S",
  /* 1005 */  "Repl16S_mem",
  /* 1006 */  "Repl16S_imm",
  /* 1007 */  "Repl4I",
  /* 1008 */  "Repl4I_mem",
  /* 1009 */  "Repl8I",
  /* 1010 */  "Repl8I_mem",
  /* 1011 */  "Repl4I_imm",
  /* 1012 */  "Repl8I_imm",
  /* 1013 */  "Repl2L_mem",
  /* 1014 */  "Repl4L",
  /* 1015 */  "Repl4L_imm",
  /* 1016 */  "Repl4L_mem",
  /* 1017 */  "Repl2F_mem",
  /* 1018 */  "Repl4F_mem",
  /* 1019 */  "Repl8F",
  /* 1020 */  "Repl8F_mem",
  /* 1021 */  "Repl2F_zero",
  /* 1022 */  "Repl4F_zero",
  /* 1023 */  "Repl8F_zero",
  /* 1024 */  "Repl2D_mem",
  /* 1025 */  "Repl4D",
  /* 1026 */  "Repl4D_mem",
  /* 1027 */  "Repl2D_zero",
  /* 1028 */  "Repl4D_zero",
  /* 1029 */  "Repl4B",
  /* 1030 */  "Repl8B",
  /* 1031 */  "Repl4B_imm",
  /* 1032 */  "Repl8B_imm",
  /* 1033 */  "Repl4B_zero",
  /* 1034 */  "Repl8B_zero",
  /* 1035 */  "Repl16B_zero",
  /* 1036 */  "Repl32B_zero",
  /* 1037 */  "Repl2S",
  /* 1038 */  "Repl2S_imm",
  /* 1039 */  "Repl4S_imm",
  /* 1040 */  "Repl2S_zero",
  /* 1041 */  "Repl4S_zero",
  /* 1042 */  "Repl8S_zero",
  /* 1043 */  "Repl16S_zero",
  /* 1044 */  "Repl2I",
  /* 1045 */  "Repl2I_mem",
  /* 1046 */  "Repl2I_imm",
  /* 1047 */  "Repl2I_zero",
  /* 1048 */  "Repl4I_zero",
  /* 1049 */  "Repl8I_zero",
  /* 1050 */  "Repl2L",
  /* 1051 */  "Repl2L_imm",
  /* 1052 */  "Repl2L_zero",
  /* 1053 */  "Repl4L_zero",
  /* 1054 */  "Repl2F",
  /* 1055 */  "Repl4F",
  /* 1056 */  "Repl2D",
  /* 1057 */  "Repl4B_mem_evex",
  /* 1058 */  "Repl8B_mem_evex",
  /* 1059 */  "Repl16B_evex",
  /* 1060 */  "Repl16B_mem_evex",
  /* 1061 */  "Repl32B_evex",
  /* 1062 */  "Repl32B_mem_evex",
  /* 1063 */  "Repl64B_evex",
  /* 1064 */  "Repl64B_mem_evex",
  /* 1065 */  "Repl16B_imm_evex",
  /* 1066 */  "Repl32B_imm_evex",
  /* 1067 */  "Repl64B_imm_evex",
  /* 1068 */  "Repl64B_zero_evex",
  /* 1069 */  "Repl4S_evex",
  /* 1070 */  "Repl4S_mem_evex",
  /* 1071 */  "Repl8S_evex",
  /* 1072 */  "Repl8S_mem_evex",
  /* 1073 */  "Repl16S_evex",
  /* 1074 */  "Repl16S_mem_evex",
  /* 1075 */  "Repl32S_evex",
  /* 1076 */  "Repl32S_mem_evex",
  /* 1077 */  "Repl8S_imm_evex",
  /* 1078 */  "Repl16S_imm_evex",
  /* 1079 */  "Repl32S_imm_evex",
  /* 1080 */  "Repl32S_zero_evex",
  /* 1081 */  "Repl4I_evex",
  /* 1082 */  "Repl4I_mem_evex",
  /* 1083 */  "Repl8I_evex",
  /* 1084 */  "Repl8I_mem_evex",
  /* 1085 */  "Repl16I_evex",
  /* 1086 */  "Repl16I_mem_evex",
  /* 1087 */  "Repl4I_imm_evex",
  /* 1088 */  "Repl8I_imm_evex",
  /* 1089 */  "Repl16I_imm_evex",
  /* 1090 */  "Repl16I_zero_evex",
  /* 1091 */  "Repl4L_evex",
  /* 1092 */  "Repl8L_evex",
  /* 1093 */  "Repl4L_imm_evex",
  /* 1094 */  "Repl8L_imm_evex",
  /* 1095 */  "Repl2L_mem_evex",
  /* 1096 */  "Repl4L_mem_evex",
  /* 1097 */  "Repl8L_mem_evex",
  /* 1098 */  "Repl8L_zero_evex",
  /* 1099 */  "Repl8F_evex",
  /* 1100 */  "Repl8F_mem_evex",
  /* 1101 */  "Repl16F_evex",
  /* 1102 */  "Repl16F_mem_evex",
  /* 1103 */  "Repl2F_zero_evex",
  /* 1104 */  "Repl4F_zero_evex",
  /* 1105 */  "Repl8F_zero_evex",
  /* 1106 */  "Repl16F_zero_evex",
  /* 1107 */  "Repl4D_evex",
  /* 1108 */  "Repl4D_mem_evex",
  /* 1109 */  "Repl8D_evex",
  /* 1110 */  "Repl8D_mem_evex",
  /* 1111 */  "Repl2D_zero_evex",
  /* 1112 */  "Repl4D_zero_evex",
  /* 1113 */  "Repl8D_zero_evex",
  /* 1114 */  "rsadd2I_reduction_reg",
  /* 1115 */  "rvadd2I_reduction_reg",
  /* 1116 */  "rvadd2I_reduction_reg_evex",
  /* 1117 */  "rsadd4I_reduction_reg",
  /* 1118 */  "rvadd4I_reduction_reg",
  /* 1119 */  "rvadd4I_reduction_reg_evex",
  /* 1120 */  "rvadd8I_reduction_reg",
  /* 1121 */  "rvadd8I_reduction_reg_evex",
  /* 1122 */  "rvadd16I_reduction_reg_evex",
  /* 1123 */  "rvadd2L_reduction_reg",
  /* 1124 */  "rvadd4L_reduction_reg",
  /* 1125 */  "rvadd8L_reduction_reg",
  /* 1126 */  "rsadd2F_reduction_reg",
  /* 1127 */  "rvadd2F_reduction_reg",
  /* 1128 */  "rsadd4F_reduction_reg",
  /* 1129 */  "rvadd4F_reduction_reg",
  /* 1130 */  "radd8F_reduction_reg",
  /* 1131 */  "radd16F_reduction_reg",
  /* 1132 */  "rsadd2D_reduction_reg",
  /* 1133 */  "rvadd2D_reduction_reg",
  /* 1134 */  "rvadd4D_reduction_reg",
  /* 1135 */  "rvadd8D_reduction_reg",
  /* 1136 */  "rsmul2I_reduction_reg",
  /* 1137 */  "rvmul2I_reduction_reg",
  /* 1138 */  "rsmul4I_reduction_reg",
  /* 1139 */  "rvmul4I_reduction_reg",
  /* 1140 */  "rvmul8I_reduction_reg",
  /* 1141 */  "rvmul16I_reduction_reg",
  /* 1142 */  "rvmul2L_reduction_reg",
  /* 1143 */  "rvmul4L_reduction_reg",
  /* 1144 */  "rvmul8L_reduction_reg",
  /* 1145 */  "rsmul2F_reduction",
  /* 1146 */  "rvmul2F_reduction_reg",
  /* 1147 */  "rsmul4F_reduction_reg",
  /* 1148 */  "rvmul4F_reduction_reg",
  /* 1149 */  "rvmul8F_reduction_reg",
  /* 1150 */  "rvmul16F_reduction_reg",
  /* 1151 */  "rsmul2D_reduction_reg",
  /* 1152 */  "rvmul2D_reduction_reg",
  /* 1153 */  "rvmul4D_reduction_reg",
  /* 1154 */  "rvmul8D_reduction_reg",
  /* 1155 */  "vadd4B",
  /* 1156 */  "vadd4B_reg_avx",
  /* 1157 */  "vadd4B_reg_evex",
  /* 1158 */  "vadd4B_reg_evex_special",
  /* 1159 */  "vadd4B_mem_avx",
  /* 1160 */  "vadd4B_mem_evex",
  /* 1161 */  "vadd4B_mem_evex_special",
  /* 1162 */  "vadd8B",
  /* 1163 */  "vadd8B_reg_avx",
  /* 1164 */  "vadd8B_reg_evex",
  /* 1165 */  "vadd8B_reg_evex_special",
  /* 1166 */  "vadd8B_mem_avx",
  /* 1167 */  "vadd8B_mem_evex",
  /* 1168 */  "vadd8B_mem_evex_special",
  /* 1169 */  "vadd16B",
  /* 1170 */  "vadd16B_reg_avx",
  /* 1171 */  "vadd16B_reg_evex",
  /* 1172 */  "vadd16B_reg_evex_special",
  /* 1173 */  "vadd16B_mem_avx",
  /* 1174 */  "vadd16B_mem_evex",
  /* 1175 */  "vadd16B_mem_evex_special",
  /* 1176 */  "vadd32B_reg_avx",
  /* 1177 */  "vadd32B_reg_evex",
  /* 1178 */  "vadd32B_reg_evex_special",
  /* 1179 */  "vadd32B_mem_avx",
  /* 1180 */  "vadd32B_mem_evex",
  /* 1181 */  "vadd32B_mem_evex_special",
  /* 1182 */  "vadd64B_reg",
  /* 1183 */  "vadd64B_mem",
  /* 1184 */  "vadd2S",
  /* 1185 */  "vadd2S_reg_avx",
  /* 1186 */  "vadd2S_reg_evex",
  /* 1187 */  "vadd2S_reg_evex_special",
  /* 1188 */  "vadd2S_mem_avx",
  /* 1189 */  "vadd2S_mem_evex",
  /* 1190 */  "vadd2S_mem_evex_special",
  /* 1191 */  "vadd4S",
  /* 1192 */  "vadd4S_reg_avx",
  /* 1193 */  "vadd4S_reg_evex",
  /* 1194 */  "vadd4S_reg_evex_special",
  /* 1195 */  "vadd4S_mem_avx",
  /* 1196 */  "vadd4S_mem_evex",
  /* 1197 */  "vadd4S_mem_evex_special",
  /* 1198 */  "vadd8S",
  /* 1199 */  "vadd8S_reg_avx",
  /* 1200 */  "vadd8S_reg_evex",
  /* 1201 */  "vadd8S_reg_evex_special",
  /* 1202 */  "vadd8S_mem_avx",
  /* 1203 */  "vadd8S_mem_evex",
  /* 1204 */  "vadd8S_mem_evex_special",
  /* 1205 */  "vadd16S_reg_avx",
  /* 1206 */  "vadd16S_reg_evex",
  /* 1207 */  "vadd16S_reg_evex_special",
  /* 1208 */  "vadd16S_mem_avx",
  /* 1209 */  "vadd16S_mem_evex",
  /* 1210 */  "vadd16S_mem_evex_special",
  /* 1211 */  "vadd32S_reg",
  /* 1212 */  "vadd32S_mem",
  /* 1213 */  "vadd2I",
  /* 1214 */  "vadd2I_reg",
  /* 1215 */  "vadd2I_mem",
  /* 1216 */  "vadd4I",
  /* 1217 */  "vadd4I_reg",
  /* 1218 */  "vadd4I_mem",
  /* 1219 */  "vadd8I_reg",
  /* 1220 */  "vadd8I_mem",
  /* 1221 */  "vadd16I_reg",
  /* 1222 */  "vadd16I_mem",
  /* 1223 */  "vadd2L",
  /* 1224 */  "vadd2L_reg",
  /* 1225 */  "vadd2L_mem",
  /* 1226 */  "vadd4L_reg",
  /* 1227 */  "vadd4L_mem",
  /* 1228 */  "vadd8L_reg",
  /* 1229 */  "vadd8L_mem",
  /* 1230 */  "vadd2F",
  /* 1231 */  "vadd2F_reg",
  /* 1232 */  "vadd2F_mem",
  /* 1233 */  "vadd4F",
  /* 1234 */  "vadd4F_reg",
  /* 1235 */  "vadd4F_mem",
  /* 1236 */  "vadd8F_reg",
  /* 1237 */  "vadd8F_mem",
  /* 1238 */  "vadd16F_reg",
  /* 1239 */  "vadd16F_mem",
  /* 1240 */  "vadd2D",
  /* 1241 */  "vadd2D_reg",
  /* 1242 */  "vadd2D_mem",
  /* 1243 */  "vadd4D_reg",
  /* 1244 */  "vadd4D_mem",
  /* 1245 */  "vadd8D_reg",
  /* 1246 */  "vadd8D_mem",
  /* 1247 */  "vsub4B",
  /* 1248 */  "vsub4B_reg_avx",
  /* 1249 */  "vsub4B_reg_evex",
  /* 1250 */  "vsub4B_reg_exex_special",
  /* 1251 */  "vsub4B_mem_avx",
  /* 1252 */  "vsub4B_mem_evex",
  /* 1253 */  "vsub4B_mem_evex_special",
  /* 1254 */  "vsub8B",
  /* 1255 */  "vsub8B_reg_avx",
  /* 1256 */  "vsub8B_reg_evex",
  /* 1257 */  "vsub8B_reg_evex_special",
  /* 1258 */  "vsub8B_mem_avx",
  /* 1259 */  "vsub8B_mem_evex",
  /* 1260 */  "vsub8B_mem_evex_special",
  /* 1261 */  "vsub16B",
  /* 1262 */  "vsub16B_reg_avx",
  /* 1263 */  "vsub16B_reg_evex",
  /* 1264 */  "vsub16B_reg_evex_special",
  /* 1265 */  "vsub16B_mem_avx",
  /* 1266 */  "vsub16B_mem_evex",
  /* 1267 */  "vsub16B_mem_evex_special",
  /* 1268 */  "vsub32B_reg_avx",
  /* 1269 */  "vsub32B_reg_evex",
  /* 1270 */  "vsub32B_reg_evex_special",
  /* 1271 */  "vsub32B_mem_avx",
  /* 1272 */  "vsub32B_mem_evex",
  /* 1273 */  "vsub32B_mem_evex_special",
  /* 1274 */  "vsub64B_reg",
  /* 1275 */  "vsub64B_mem",
  /* 1276 */  "vsub2S",
  /* 1277 */  "vsub2S_reg_avx",
  /* 1278 */  "vsub2S_reg_evex",
  /* 1279 */  "vsub2S_reg_evex_special",
  /* 1280 */  "vsub2S_mem_avx",
  /* 1281 */  "vsub2S_mem_evex",
  /* 1282 */  "vsub2S_mem_evex_special",
  /* 1283 */  "vsub4S",
  /* 1284 */  "vsub4S_reg_avx",
  /* 1285 */  "vsub4S_reg_evex",
  /* 1286 */  "vsub4S_reg_evex_special",
  /* 1287 */  "vsub4S_mem_avx",
  /* 1288 */  "vsub4S_mem_evex",
  /* 1289 */  "vsub4S_mem_evex_special",
  /* 1290 */  "vsub8S",
  /* 1291 */  "vsub8S_reg_avx",
  /* 1292 */  "vsub8S_reg_evex",
  /* 1293 */  "vsub8S_reg_evex_special",
  /* 1294 */  "vsub8S_mem_avx",
  /* 1295 */  "vsub8S_mem_evex",
  /* 1296 */  "vsub8S_mem_evex_special",
  /* 1297 */  "vsub16S_reg_avx",
  /* 1298 */  "vsub16S_reg_evex",
  /* 1299 */  "vsub16S_reg_evex_special",
  /* 1300 */  "vsub16S_mem_avx",
  /* 1301 */  "vsub16S_mem_evex",
  /* 1302 */  "vsub16S_mem_evex_special",
  /* 1303 */  "vsub32S_reg",
  /* 1304 */  "vsub32S_mem",
  /* 1305 */  "vsub2I",
  /* 1306 */  "vsub2I_reg",
  /* 1307 */  "vsub2I_mem",
  /* 1308 */  "vsub4I",
  /* 1309 */  "vsub4I_reg",
  /* 1310 */  "vsub4I_mem",
  /* 1311 */  "vsub8I_reg",
  /* 1312 */  "vsub8I_mem",
  /* 1313 */  "vsub16I_reg",
  /* 1314 */  "vsub16I_mem",
  /* 1315 */  "vsub2L",
  /* 1316 */  "vsub2L_reg",
  /* 1317 */  "vsub2L_mem",
  /* 1318 */  "vsub4L_reg",
  /* 1319 */  "vsub4L_mem",
  /* 1320 */  "vsub8L_reg",
  /* 1321 */  "vsub8L_mem",
  /* 1322 */  "vsub2F",
  /* 1323 */  "vsub2F_reg",
  /* 1324 */  "vsub2F_mem",
  /* 1325 */  "vsub4F",
  /* 1326 */  "vsub4F_reg",
  /* 1327 */  "vsub4F_mem",
  /* 1328 */  "vsub8F_reg",
  /* 1329 */  "vsub8F_mem",
  /* 1330 */  "vsub16F_reg",
  /* 1331 */  "vsub16F_mem",
  /* 1332 */  "vsub2D",
  /* 1333 */  "vsub2D_reg",
  /* 1334 */  "vsub2D_mem",
  /* 1335 */  "vsub4D_reg",
  /* 1336 */  "vsub4D_mem",
  /* 1337 */  "vsub8D_reg",
  /* 1338 */  "vsub8D_mem",
  /* 1339 */  "vmul2S",
  /* 1340 */  "vmul2S_reg_avx",
  /* 1341 */  "vmul2S_reg_evex",
  /* 1342 */  "vmul2S_evex_special",
  /* 1343 */  "vmul2S_mem_avx",
  /* 1344 */  "vmul2S_mem_evex",
  /* 1345 */  "vmul2S_mem_evex_special",
  /* 1346 */  "vmul4S",
  /* 1347 */  "vmul4S_reg_avx",
  /* 1348 */  "vmul4S_reg_evex",
  /* 1349 */  "vmul4S_reg_evex_special",
  /* 1350 */  "vmul4S_mem_avx",
  /* 1351 */  "vmul4S_mem_evex",
  /* 1352 */  "vmul4S_mem_evex_special",
  /* 1353 */  "vmul8S",
  /* 1354 */  "vmul8S_reg_avx",
  /* 1355 */  "vmul8S_reg_evex",
  /* 1356 */  "vmul8S_reg_evex_special",
  /* 1357 */  "vmul8S_mem_avx",
  /* 1358 */  "vmul8S_mem_evex",
  /* 1359 */  "vmul8S_mem_evex_special",
  /* 1360 */  "vmul16S_reg_avx",
  /* 1361 */  "vmul16S_reg_evex",
  /* 1362 */  "vmul16S_reg_evex_special",
  /* 1363 */  "vmul16S_mem_avx",
  /* 1364 */  "vmul16S_mem_evex",
  /* 1365 */  "vmul16S_mem_evex_special",
  /* 1366 */  "vmul32S_reg",
  /* 1367 */  "vmul32S_mem",
  /* 1368 */  "vmul2I",
  /* 1369 */  "vmul2I_reg",
  /* 1370 */  "vmul2I_mem",
  /* 1371 */  "vmul4I",
  /* 1372 */  "vmul4I_reg",
  /* 1373 */  "vmul4I_mem",
  /* 1374 */  "vmul2L_reg",
  /* 1375 */  "vmul2L_mem",
  /* 1376 */  "vmul4L_reg",
  /* 1377 */  "vmul4L_mem",
  /* 1378 */  "vmul8L_reg",
  /* 1379 */  "vmul8L_mem",
  /* 1380 */  "vmul8I_reg",
  /* 1381 */  "vmul8I_mem",
  /* 1382 */  "vmul16I_reg",
  /* 1383 */  "vmul16I_mem",
  /* 1384 */  "vmul2F",
  /* 1385 */  "vmul2F_reg",
  /* 1386 */  "vmul2F_mem",
  /* 1387 */  "vmul4F",
  /* 1388 */  "vmul4F_reg",
  /* 1389 */  "vmul4F_mem",
  /* 1390 */  "vmul8F_reg",
  /* 1391 */  "vmul8F_mem",
  /* 1392 */  "vmul16F_reg",
  /* 1393 */  "vmul16F_mem",
  /* 1394 */  "vmul2D",
  /* 1395 */  "vmul2D_reg",
  /* 1396 */  "vmul2D_mem",
  /* 1397 */  "vmul4D_reg",
  /* 1398 */  "vmul4D_mem",
  /* 1399 */  "vmul8D_reg",
  /* 1400 */  "vmul8D_mem",
  /* 1401 */  "vcmov4D_reg",
  /* 1402 */  "vdiv2F",
  /* 1403 */  "vdiv2F_reg",
  /* 1404 */  "vdiv2F_mem",
  /* 1405 */  "vdiv4F",
  /* 1406 */  "vdiv4F_reg",
  /* 1407 */  "vdiv4F_mem",
  /* 1408 */  "vdiv8F_reg",
  /* 1409 */  "vdiv8F_mem",
  /* 1410 */  "vdiv16F_reg",
  /* 1411 */  "vdiv16F_mem",
  /* 1412 */  "vdiv2D",
  /* 1413 */  "vdiv2D_reg",
  /* 1414 */  "vdiv2D_mem",
  /* 1415 */  "vdiv4D_reg",
  /* 1416 */  "vdiv4D_mem",
  /* 1417 */  "vdiv8D_reg",
  /* 1418 */  "vdiv8D_mem",
  /* 1419 */  "vsll2S",
  /* 1420 */  "vsll2S_imm",
  /* 1421 */  "vsll2S_reg_avx",
  /* 1422 */  "vsll2S_reg_evex",
  /* 1423 */  "vsll2S_reg_evex_special",
  /* 1424 */  "vsll2S_reg_imm_avx",
  /* 1425 */  "vsll2S_reg_imm_evex",
  /* 1426 */  "vsll2S_reg_imm_evex_special",
  /* 1427 */  "vsll4S",
  /* 1428 */  "vsll4S_imm",
  /* 1429 */  "vsll4S_reg_avx",
  /* 1430 */  "vsll4S_reg_evex",
  /* 1431 */  "vsll4S_reg_evex_special",
  /* 1432 */  "vsll4S_reg_imm_avx",
  /* 1433 */  "vsll4S_reg_imm_evex",
  /* 1434 */  "vsll4S_reg_imm_evex_special",
  /* 1435 */  "vsll8S",
  /* 1436 */  "vsll8S_imm",
  /* 1437 */  "vsll8S_reg_avx",
  /* 1438 */  "vsll8S_reg_evex",
  /* 1439 */  "vsll8S_reg_evex_special",
  /* 1440 */  "vsll8S_reg_imm_avx",
  /* 1441 */  "vsll8S_reg_imm_evex",
  /* 1442 */  "vsll8S_reg_imm_evex_special",
  /* 1443 */  "vsll16S_reg_avx",
  /* 1444 */  "vsll16S_reg_evex",
  /* 1445 */  "vsll16S_reg_evex_special",
  /* 1446 */  "vsll16S_reg_imm_avx",
  /* 1447 */  "vsll16S_reg_imm_evex",
  /* 1448 */  "vsll16S_reg_imm_evex_special",
  /* 1449 */  "vsll32S_reg",
  /* 1450 */  "vsll32S_reg_imm",
  /* 1451 */  "vsll2I",
  /* 1452 */  "vsll2I_imm",
  /* 1453 */  "vsll2I_reg",
  /* 1454 */  "vsll2I_reg_imm",
  /* 1455 */  "vsll4I",
  /* 1456 */  "vsll4I_imm",
  /* 1457 */  "vsll4I_reg",
  /* 1458 */  "vsll4I_reg_imm",
  /* 1459 */  "vsll8I_reg",
  /* 1460 */  "vsll8I_reg_imm",
  /* 1461 */  "vsll16I_reg",
  /* 1462 */  "vsll16I_reg_imm",
  /* 1463 */  "vsll2L",
  /* 1464 */  "vsll2L_imm",
  /* 1465 */  "vsll2L_reg",
  /* 1466 */  "vsll2L_reg_imm",
  /* 1467 */  "vsll4L_reg",
  /* 1468 */  "vsll4L_reg_imm",
  /* 1469 */  "vsll8L_reg",
  /* 1470 */  "vsll8L_reg_imm",
  /* 1471 */  "vsrl2S",
  /* 1472 */  "vsrl2S_imm",
  /* 1473 */  "vsrl2S_reg_avx",
  /* 1474 */  "vsrl2S_reg_evex",
  /* 1475 */  "vsrl2S_reg_evex_special",
  /* 1476 */  "vsrl2S_reg_imm_avx",
  /* 1477 */  "vsrl2S_reg_imm_evex",
  /* 1478 */  "vsrl2S_reg_imm_evex_special",
  /* 1479 */  "vsrl4S",
  /* 1480 */  "vsrl4S_imm",
  /* 1481 */  "vsrl4S_reg_avx",
  /* 1482 */  "vsrl4S_reg_evex",
  /* 1483 */  "vsrl4S_reg_evex_special",
  /* 1484 */  "vsrl4S_reg_imm_avx",
  /* 1485 */  "vsrl4S_reg_imm_evex",
  /* 1486 */  "vsrl4S_reg_imm_evex_special",
  /* 1487 */  "vsrl8S",
  /* 1488 */  "vsrl8S_imm",
  /* 1489 */  "vsrl8S_reg_avx",
  /* 1490 */  "vsrl8S_reg_evex",
  /* 1491 */  "vsrl8S_reg_evex_special",
  /* 1492 */  "vsrl8S_reg_imm_avx",
  /* 1493 */  "vsrl8S_reg_imm_evex",
  /* 1494 */  "vsrl8S_reg_imm_evex_special",
  /* 1495 */  "vsrl16S_reg_avx",
  /* 1496 */  "vsrl16S_reg_evex",
  /* 1497 */  "vsrl16S_reg_evex_special",
  /* 1498 */  "vsrl16S_reg_imm_avx",
  /* 1499 */  "vsrl16S_reg_imm_evex",
  /* 1500 */  "vsrl16S_reg_imm_evex_special",
  /* 1501 */  "vsrl32S_reg",
  /* 1502 */  "vsrl32S_reg_imm",
  /* 1503 */  "vsrl2I",
  /* 1504 */  "vsrl2I_imm",
  /* 1505 */  "vsrl2I_reg",
  /* 1506 */  "vsrl2I_reg_imm",
  /* 1507 */  "vsrl4I",
  /* 1508 */  "vsrl4I_imm",
  /* 1509 */  "vsrl4I_reg",
  /* 1510 */  "vsrl4I_reg_imm",
  /* 1511 */  "vsrl8I_reg",
  /* 1512 */  "vsrl8I_reg_imm",
  /* 1513 */  "vsrl16I_reg",
  /* 1514 */  "vsrl16I_reg_imm",
  /* 1515 */  "vsrl2L",
  /* 1516 */  "vsrl2L_imm",
  /* 1517 */  "vsrl2L_reg",
  /* 1518 */  "vsrl2L_reg_imm",
  /* 1519 */  "vsrl4L_reg",
  /* 1520 */  "vsrl4L_reg_imm",
  /* 1521 */  "vsrl8L_reg",
  /* 1522 */  "vsrl8L_reg_imm",
  /* 1523 */  "vsra2S",
  /* 1524 */  "vsra2S_imm",
  /* 1525 */  "vsra2S_reg_avx",
  /* 1526 */  "vsra2S_reg_evex",
  /* 1527 */  "vsra2S_reg_evex_special",
  /* 1528 */  "vsra2S_reg_imm_avx",
  /* 1529 */  "vsra2S_reg_imm_evex",
  /* 1530 */  "vsra2S_reg_imm_evex_special",
  /* 1531 */  "vsra4S",
  /* 1532 */  "vsra4S_imm",
  /* 1533 */  "vsra4S_reg_avx",
  /* 1534 */  "vsra4S_reg_evex",
  /* 1535 */  "vsra4S_reg_evex_special",
  /* 1536 */  "vsra4S_reg_imm_avx",
  /* 1537 */  "vsra4S_reg_imm_evex",
  /* 1538 */  "vsra4S_reg_imm_evex_special",
  /* 1539 */  "vsra8S",
  /* 1540 */  "vsra8S_imm",
  /* 1541 */  "vsra8S_reg_avx",
  /* 1542 */  "vsra8S_reg_evex",
  /* 1543 */  "vsra8S_reg_evex_special",
  /* 1544 */  "vsra8S_reg_imm_avx",
  /* 1545 */  "vsra8S_reg_imm_evex",
  /* 1546 */  "vsra8S_reg_imm_evex_special",
  /* 1547 */  "vsra16S_reg_avx",
  /* 1548 */  "vsra16S_reg_evex",
  /* 1549 */  "vsra16S_reg_evex_special",
  /* 1550 */  "vsra16S_reg_imm_avx",
  /* 1551 */  "vsra16S_reg_imm_evex",
  /* 1552 */  "vsra16S_reg_imm_evex_special",
  /* 1553 */  "vsra32S_reg",
  /* 1554 */  "vsra32S_reg_imm",
  /* 1555 */  "vsra2I",
  /* 1556 */  "vsra2I_imm",
  /* 1557 */  "vsra2I_reg",
  /* 1558 */  "vsra2I_reg_imm",
  /* 1559 */  "vsra4I",
  /* 1560 */  "vsra4I_imm",
  /* 1561 */  "vsra4I_reg",
  /* 1562 */  "vsra4I_reg_imm",
  /* 1563 */  "vsra8I_reg",
  /* 1564 */  "vsra8I_reg_imm",
  /* 1565 */  "vsra16I_reg",
  /* 1566 */  "vsra16I_reg_imm",
  /* 1567 */  "vand4B",
  /* 1568 */  "vand4B_reg",
  /* 1569 */  "vand4B_mem",
  /* 1570 */  "vand8B",
  /* 1571 */  "vand8B_reg",
  /* 1572 */  "vand8B_mem",
  /* 1573 */  "vand16B",
  /* 1574 */  "vand16B_reg",
  /* 1575 */  "vand16B_mem",
  /* 1576 */  "vand32B_reg",
  /* 1577 */  "vand32B_mem",
  /* 1578 */  "vand64B_reg",
  /* 1579 */  "vand64B_mem",
  /* 1580 */  "vor4B",
  /* 1581 */  "vor4B_reg",
  /* 1582 */  "vor4B_mem",
  /* 1583 */  "vor8B",
  /* 1584 */  "vor8B_reg",
  /* 1585 */  "vor8B_mem",
  /* 1586 */  "vor16B",
  /* 1587 */  "vor16B_reg",
  /* 1588 */  "vor16B_mem",
  /* 1589 */  "vor32B_reg",
  /* 1590 */  "vor32B_mem",
  /* 1591 */  "vor64B_reg",
  /* 1592 */  "vor64B_mem",
  /* 1593 */  "vxor4B",
  /* 1594 */  "vxor4B_reg",
  /* 1595 */  "vxor4B_mem",
  /* 1596 */  "vxor8B",
  /* 1597 */  "vxor8B_reg",
  /* 1598 */  "vxor8B_mem",
  /* 1599 */  "vxor16B",
  /* 1600 */  "vxor16B_reg",
  /* 1601 */  "vxor16B_mem",
  /* 1602 */  "vxor32B_reg",
  /* 1603 */  "vxor32B_mem",
  /* 1604 */  "vxor64B_reg",
  /* 1605 */  "vxor64B_mem",
  // last instruction
  "invalid rule name" // no trailing comma
};

const        bool  swallowed[] = {
  /*    0 */  false,
  /*    1 */  false,
  /*    2 */  false,
  /*    3 */  false,
  /*    4 */  false,
  /*    5 */  false,
  /*    6 */  false,
  /*    7 */  false,
  /*    8 */  true,
  /*    9 */  true,
  /*   10 */  true,
  /*   11 */  true,
  /*   12 */  true,
  /*   13 */  true,
  /*   14 */  true,
  /*   15 */  true,
  /*   16 */  true,
  /*   17 */  true,
  /*   18 */  true,
  /*   19 */  true,
  /*   20 */  true,
  /*   21 */  true,
  /*   22 */  true,
  /*   23 */  true,
  /*   24 */  true,
  /*   25 */  true,
  /*   26 */  true,
  /*   27 */  true,
  /*   28 */  true,
  /*   29 */  true,
  /*   30 */  true,
  /*   31 */  true,
  /*   32 */  true,
  /*   33 */  true,
  /*   34 */  true,
  /*   35 */  true,
  /*   36 */  true,
  /*   37 */  true,
  /*   38 */  true,
  /*   39 */  true,
  /*   40 */  true,
  /*   41 */  true,
  /*   42 */  true,
  /*   43 */  true,
  /*   44 */  false,
  /*   45 */  false,
  /*   46 */  false,
  /*   47 */  false,
  /*   48 */  false,
  /*   49 */  false,
  /*   50 */  false,
  /*   51 */  false,
  /*   52 */  false,
  /*   53 */  false,
  /*   54 */  false,
  /*   55 */  false,
  /*   56 */  false,
  /*   57 */  false,
  /*   58 */  false,
  /*   59 */  false,
  /*   60 */  false,
  /*   61 */  false,
  /*   62 */  false,
  /*   63 */  false,
  /*   64 */  false,
  /*   65 */  false,
  /*   66 */  false,
  /*   67 */  false,
  /*   68 */  false,
  /*   69 */  false,
  /*   70 */  false,
  /*   71 */  false,
  /*   72 */  false,
  /*   73 */  false,
  /*   74 */  false,
  /*   75 */  false,
  /*   76 */  false,
  /*   77 */  false,
  /*   78 */  false,
  /*   79 */  false,
  /*   80 */  false,
  /*   81 */  false,
  /*   82 */  false,
  /*   83 */  false,
  /*   84 */  false,
  /*   85 */  false,
  /*   86 */  false,
  /*   87 */  false,
  /*   88 */  false,
  /*   89 */  false,
  /*   90 */  false,
  /*   91 */  false,
  /*   92 */  false,
  /*   93 */  false,
  /*   94 */  false,
  /*   95 */  false,
  /*   96 */  false,
  /*   97 */  false,
  /*   98 */  false,
  /*   99 */  false,
  /*  100 */  false,
  /*  101 */  false,
  /*  102 */  false,
  /*  103 */  false,
  /*  104 */  false,
  /*  105 */  true,
  /*  106 */  true,
  /*  107 */  true,
  /*  108 */  true,
  /*  109 */  false,
  /*  110 */  true,
  // last operand
  /*  111 */  false,
  // last operand class
  /*  112 */  false,
  /*  113 */  false,
  /*  114 */  false,
  /*  115 */  false,
  /*  116 */  false,
  /*  117 */  false,
  /*  118 */  false,
  /*  119 */  false,
  /*  120 */  false,
  /*  121 */  false,
  /*  122 */  false,
  /*  123 */  false,
  /*  124 */  false,
  /*  125 */  false,
  /*  126 */  false,
  /*  127 */  false,
  /*  128 */  false,
  /*  129 */  false,
  /*  130 */  false,
  /*  131 */  false,
  /*  132 */  false,
  /*  133 */  false,
  /*  134 */  false,
  /*  135 */  false,
  /*  136 */  false,
  /*  137 */  false,
  /*  138 */  false,
  /*  139 */  false,
  /*  140 */  false,
  /*  141 */  false,
  /*  142 */  false,
  /*  143 */  false,
  /*  144 */  false,
  /*  145 */  false,
  /*  146 */  false,
  /*  147 */  false,
  /*  148 */  false,
  /*  149 */  false,
  /*  150 */  false,
  /*  151 */  false,
  /*  152 */  false,
  /*  153 */  false,
  /*  154 */  false,
  /*  155 */  false,
  /*  156 */  false,
  /*  157 */  false,
  /*  158 */  false,
  /*  159 */  false,
  /*  160 */  false,
  /*  161 */  false,
  /*  162 */  false,
  /*  163 */  false,
  /*  164 */  false,
  /*  165 */  false,
  /*  166 */  false,
  /*  167 */  false,
  /*  168 */  false,
  /*  169 */  false,
  /*  170 */  false,
  /*  171 */  false,
  /*  172 */  false,
  /*  173 */  false,
  /*  174 */  false,
  /*  175 */  false,
  /*  176 */  false,
  /*  177 */  false,
  /*  178 */  false,
  /*  179 */  false,
  /*  180 */  false,
  /*  181 */  false,
  /*  182 */  false,
  /*  183 */  false,
  /*  184 */  false,
  /*  185 */  false,
  /*  186 */  false,
  /*  187 */  false,
  /*  188 */  false,
  /*  189 */  false,
  /*  190 */  false,
  /*  191 */  false,
  /*  192 */  false,
  /*  193 */  false,
  /*  194 */  false,
  /*  195 */  false,
  /*  196 */  false,
  /*  197 */  false,
  /*  198 */  false,
  /*  199 */  false,
  /*  200 */  false,
  /*  201 */  false,
  /*  202 */  false,
  /*  203 */  false,
  /*  204 */  false,
  /*  205 */  false,
  /*  206 */  false,
  /*  207 */  false,
  /*  208 */  false,
  /*  209 */  false,
  /*  210 */  false,
  /*  211 */  false,
  /*  212 */  false,
  /*  213 */  false,
  /*  214 */  false,
  /*  215 */  false,
  /*  216 */  false,
  /*  217 */  false,
  /*  218 */  false,
  /*  219 */  false,
  /*  220 */  false,
  /*  221 */  false,
  /*  222 */  false,
  /*  223 */  false,
  /*  224 */  false,
  /*  225 */  false,
  /*  226 */  false,
  /*  227 */  false,
  /*  228 */  false,
  /*  229 */  false,
  /*  230 */  false,
  /*  231 */  false,
  /*  232 */  false,
  /*  233 */  false,
  /*  234 */  false,
  /*  235 */  false,
  /*  236 */  false,
  /*  237 */  false,
  /*  238 */  false,
  /*  239 */  false,
  /*  240 */  false,
  /*  241 */  false,
  /*  242 */  false,
  /*  243 */  false,
  /*  244 */  false,
  /*  245 */  false,
  /*  246 */  false,
  /*  247 */  false,
  /*  248 */  false,
  /*  249 */  false,
  /*  250 */  false,
  /*  251 */  false,
  /*  252 */  false,
  /*  253 */  false,
  /*  254 */  false,
  /*  255 */  false,
  /*  256 */  false,
  /*  257 */  false,
  /*  258 */  false,
  /*  259 */  false,
  /*  260 */  false,
  /*  261 */  false,
  /*  262 */  false,
  /*  263 */  false,
  /*  264 */  false,
  /*  265 */  false,
  /*  266 */  false,
  /*  267 */  false,
  /*  268 */  false,
  /*  269 */  false,
  /*  270 */  false,
  /*  271 */  false,
  /*  272 */  false,
  /*  273 */  false,
  /*  274 */  false,
  /*  275 */  false,
  // last internally defined operand
  /*  276 */  false,
  /*  277 */  false,
  /*  278 */  false,
  /*  279 */  false,
  /*  280 */  false,
  /*  281 */  false,
  /*  282 */  false,
  /*  283 */  false,
  /*  284 */  false,
  /*  285 */  false,
  /*  286 */  false,
  /*  287 */  false,
  /*  288 */  false,
  /*  289 */  false,
  /*  290 */  false,
  /*  291 */  false,
  /*  292 */  false,
  /*  293 */  false,
  /*  294 */  false,
  /*  295 */  false,
  /*  296 */  false,
  /*  297 */  false,
  /*  298 */  false,
  /*  299 */  false,
  /*  300 */  false,
  /*  301 */  false,
  /*  302 */  false,
  /*  303 */  false,
  /*  304 */  false,
  /*  305 */  false,
  /*  306 */  false,
  /*  307 */  false,
  /*  308 */  false,
  /*  309 */  false,
  /*  310 */  false,
  /*  311 */  false,
  /*  312 */  false,
  /*  313 */  false,
  /*  314 */  false,
  /*  315 */  false,
  /*  316 */  false,
  /*  317 */  false,
  /*  318 */  false,
  /*  319 */  false,
  /*  320 */  false,
  /*  321 */  false,
  /*  322 */  false,
  /*  323 */  false,
  /*  324 */  false,
  /*  325 */  false,
  /*  326 */  false,
  /*  327 */  false,
  /*  328 */  false,
  /*  329 */  false,
  /*  330 */  false,
  /*  331 */  false,
  /*  332 */  false,
  /*  333 */  false,
  /*  334 */  false,
  /*  335 */  false,
  /*  336 */  false,
  /*  337 */  false,
  /*  338 */  false,
  /*  339 */  false,
  /*  340 */  false,
  /*  341 */  false,
  /*  342 */  false,
  /*  343 */  false,
  /*  344 */  false,
  /*  345 */  false,
  /*  346 */  false,
  /*  347 */  false,
  /*  348 */  false,
  /*  349 */  false,
  /*  350 */  false,
  /*  351 */  false,
  /*  352 */  false,
  /*  353 */  false,
  /*  354 */  false,
  /*  355 */  false,
  /*  356 */  false,
  /*  357 */  false,
  /*  358 */  false,
  /*  359 */  false,
  /*  360 */  false,
  /*  361 */  false,
  /*  362 */  false,
  /*  363 */  false,
  /*  364 */  false,
  /*  365 */  false,
  /*  366 */  false,
  /*  367 */  false,
  /*  368 */  false,
  /*  369 */  false,
  /*  370 */  false,
  /*  371 */  false,
  /*  372 */  false,
  /*  373 */  false,
  /*  374 */  false,
  /*  375 */  false,
  /*  376 */  false,
  /*  377 */  false,
  /*  378 */  false,
  /*  379 */  false,
  /*  380 */  false,
  /*  381 */  false,
  /*  382 */  false,
  /*  383 */  false,
  /*  384 */  false,
  /*  385 */  false,
  /*  386 */  false,
  /*  387 */  false,
  /*  388 */  false,
  /*  389 */  false,
  /*  390 */  false,
  /*  391 */  false,
  /*  392 */  false,
  /*  393 */  false,
  /*  394 */  false,
  /*  395 */  false,
  /*  396 */  false,
  /*  397 */  false,
  /*  398 */  false,
  /*  399 */  false,
  /*  400 */  false,
  /*  401 */  false,
  /*  402 */  false,
  /*  403 */  false,
  /*  404 */  false,
  /*  405 */  false,
  /*  406 */  false,
  /*  407 */  false,
  /*  408 */  false,
  /*  409 */  false,
  /*  410 */  false,
  /*  411 */  false,
  /*  412 */  false,
  /*  413 */  false,
  /*  414 */  false,
  /*  415 */  false,
  /*  416 */  false,
  /*  417 */  false,
  /*  418 */  false,
  /*  419 */  false,
  /*  420 */  false,
  /*  421 */  false,
  /*  422 */  false,
  /*  423 */  false,
  /*  424 */  false,
  /*  425 */  false,
  /*  426 */  false,
  /*  427 */  false,
  /*  428 */  false,
  /*  429 */  false,
  /*  430 */  false,
  /*  431 */  false,
  /*  432 */  false,
  /*  433 */  false,
  /*  434 */  false,
  /*  435 */  false,
  /*  436 */  false,
  /*  437 */  false,
  /*  438 */  false,
  /*  439 */  false,
  /*  440 */  false,
  /*  441 */  false,
  /*  442 */  false,
  /*  443 */  false,
  /*  444 */  false,
  /*  445 */  false,
  /*  446 */  false,
  /*  447 */  false,
  /*  448 */  false,
  /*  449 */  false,
  /*  450 */  false,
  /*  451 */  false,
  /*  452 */  false,
  /*  453 */  false,
  /*  454 */  false,
  /*  455 */  false,
  /*  456 */  false,
  /*  457 */  false,
  /*  458 */  false,
  /*  459 */  false,
  /*  460 */  false,
  /*  461 */  false,
  /*  462 */  false,
  /*  463 */  false,
  /*  464 */  false,
  /*  465 */  false,
  /*  466 */  false,
  /*  467 */  false,
  /*  468 */  false,
  /*  469 */  false,
  /*  470 */  false,
  /*  471 */  false,
  /*  472 */  false,
  /*  473 */  false,
  /*  474 */  false,
  /*  475 */  false,
  /*  476 */  false,
  /*  477 */  false,
  /*  478 */  false,
  /*  479 */  false,
  /*  480 */  false,
  /*  481 */  false,
  /*  482 */  false,
  /*  483 */  false,
  /*  484 */  false,
  /*  485 */  false,
  /*  486 */  false,
  /*  487 */  false,
  /*  488 */  false,
  /*  489 */  false,
  /*  490 */  false,
  /*  491 */  false,
  /*  492 */  false,
  /*  493 */  false,
  /*  494 */  false,
  /*  495 */  false,
  /*  496 */  false,
  /*  497 */  false,
  /*  498 */  false,
  /*  499 */  false,
  /*  500 */  false,
  /*  501 */  false,
  /*  502 */  false,
  /*  503 */  false,
  /*  504 */  false,
  /*  505 */  false,
  /*  506 */  false,
  /*  507 */  false,
  /*  508 */  false,
  /*  509 */  false,
  /*  510 */  false,
  /*  511 */  false,
  /*  512 */  false,
  /*  513 */  false,
  /*  514 */  false,
  /*  515 */  false,
  /*  516 */  false,
  /*  517 */  false,
  /*  518 */  false,
  /*  519 */  false,
  /*  520 */  false,
  /*  521 */  false,
  /*  522 */  false,
  /*  523 */  false,
  /*  524 */  false,
  /*  525 */  false,
  /*  526 */  false,
  /*  527 */  false,
  /*  528 */  false,
  /*  529 */  false,
  /*  530 */  false,
  /*  531 */  false,
  /*  532 */  false,
  /*  533 */  false,
  /*  534 */  false,
  /*  535 */  false,
  /*  536 */  false,
  /*  537 */  false,
  /*  538 */  false,
  /*  539 */  false,
  /*  540 */  false,
  /*  541 */  false,
  /*  542 */  false,
  /*  543 */  false,
  /*  544 */  false,
  /*  545 */  false,
  /*  546 */  false,
  /*  547 */  false,
  /*  548 */  false,
  /*  549 */  false,
  /*  550 */  false,
  /*  551 */  false,
  /*  552 */  false,
  /*  553 */  false,
  /*  554 */  false,
  /*  555 */  false,
  /*  556 */  false,
  /*  557 */  false,
  /*  558 */  false,
  /*  559 */  false,
  /*  560 */  false,
  /*  561 */  false,
  /*  562 */  false,
  /*  563 */  false,
  /*  564 */  false,
  /*  565 */  false,
  /*  566 */  false,
  /*  567 */  false,
  /*  568 */  false,
  /*  569 */  false,
  /*  570 */  false,
  /*  571 */  false,
  /*  572 */  false,
  /*  573 */  false,
  /*  574 */  false,
  /*  575 */  false,
  /*  576 */  false,
  /*  577 */  false,
  /*  578 */  false,
  /*  579 */  false,
  /*  580 */  false,
  /*  581 */  false,
  /*  582 */  false,
  /*  583 */  false,
  /*  584 */  false,
  /*  585 */  false,
  /*  586 */  false,
  /*  587 */  false,
  /*  588 */  false,
  /*  589 */  false,
  /*  590 */  false,
  /*  591 */  false,
  /*  592 */  false,
  /*  593 */  false,
  /*  594 */  false,
  /*  595 */  false,
  /*  596 */  false,
  /*  597 */  false,
  /*  598 */  false,
  /*  599 */  false,
  /*  600 */  false,
  /*  601 */  false,
  /*  602 */  false,
  /*  603 */  false,
  /*  604 */  false,
  /*  605 */  false,
  /*  606 */  false,
  /*  607 */  false,
  /*  608 */  false,
  /*  609 */  false,
  /*  610 */  false,
  /*  611 */  false,
  /*  612 */  false,
  /*  613 */  false,
  /*  614 */  false,
  /*  615 */  false,
  /*  616 */  false,
  /*  617 */  false,
  /*  618 */  false,
  /*  619 */  false,
  /*  620 */  false,
  /*  621 */  false,
  /*  622 */  false,
  /*  623 */  false,
  /*  624 */  false,
  /*  625 */  false,
  /*  626 */  false,
  /*  627 */  false,
  /*  628 */  false,
  /*  629 */  false,
  /*  630 */  false,
  /*  631 */  false,
  /*  632 */  false,
  /*  633 */  false,
  /*  634 */  false,
  /*  635 */  false,
  /*  636 */  false,
  /*  637 */  false,
  /*  638 */  false,
  /*  639 */  false,
  /*  640 */  false,
  /*  641 */  false,
  /*  642 */  false,
  /*  643 */  false,
  /*  644 */  false,
  /*  645 */  false,
  /*  646 */  false,
  /*  647 */  false,
  /*  648 */  false,
  /*  649 */  false,
  /*  650 */  false,
  /*  651 */  false,
  /*  652 */  false,
  /*  653 */  false,
  /*  654 */  false,
  /*  655 */  false,
  /*  656 */  false,
  /*  657 */  false,
  /*  658 */  false,
  /*  659 */  false,
  /*  660 */  false,
  /*  661 */  false,
  /*  662 */  false,
  /*  663 */  false,
  /*  664 */  false,
  /*  665 */  false,
  /*  666 */  false,
  /*  667 */  false,
  /*  668 */  false,
  /*  669 */  false,
  /*  670 */  false,
  /*  671 */  false,
  /*  672 */  false,
  /*  673 */  false,
  /*  674 */  false,
  /*  675 */  false,
  /*  676 */  false,
  /*  677 */  false,
  /*  678 */  false,
  /*  679 */  false,
  /*  680 */  false,
  /*  681 */  false,
  /*  682 */  false,
  /*  683 */  false,
  /*  684 */  false,
  /*  685 */  false,
  /*  686 */  false,
  /*  687 */  false,
  /*  688 */  false,
  /*  689 */  false,
  /*  690 */  false,
  /*  691 */  false,
  /*  692 */  false,
  /*  693 */  false,
  /*  694 */  false,
  /*  695 */  false,
  /*  696 */  false,
  /*  697 */  false,
  /*  698 */  false,
  /*  699 */  false,
  /*  700 */  false,
  /*  701 */  false,
  /*  702 */  false,
  /*  703 */  false,
  /*  704 */  false,
  /*  705 */  false,
  /*  706 */  false,
  /*  707 */  false,
  /*  708 */  false,
  /*  709 */  false,
  /*  710 */  false,
  /*  711 */  false,
  /*  712 */  false,
  /*  713 */  false,
  /*  714 */  false,
  /*  715 */  false,
  /*  716 */  false,
  /*  717 */  false,
  /*  718 */  false,
  /*  719 */  false,
  /*  720 */  false,
  /*  721 */  false,
  /*  722 */  false,
  /*  723 */  false,
  /*  724 */  false,
  /*  725 */  false,
  /*  726 */  false,
  /*  727 */  false,
  /*  728 */  false,
  /*  729 */  false,
  /*  730 */  false,
  /*  731 */  false,
  /*  732 */  false,
  /*  733 */  false,
  /*  734 */  false,
  /*  735 */  false,
  /*  736 */  false,
  /*  737 */  false,
  /*  738 */  false,
  /*  739 */  false,
  /*  740 */  false,
  /*  741 */  false,
  /*  742 */  false,
  /*  743 */  false,
  /*  744 */  false,
  /*  745 */  false,
  /*  746 */  false,
  /*  747 */  false,
  /*  748 */  false,
  /*  749 */  false,
  /*  750 */  false,
  /*  751 */  false,
  /*  752 */  false,
  /*  753 */  false,
  /*  754 */  false,
  /*  755 */  false,
  /*  756 */  false,
  /*  757 */  false,
  /*  758 */  false,
  /*  759 */  false,
  /*  760 */  false,
  /*  761 */  false,
  /*  762 */  false,
  /*  763 */  false,
  /*  764 */  false,
  /*  765 */  false,
  /*  766 */  false,
  /*  767 */  false,
  /*  768 */  false,
  /*  769 */  false,
  /*  770 */  false,
  /*  771 */  false,
  /*  772 */  false,
  /*  773 */  false,
  /*  774 */  false,
  /*  775 */  false,
  /*  776 */  false,
  /*  777 */  false,
  /*  778 */  false,
  /*  779 */  false,
  /*  780 */  false,
  /*  781 */  false,
  /*  782 */  false,
  /*  783 */  false,
  /*  784 */  false,
  /*  785 */  false,
  /*  786 */  false,
  /*  787 */  false,
  /*  788 */  false,
  /*  789 */  false,
  /*  790 */  false,
  /*  791 */  false,
  /*  792 */  false,
  /*  793 */  false,
  /*  794 */  false,
  /*  795 */  false,
  /*  796 */  false,
  /*  797 */  false,
  /*  798 */  false,
  /*  799 */  false,
  /*  800 */  false,
  /*  801 */  false,
  /*  802 */  false,
  /*  803 */  false,
  /*  804 */  false,
  /*  805 */  false,
  /*  806 */  false,
  /*  807 */  false,
  /*  808 */  false,
  /*  809 */  false,
  /*  810 */  false,
  /*  811 */  false,
  /*  812 */  false,
  /*  813 */  false,
  /*  814 */  false,
  /*  815 */  false,
  /*  816 */  false,
  /*  817 */  false,
  /*  818 */  false,
  /*  819 */  false,
  /*  820 */  false,
  /*  821 */  false,
  /*  822 */  false,
  /*  823 */  false,
  /*  824 */  false,
  /*  825 */  false,
  /*  826 */  false,
  /*  827 */  false,
  /*  828 */  false,
  /*  829 */  false,
  /*  830 */  false,
  /*  831 */  false,
  /*  832 */  false,
  /*  833 */  false,
  /*  834 */  false,
  /*  835 */  false,
  /*  836 */  false,
  /*  837 */  false,
  /*  838 */  false,
  /*  839 */  false,
  /*  840 */  false,
  /*  841 */  false,
  /*  842 */  false,
  /*  843 */  false,
  /*  844 */  false,
  /*  845 */  false,
  /*  846 */  false,
  /*  847 */  false,
  /*  848 */  false,
  /*  849 */  false,
  /*  850 */  false,
  /*  851 */  false,
  /*  852 */  false,
  /*  853 */  false,
  /*  854 */  false,
  /*  855 */  false,
  /*  856 */  false,
  /*  857 */  false,
  /*  858 */  false,
  /*  859 */  false,
  /*  860 */  false,
  /*  861 */  false,
  /*  862 */  false,
  /*  863 */  false,
  /*  864 */  false,
  /*  865 */  false,
  /*  866 */  false,
  /*  867 */  false,
  /*  868 */  false,
  /*  869 */  false,
  /*  870 */  false,
  /*  871 */  false,
  /*  872 */  false,
  /*  873 */  false,
  /*  874 */  false,
  /*  875 */  false,
  /*  876 */  false,
  /*  877 */  false,
  /*  878 */  false,
  /*  879 */  false,
  /*  880 */  false,
  /*  881 */  false,
  /*  882 */  false,
  /*  883 */  false,
  /*  884 */  false,
  /*  885 */  false,
  /*  886 */  false,
  /*  887 */  false,
  /*  888 */  false,
  /*  889 */  false,
  /*  890 */  false,
  /*  891 */  false,
  /*  892 */  false,
  /*  893 */  false,
  /*  894 */  false,
  /*  895 */  false,
  /*  896 */  false,
  /*  897 */  false,
  /*  898 */  false,
  /*  899 */  false,
  /*  900 */  false,
  /*  901 */  false,
  /*  902 */  false,
  /*  903 */  false,
  /*  904 */  false,
  /*  905 */  false,
  /*  906 */  false,
  /*  907 */  false,
  /*  908 */  false,
  /*  909 */  false,
  /*  910 */  false,
  /*  911 */  false,
  /*  912 */  false,
  /*  913 */  false,
  /*  914 */  false,
  /*  915 */  false,
  /*  916 */  false,
  /*  917 */  false,
  /*  918 */  false,
  /*  919 */  false,
  /*  920 */  false,
  /*  921 */  false,
  /*  922 */  false,
  /*  923 */  false,
  /*  924 */  false,
  /*  925 */  false,
  /*  926 */  false,
  /*  927 */  false,
  /*  928 */  false,
  /*  929 */  false,
  /*  930 */  false,
  /*  931 */  false,
  /*  932 */  false,
  /*  933 */  false,
  /*  934 */  false,
  /*  935 */  false,
  /*  936 */  false,
  /*  937 */  false,
  /*  938 */  false,
  /*  939 */  false,
  /*  940 */  false,
  /*  941 */  false,
  /*  942 */  false,
  /*  943 */  false,
  /*  944 */  false,
  /*  945 */  false,
  /*  946 */  false,
  /*  947 */  false,
  /*  948 */  false,
  /*  949 */  false,
  /*  950 */  false,
  /*  951 */  false,
  /*  952 */  false,
  /*  953 */  false,
  /*  954 */  false,
  /*  955 */  false,
  /*  956 */  false,
  /*  957 */  false,
  /*  958 */  false,
  /*  959 */  false,
  /*  960 */  false,
  /*  961 */  false,
  /*  962 */  false,
  /*  963 */  false,
  /*  964 */  false,
  /*  965 */  false,
  /*  966 */  false,
  /*  967 */  false,
  /*  968 */  false,
  /*  969 */  false,
  /*  970 */  false,
  /*  971 */  false,
  /*  972 */  false,
  /*  973 */  false,
  /*  974 */  false,
  /*  975 */  false,
  /*  976 */  false,
  /*  977 */  false,
  /*  978 */  false,
  /*  979 */  false,
  /*  980 */  false,
  /*  981 */  false,
  /*  982 */  false,
  /*  983 */  false,
  /*  984 */  false,
  /*  985 */  false,
  /*  986 */  false,
  /*  987 */  false,
  /*  988 */  false,
  /*  989 */  false,
  /*  990 */  false,
  /*  991 */  false,
  /*  992 */  false,
  /*  993 */  false,
  /*  994 */  false,
  /*  995 */  false,
  /*  996 */  false,
  /*  997 */  false,
  /*  998 */  false,
  /*  999 */  false,
  /* 1000 */  false,
  /* 1001 */  false,
  /* 1002 */  false,
  /* 1003 */  false,
  /* 1004 */  false,
  /* 1005 */  false,
  /* 1006 */  false,
  /* 1007 */  false,
  /* 1008 */  false,
  /* 1009 */  false,
  /* 1010 */  false,
  /* 1011 */  false,
  /* 1012 */  false,
  /* 1013 */  false,
  /* 1014 */  false,
  /* 1015 */  false,
  /* 1016 */  false,
  /* 1017 */  false,
  /* 1018 */  false,
  /* 1019 */  false,
  /* 1020 */  false,
  /* 1021 */  false,
  /* 1022 */  false,
  /* 1023 */  false,
  /* 1024 */  false,
  /* 1025 */  false,
  /* 1026 */  false,
  /* 1027 */  false,
  /* 1028 */  false,
  /* 1029 */  false,
  /* 1030 */  false,
  /* 1031 */  false,
  /* 1032 */  false,
  /* 1033 */  false,
  /* 1034 */  false,
  /* 1035 */  false,
  /* 1036 */  false,
  /* 1037 */  false,
  /* 1038 */  false,
  /* 1039 */  false,
  /* 1040 */  false,
  /* 1041 */  false,
  /* 1042 */  false,
  /* 1043 */  false,
  /* 1044 */  false,
  /* 1045 */  false,
  /* 1046 */  false,
  /* 1047 */  false,
  /* 1048 */  false,
  /* 1049 */  false,
  /* 1050 */  false,
  /* 1051 */  false,
  /* 1052 */  false,
  /* 1053 */  false,
  /* 1054 */  false,
  /* 1055 */  false,
  /* 1056 */  false,
  /* 1057 */  false,
  /* 1058 */  false,
  /* 1059 */  false,
  /* 1060 */  false,
  /* 1061 */  false,
  /* 1062 */  false,
  /* 1063 */  false,
  /* 1064 */  false,
  /* 1065 */  false,
  /* 1066 */  false,
  /* 1067 */  false,
  /* 1068 */  false,
  /* 1069 */  false,
  /* 1070 */  false,
  /* 1071 */  false,
  /* 1072 */  false,
  /* 1073 */  false,
  /* 1074 */  false,
  /* 1075 */  false,
  /* 1076 */  false,
  /* 1077 */  false,
  /* 1078 */  false,
  /* 1079 */  false,
  /* 1080 */  false,
  /* 1081 */  false,
  /* 1082 */  false,
  /* 1083 */  false,
  /* 1084 */  false,
  /* 1085 */  false,
  /* 1086 */  false,
  /* 1087 */  false,
  /* 1088 */  false,
  /* 1089 */  false,
  /* 1090 */  false,
  /* 1091 */  false,
  /* 1092 */  false,
  /* 1093 */  false,
  /* 1094 */  false,
  /* 1095 */  false,
  /* 1096 */  false,
  /* 1097 */  false,
  /* 1098 */  false,
  /* 1099 */  false,
  /* 1100 */  false,
  /* 1101 */  false,
  /* 1102 */  false,
  /* 1103 */  false,
  /* 1104 */  false,
  /* 1105 */  false,
  /* 1106 */  false,
  /* 1107 */  false,
  /* 1108 */  false,
  /* 1109 */  false,
  /* 1110 */  false,
  /* 1111 */  false,
  /* 1112 */  false,
  /* 1113 */  false,
  /* 1114 */  false,
  /* 1115 */  false,
  /* 1116 */  false,
  /* 1117 */  false,
  /* 1118 */  false,
  /* 1119 */  false,
  /* 1120 */  false,
  /* 1121 */  false,
  /* 1122 */  false,
  /* 1123 */  false,
  /* 1124 */  false,
  /* 1125 */  false,
  /* 1126 */  false,
  /* 1127 */  false,
  /* 1128 */  false,
  /* 1129 */  false,
  /* 1130 */  false,
  /* 1131 */  false,
  /* 1132 */  false,
  /* 1133 */  false,
  /* 1134 */  false,
  /* 1135 */  false,
  /* 1136 */  false,
  /* 1137 */  false,
  /* 1138 */  false,
  /* 1139 */  false,
  /* 1140 */  false,
  /* 1141 */  false,
  /* 1142 */  false,
  /* 1143 */  false,
  /* 1144 */  false,
  /* 1145 */  false,
  /* 1146 */  false,
  /* 1147 */  false,
  /* 1148 */  false,
  /* 1149 */  false,
  /* 1150 */  false,
  /* 1151 */  false,
  /* 1152 */  false,
  /* 1153 */  false,
  /* 1154 */  false,
  /* 1155 */  false,
  /* 1156 */  false,
  /* 1157 */  false,
  /* 1158 */  false,
  /* 1159 */  false,
  /* 1160 */  false,
  /* 1161 */  false,
  /* 1162 */  false,
  /* 1163 */  false,
  /* 1164 */  false,
  /* 1165 */  false,
  /* 1166 */  false,
  /* 1167 */  false,
  /* 1168 */  false,
  /* 1169 */  false,
  /* 1170 */  false,
  /* 1171 */  false,
  /* 1172 */  false,
  /* 1173 */  false,
  /* 1174 */  false,
  /* 1175 */  false,
  /* 1176 */  false,
  /* 1177 */  false,
  /* 1178 */  false,
  /* 1179 */  false,
  /* 1180 */  false,
  /* 1181 */  false,
  /* 1182 */  false,
  /* 1183 */  false,
  /* 1184 */  false,
  /* 1185 */  false,
  /* 1186 */  false,
  /* 1187 */  false,
  /* 1188 */  false,
  /* 1189 */  false,
  /* 1190 */  false,
  /* 1191 */  false,
  /* 1192 */  false,
  /* 1193 */  false,
  /* 1194 */  false,
  /* 1195 */  false,
  /* 1196 */  false,
  /* 1197 */  false,
  /* 1198 */  false,
  /* 1199 */  false,
  /* 1200 */  false,
  /* 1201 */  false,
  /* 1202 */  false,
  /* 1203 */  false,
  /* 1204 */  false,
  /* 1205 */  false,
  /* 1206 */  false,
  /* 1207 */  false,
  /* 1208 */  false,
  /* 1209 */  false,
  /* 1210 */  false,
  /* 1211 */  false,
  /* 1212 */  false,
  /* 1213 */  false,
  /* 1214 */  false,
  /* 1215 */  false,
  /* 1216 */  false,
  /* 1217 */  false,
  /* 1218 */  false,
  /* 1219 */  false,
  /* 1220 */  false,
  /* 1221 */  false,
  /* 1222 */  false,
  /* 1223 */  false,
  /* 1224 */  false,
  /* 1225 */  false,
  /* 1226 */  false,
  /* 1227 */  false,
  /* 1228 */  false,
  /* 1229 */  false,
  /* 1230 */  false,
  /* 1231 */  false,
  /* 1232 */  false,
  /* 1233 */  false,
  /* 1234 */  false,
  /* 1235 */  false,
  /* 1236 */  false,
  /* 1237 */  false,
  /* 1238 */  false,
  /* 1239 */  false,
  /* 1240 */  false,
  /* 1241 */  false,
  /* 1242 */  false,
  /* 1243 */  false,
  /* 1244 */  false,
  /* 1245 */  false,
  /* 1246 */  false,
  /* 1247 */  false,
  /* 1248 */  false,
  /* 1249 */  false,
  /* 1250 */  false,
  /* 1251 */  false,
  /* 1252 */  false,
  /* 1253 */  false,
  /* 1254 */  false,
  /* 1255 */  false,
  /* 1256 */  false,
  /* 1257 */  false,
  /* 1258 */  false,
  /* 1259 */  false,
  /* 1260 */  false,
  /* 1261 */  false,
  /* 1262 */  false,
  /* 1263 */  false,
  /* 1264 */  false,
  /* 1265 */  false,
  /* 1266 */  false,
  /* 1267 */  false,
  /* 1268 */  false,
  /* 1269 */  false,
  /* 1270 */  false,
  /* 1271 */  false,
  /* 1272 */  false,
  /* 1273 */  false,
  /* 1274 */  false,
  /* 1275 */  false,
  /* 1276 */  false,
  /* 1277 */  false,
  /* 1278 */  false,
  /* 1279 */  false,
  /* 1280 */  false,
  /* 1281 */  false,
  /* 1282 */  false,
  /* 1283 */  false,
  /* 1284 */  false,
  /* 1285 */  false,
  /* 1286 */  false,
  /* 1287 */  false,
  /* 1288 */  false,
  /* 1289 */  false,
  /* 1290 */  false,
  /* 1291 */  false,
  /* 1292 */  false,
  /* 1293 */  false,
  /* 1294 */  false,
  /* 1295 */  false,
  /* 1296 */  false,
  /* 1297 */  false,
  /* 1298 */  false,
  /* 1299 */  false,
  /* 1300 */  false,
  /* 1301 */  false,
  /* 1302 */  false,
  /* 1303 */  false,
  /* 1304 */  false,
  /* 1305 */  false,
  /* 1306 */  false,
  /* 1307 */  false,
  /* 1308 */  false,
  /* 1309 */  false,
  /* 1310 */  false,
  /* 1311 */  false,
  /* 1312 */  false,
  /* 1313 */  false,
  /* 1314 */  false,
  /* 1315 */  false,
  /* 1316 */  false,
  /* 1317 */  false,
  /* 1318 */  false,
  /* 1319 */  false,
  /* 1320 */  false,
  /* 1321 */  false,
  /* 1322 */  false,
  /* 1323 */  false,
  /* 1324 */  false,
  /* 1325 */  false,
  /* 1326 */  false,
  /* 1327 */  false,
  /* 1328 */  false,
  /* 1329 */  false,
  /* 1330 */  false,
  /* 1331 */  false,
  /* 1332 */  false,
  /* 1333 */  false,
  /* 1334 */  false,
  /* 1335 */  false,
  /* 1336 */  false,
  /* 1337 */  false,
  /* 1338 */  false,
  /* 1339 */  false,
  /* 1340 */  false,
  /* 1341 */  false,
  /* 1342 */  false,
  /* 1343 */  false,
  /* 1344 */  false,
  /* 1345 */  false,
  /* 1346 */  false,
  /* 1347 */  false,
  /* 1348 */  false,
  /* 1349 */  false,
  /* 1350 */  false,
  /* 1351 */  false,
  /* 1352 */  false,
  /* 1353 */  false,
  /* 1354 */  false,
  /* 1355 */  false,
  /* 1356 */  false,
  /* 1357 */  false,
  /* 1358 */  false,
  /* 1359 */  false,
  /* 1360 */  false,
  /* 1361 */  false,
  /* 1362 */  false,
  /* 1363 */  false,
  /* 1364 */  false,
  /* 1365 */  false,
  /* 1366 */  false,
  /* 1367 */  false,
  /* 1368 */  false,
  /* 1369 */  false,
  /* 1370 */  false,
  /* 1371 */  false,
  /* 1372 */  false,
  /* 1373 */  false,
  /* 1374 */  false,
  /* 1375 */  false,
  /* 1376 */  false,
  /* 1377 */  false,
  /* 1378 */  false,
  /* 1379 */  false,
  /* 1380 */  false,
  /* 1381 */  false,
  /* 1382 */  false,
  /* 1383 */  false,
  /* 1384 */  false,
  /* 1385 */  false,
  /* 1386 */  false,
  /* 1387 */  false,
  /* 1388 */  false,
  /* 1389 */  false,
  /* 1390 */  false,
  /* 1391 */  false,
  /* 1392 */  false,
  /* 1393 */  false,
  /* 1394 */  false,
  /* 1395 */  false,
  /* 1396 */  false,
  /* 1397 */  false,
  /* 1398 */  false,
  /* 1399 */  false,
  /* 1400 */  false,
  /* 1401 */  false,
  /* 1402 */  false,
  /* 1403 */  false,
  /* 1404 */  false,
  /* 1405 */  false,
  /* 1406 */  false,
  /* 1407 */  false,
  /* 1408 */  false,
  /* 1409 */  false,
  /* 1410 */  false,
  /* 1411 */  false,
  /* 1412 */  false,
  /* 1413 */  false,
  /* 1414 */  false,
  /* 1415 */  false,
  /* 1416 */  false,
  /* 1417 */  false,
  /* 1418 */  false,
  /* 1419 */  false,
  /* 1420 */  false,
  /* 1421 */  false,
  /* 1422 */  false,
  /* 1423 */  false,
  /* 1424 */  false,
  /* 1425 */  false,
  /* 1426 */  false,
  /* 1427 */  false,
  /* 1428 */  false,
  /* 1429 */  false,
  /* 1430 */  false,
  /* 1431 */  false,
  /* 1432 */  false,
  /* 1433 */  false,
  /* 1434 */  false,
  /* 1435 */  false,
  /* 1436 */  false,
  /* 1437 */  false,
  /* 1438 */  false,
  /* 1439 */  false,
  /* 1440 */  false,
  /* 1441 */  false,
  /* 1442 */  false,
  /* 1443 */  false,
  /* 1444 */  false,
  /* 1445 */  false,
  /* 1446 */  false,
  /* 1447 */  false,
  /* 1448 */  false,
  /* 1449 */  false,
  /* 1450 */  false,
  /* 1451 */  false,
  /* 1452 */  false,
  /* 1453 */  false,
  /* 1454 */  false,
  /* 1455 */  false,
  /* 1456 */  false,
  /* 1457 */  false,
  /* 1458 */  false,
  /* 1459 */  false,
  /* 1460 */  false,
  /* 1461 */  false,
  /* 1462 */  false,
  /* 1463 */  false,
  /* 1464 */  false,
  /* 1465 */  false,
  /* 1466 */  false,
  /* 1467 */  false,
  /* 1468 */  false,
  /* 1469 */  false,
  /* 1470 */  false,
  /* 1471 */  false,
  /* 1472 */  false,
  /* 1473 */  false,
  /* 1474 */  false,
  /* 1475 */  false,
  /* 1476 */  false,
  /* 1477 */  false,
  /* 1478 */  false,
  /* 1479 */  false,
  /* 1480 */  false,
  /* 1481 */  false,
  /* 1482 */  false,
  /* 1483 */  false,
  /* 1484 */  false,
  /* 1485 */  false,
  /* 1486 */  false,
  /* 1487 */  false,
  /* 1488 */  false,
  /* 1489 */  false,
  /* 1490 */  false,
  /* 1491 */  false,
  /* 1492 */  false,
  /* 1493 */  false,
  /* 1494 */  false,
  /* 1495 */  false,
  /* 1496 */  false,
  /* 1497 */  false,
  /* 1498 */  false,
  /* 1499 */  false,
  /* 1500 */  false,
  /* 1501 */  false,
  /* 1502 */  false,
  /* 1503 */  false,
  /* 1504 */  false,
  /* 1505 */  false,
  /* 1506 */  false,
  /* 1507 */  false,
  /* 1508 */  false,
  /* 1509 */  false,
  /* 1510 */  false,
  /* 1511 */  false,
  /* 1512 */  false,
  /* 1513 */  false,
  /* 1514 */  false,
  /* 1515 */  false,
  /* 1516 */  false,
  /* 1517 */  false,
  /* 1518 */  false,
  /* 1519 */  false,
  /* 1520 */  false,
  /* 1521 */  false,
  /* 1522 */  false,
  /* 1523 */  false,
  /* 1524 */  false,
  /* 1525 */  false,
  /* 1526 */  false,
  /* 1527 */  false,
  /* 1528 */  false,
  /* 1529 */  false,
  /* 1530 */  false,
  /* 1531 */  false,
  /* 1532 */  false,
  /* 1533 */  false,
  /* 1534 */  false,
  /* 1535 */  false,
  /* 1536 */  false,
  /* 1537 */  false,
  /* 1538 */  false,
  /* 1539 */  false,
  /* 1540 */  false,
  /* 1541 */  false,
  /* 1542 */  false,
  /* 1543 */  false,
  /* 1544 */  false,
  /* 1545 */  false,
  /* 1546 */  false,
  /* 1547 */  false,
  /* 1548 */  false,
  /* 1549 */  false,
  /* 1550 */  false,
  /* 1551 */  false,
  /* 1552 */  false,
  /* 1553 */  false,
  /* 1554 */  false,
  /* 1555 */  false,
  /* 1556 */  false,
  /* 1557 */  false,
  /* 1558 */  false,
  /* 1559 */  false,
  /* 1560 */  false,
  /* 1561 */  false,
  /* 1562 */  false,
  /* 1563 */  false,
  /* 1564 */  false,
  /* 1565 */  false,
  /* 1566 */  false,
  /* 1567 */  false,
  /* 1568 */  false,
  /* 1569 */  false,
  /* 1570 */  false,
  /* 1571 */  false,
  /* 1572 */  false,
  /* 1573 */  false,
  /* 1574 */  false,
  /* 1575 */  false,
  /* 1576 */  false,
  /* 1577 */  false,
  /* 1578 */  false,
  /* 1579 */  false,
  /* 1580 */  false,
  /* 1581 */  false,
  /* 1582 */  false,
  /* 1583 */  false,
  /* 1584 */  false,
  /* 1585 */  false,
  /* 1586 */  false,
  /* 1587 */  false,
  /* 1588 */  false,
  /* 1589 */  false,
  /* 1590 */  false,
  /* 1591 */  false,
  /* 1592 */  false,
  /* 1593 */  false,
  /* 1594 */  false,
  /* 1595 */  false,
  /* 1596 */  false,
  /* 1597 */  false,
  /* 1598 */  false,
  /* 1599 */  false,
  /* 1600 */  false,
  /* 1601 */  false,
  /* 1602 */  false,
  /* 1603 */  false,
  /* 1604 */  false,
  /* 1605 */  false,
  // last instruction
  false // no trailing comma
};

// Mapping from machine-independent opcode to boolean
const        char must_clone[] = {
  0, // Node: 0
  0, // Set: 1
  0, // RegN: 2
  0, // RegI: 3
  0, // RegP: 4
  0, // RegF: 5
  0, // RegD: 6
  0, // RegL: 7
  0, // RegFlags: 8
  0, // VecS: 9
  0, // VecD: 10
  0, // VecX: 11
  0, // VecY: 12
  0, // VecZ: 13
  0, // _last_machine_leaf: 14
  0, // AbsD: 15
  0, // AbsF: 16
  0, // AbsI: 17
  0, // AddD: 18
  0, // AddF: 19
  0, // AddI: 20
  0, // AddL: 21
  0, // AddP: 22
  0, // Allocate: 23
  0, // AllocateArray: 24
  0, // AndI: 25
  0, // AndL: 26
  0, // ArrayCopy: 27
  0, // AryEq: 28
  0, // AtanD: 29
  1, // Binary: 30
  1, // Bool: 31
  0, // BoxLock: 32
  0, // ReverseBytesI: 33
  0, // ReverseBytesL: 34
  0, // ReverseBytesUS: 35
  0, // ReverseBytesS: 36
  0, // CProj: 37
  0, // CallDynamicJava: 38
  0, // CallJava: 39
  0, // CallLeaf: 40
  0, // CallLeafNoFP: 41
  0, // CallRuntime: 42
  0, // CallStaticJava: 43
  0, // CastII: 44
  0, // CastX2P: 45
  0, // CastP2X: 46
  0, // CastPP: 47
  0, // Catch: 48
  0, // CatchProj: 49
  0, // CheckCastPP: 50
  0, // ClearArray: 51
  0, // ConstraintCast: 52
  0, // CMoveD: 53
  0, // CMoveVD: 54
  0, // CMoveF: 55
  0, // CMoveI: 56
  0, // CMoveL: 57
  0, // CMoveP: 58
  0, // CMoveN: 59
  1, // CmpN: 60
  1, // CmpD: 61
  0, // CmpD3: 62
  1, // CmpF: 63
  0, // CmpF3: 64
  1, // CmpI: 65
  1, // CmpL: 66
  0, // CmpL3: 67
  0, // CmpLTMask: 68
  1, // CmpP: 69
  1, // CmpU: 70
  1, // CmpUL: 71
  0, // CompareAndSwapB: 72
  0, // CompareAndSwapS: 73
  0, // CompareAndSwapI: 74
  0, // CompareAndSwapL: 75
  0, // CompareAndSwapP: 76
  0, // CompareAndSwapN: 77
  0, // WeakCompareAndSwapB: 78
  0, // WeakCompareAndSwapS: 79
  0, // WeakCompareAndSwapI: 80
  0, // WeakCompareAndSwapL: 81
  0, // WeakCompareAndSwapP: 82
  0, // WeakCompareAndSwapN: 83
  0, // CompareAndExchangeB: 84
  0, // CompareAndExchangeS: 85
  0, // CompareAndExchangeI: 86
  0, // CompareAndExchangeL: 87
  0, // CompareAndExchangeP: 88
  0, // CompareAndExchangeN: 89
  0, // GetAndAddB: 90
  0, // GetAndAddS: 91
  0, // GetAndAddI: 92
  0, // GetAndAddL: 93
  0, // GetAndSetB: 94
  0, // GetAndSetS: 95
  0, // GetAndSetI: 96
  0, // GetAndSetL: 97
  0, // GetAndSetP: 98
  0, // GetAndSetN: 99
  0, // Con: 100
  0, // ConN: 101
  0, // ConNKlass: 102
  0, // ConD: 103
  0, // ConF: 104
  0, // ConI: 105
  0, // ConL: 106
  0, // ConP: 107
  0, // Conv2B: 108
  0, // ConvD2F: 109
  0, // ConvD2I: 110
  0, // ConvD2L: 111
  0, // ConvF2D: 112
  0, // ConvF2I: 113
  0, // ConvF2L: 114
  0, // ConvI2D: 115
  0, // ConvI2F: 116
  0, // ConvI2L: 117
  0, // ConvL2D: 118
  0, // ConvL2F: 119
  0, // ConvL2I: 120
  0, // CountedLoop: 121
  0, // CountedLoopEnd: 122
  0, // CountLeadingZerosI: 123
  0, // CountLeadingZerosL: 124
  0, // CountTrailingZerosI: 125
  0, // CountTrailingZerosL: 126
  0, // CreateEx: 127
  0, // DecodeN: 128
  0, // DecodeNKlass: 129
  0, // DivD: 130
  0, // DivF: 131
  0, // DivI: 132
  0, // DivL: 133
  0, // DivMod: 134
  0, // DivModI: 135
  0, // DivModL: 136
  0, // EncodeISOArray: 137
  0, // EncodeP: 138
  0, // EncodePKlass: 139
  1, // FastLock: 140
  1, // FastUnlock: 141
  0, // FmaD: 142
  0, // FmaF: 143
  0, // Goto: 144
  0, // Halt: 145
  0, // HasNegatives: 146
  0, // If: 147
  0, // RangeCheck: 148
  0, // IfFalse: 149
  0, // IfTrue: 150
  0, // Initialize: 151
  0, // JProj: 152
  0, // Jump: 153
  0, // JumpProj: 154
  0, // LShiftI: 155
  0, // LShiftL: 156
  0, // LoadB: 157
  0, // LoadUB: 158
  0, // LoadUS: 159
  0, // LoadD: 160
  0, // LoadD_unaligned: 161
  0, // LoadF: 162
  0, // LoadI: 163
  0, // LoadKlass: 164
  0, // LoadNKlass: 165
  0, // LoadL: 166
  0, // LoadL_unaligned: 167
  0, // LoadPLocked: 168
  0, // LoadP: 169
  0, // LoadN: 170
  0, // LoadRange: 171
  0, // LoadS: 172
  0, // Lock: 173
  0, // Loop: 174
  0, // LoopLimit: 175
  0, // Mach: 176
  0, // MachProj: 177
  0, // MaxI: 178
  0, // MemBarAcquire: 179
  0, // LoadFence: 180
  0, // SetVectMaskI: 181
  0, // MemBarAcquireLock: 182
  0, // MemBarCPUOrder: 183
  0, // MemBarRelease: 184
  0, // StoreFence: 185
  0, // MemBarReleaseLock: 186
  0, // MemBarVolatile: 187
  0, // MemBarStoreStore: 188
  0, // MergeMem: 189
  0, // MinI: 190
  0, // ModD: 191
  0, // ModF: 192
  0, // ModI: 193
  0, // ModL: 194
  0, // MoveI2F: 195
  0, // MoveF2I: 196
  0, // MoveL2D: 197
  0, // MoveD2L: 198
  0, // MulD: 199
  0, // MulF: 200
  0, // MulHiL: 201
  0, // MulI: 202
  0, // MulL: 203
  0, // Multi: 204
  0, // NegD: 205
  0, // NegF: 206
  0, // NeverBranch: 207
  0, // OnSpinWait: 208
  0, // Opaque1: 209
  0, // Opaque2: 210
  0, // Opaque3: 211
  0, // ProfileBoolean: 212
  0, // OrI: 213
  0, // OrL: 214
  1, // OverflowAddI: 215
  1, // OverflowSubI: 216
  1, // OverflowMulI: 217
  1, // OverflowAddL: 218
  1, // OverflowSubL: 219
  1, // OverflowMulL: 220
  0, // PCTable: 221
  0, // Parm: 222
  0, // PartialSubtypeCheck: 223
  0, // Phi: 224
  0, // PopCountI: 225
  0, // PopCountL: 226
  0, // PrefetchAllocation: 227
  0, // Proj: 228
  0, // RShiftI: 229
  0, // RShiftL: 230
  0, // Region: 231
  0, // Rethrow: 232
  0, // Return: 233
  0, // Root: 234
  0, // RoundDouble: 235
  0, // RoundFloat: 236
  0, // SafePoint: 237
  0, // SafePointScalarObject: 238
  0, // SCMemProj: 239
  0, // SqrtD: 240
  0, // Start: 241
  0, // StartOSR: 242
  0, // StoreB: 243
  0, // StoreC: 244
  0, // StoreCM: 245
  0, // StorePConditional: 246
  0, // StoreIConditional: 247
  0, // StoreLConditional: 248
  0, // StoreD: 249
  0, // StoreF: 250
  0, // StoreI: 251
  0, // StoreL: 252
  0, // StoreP: 253
  0, // StoreN: 254
  0, // StoreNKlass: 255
  0, // StrComp: 256
  0, // StrCompressedCopy: 257
  0, // StrEquals: 258
  0, // StrIndexOf: 259
  0, // StrIndexOfChar: 260
  0, // StrInflatedCopy: 261
  0, // SubD: 262
  0, // SubF: 263
  0, // SubI: 264
  0, // SubL: 265
  0, // TailCall: 266
  0, // TailJump: 267
  0, // ThreadLocal: 268
  0, // Unlock: 269
  0, // URShiftI: 270
  0, // URShiftL: 271
  0, // XorI: 272
  0, // XorL: 273
  0, // Vector: 274
  0, // AddVB: 275
  0, // AddVS: 276
  0, // AddVI: 277
  0, // AddReductionVI: 278
  0, // AddVL: 279
  0, // AddReductionVL: 280
  0, // AddVF: 281
  0, // AddReductionVF: 282
  0, // AddVD: 283
  0, // AddReductionVD: 284
  0, // SubVB: 285
  0, // SubVS: 286
  0, // SubVI: 287
  0, // SubVL: 288
  0, // SubVF: 289
  0, // SubVD: 290
  0, // MulVS: 291
  0, // MulVI: 292
  0, // MulReductionVI: 293
  0, // MulVL: 294
  0, // MulReductionVL: 295
  0, // MulVF: 296
  0, // MulReductionVF: 297
  0, // MulVD: 298
  0, // MulReductionVD: 299
  0, // DivVF: 300
  0, // DivVD: 301
  0, // AbsVF: 302
  0, // AbsVD: 303
  0, // NegVF: 304
  0, // NegVD: 305
  0, // SqrtVD: 306
  0, // LShiftCntV: 307
  0, // RShiftCntV: 308
  0, // LShiftVB: 309
  0, // LShiftVS: 310
  0, // LShiftVI: 311
  0, // LShiftVL: 312
  0, // RShiftVB: 313
  0, // RShiftVS: 314
  0, // RShiftVI: 315
  0, // RShiftVL: 316
  0, // URShiftVB: 317
  0, // URShiftVS: 318
  0, // URShiftVI: 319
  0, // URShiftVL: 320
  0, // AndV: 321
  0, // OrV: 322
  0, // XorV: 323
  0, // LoadVector: 324
  0, // StoreVector: 325
  0, // Pack: 326
  0, // PackB: 327
  0, // PackS: 328
  0, // PackI: 329
  0, // PackL: 330
  0, // PackF: 331
  0, // PackD: 332
  0, // Pack2L: 333
  0, // Pack2D: 334
  0, // ReplicateB: 335
  0, // ReplicateS: 336
  0, // ReplicateI: 337
  0, // ReplicateL: 338
  0, // ReplicateF: 339
  0, // ReplicateD: 340
  0, // Extract: 341
  0, // ExtractB: 342
  0, // ExtractUB: 343
  0, // ExtractC: 344
  0, // ExtractS: 345
  0, // ExtractI: 346
  0, // ExtractL: 347
  0, // ExtractF: 348
  0 // no trailing comma // ExtractD: 349
};
//  The following instructions can cisc-spill
//  popCountI can cisc-spill operand 1 to popCountI_mem
//  popCountL can cisc-spill operand 1 to popCountL_mem
//  cmovI_reg can cisc-spill operand 4 to cmovI_mem
//  cmovI_regU can cisc-spill operand 4 to cmovI_memU
//  cmovI_regUCF can cisc-spill operand 4 to cmovI_memUCF
//  cmovL_reg can cisc-spill operand 4 to cmovL_mem
//  cmovL_regU can cisc-spill operand 4 to cmovL_memU
//  cmovL_regUCF can cisc-spill operand 4 to cmovL_memUCF
//  addI_rReg can cisc-spill operand 2 to addI_rReg_mem
//  addL_rReg can cisc-spill operand 2 to addL_rReg_mem
//  subI_rReg can cisc-spill operand 2 to subI_rReg_mem
//  subL_rReg can cisc-spill operand 2 to subL_rReg_mem
//  mulI_rReg can cisc-spill operand 2 to mulI_mem
//  mulI_rReg_imm can cisc-spill operand 1 to mulI_mem_imm
//  mulL_rReg can cisc-spill operand 2 to mulL_mem
//  mulL_rReg_imm can cisc-spill operand 1 to mulL_mem_imm
//  i2b can cisc-spill operand 1 to loadI2B
//  i2s can cisc-spill operand 1 to loadI2S
//  andI_rReg can cisc-spill operand 2 to andI_rReg_mem
//  andI2L_rReg_imm255 can cisc-spill operand 1 to loadI2L_immI_255
//  andI2L_rReg_imm65535 can cisc-spill operand 1 to loadI2L_immI_65535
//  andnI_rReg_rReg_rReg can cisc-spill operand 3 to andnI_rReg_rReg_mem
//  andnI_rReg_rReg_rReg_0 can cisc-spill operand 1 to andnI_rReg_rReg_mem_0
//  orI_rReg can cisc-spill operand 2 to orI_rReg_mem
//  xorI_rReg can cisc-spill operand 2 to xorI_rReg_mem
//  andL_rReg can cisc-spill operand 2 to andL_rReg_mem
//  andnL_rReg_rReg_rReg can cisc-spill operand 3 to andnL_rReg_rReg_mem
//  andnL_rReg_rReg_rReg_0 can cisc-spill operand 1 to andnL_rReg_rReg_mem_0
//  orL_rReg can cisc-spill operand 2 to orL_rReg_mem
//  xorL_rReg can cisc-spill operand 2 to xorL_rReg_mem
//  cmpF_cc_reg can cisc-spill operand 2 to cmpF_cc_mem
//  cmpF_cc_reg_CF can cisc-spill operand 2 to cmpF_cc_memCF
//  cmpD_cc_reg can cisc-spill operand 2 to cmpD_cc_mem
//  cmpD_cc_reg_CF can cisc-spill operand 2 to cmpD_cc_memCF
//  cmpF_reg can cisc-spill operand 2 to cmpF_mem
//  cmpD_reg can cisc-spill operand 2 to cmpD_mem
//  convF2D_reg_reg can cisc-spill operand 1 to convF2D_reg_mem
//  convD2F_reg_reg can cisc-spill operand 1 to convD2F_reg_mem
//  convL2F_reg_reg can cisc-spill operand 1 to convL2F_reg_mem
//  convL2D_reg_reg can cisc-spill operand 1 to convL2D_reg_mem
//  convI2L_reg_reg can cisc-spill operand 1 to loadI2L
//  convI2L_reg_reg_zex can cisc-spill operand 1 to loadUI2L
//  MoveF2I_reg_reg can cisc-spill operand 1 to MoveF2I_stack_reg
//  MoveD2L_reg_reg can cisc-spill operand 1 to MoveD2L_stack_reg
//  MoveI2F_reg_reg can cisc-spill operand 1 to MoveI2F_stack_reg
//  compI_rReg can cisc-spill operand 2 to compI_rReg_mem
//  compU_rReg can cisc-spill operand 2 to compU_rReg_mem
//  compP_rReg can cisc-spill operand 2 to compP_rReg_mem
//  compL_rReg can cisc-spill operand 2 to compL_rReg_mem
//  compUL_rReg can cisc-spill operand 2 to compUL_rReg_mem
//  addF_reg can cisc-spill operand 2 to addF_mem
//  addF_reg_reg can cisc-spill operand 2 to addF_reg_mem
//  addD_reg can cisc-spill operand 2 to addD_mem
//  addD_reg_reg can cisc-spill operand 2 to addD_reg_mem
//  subF_reg can cisc-spill operand 2 to subF_mem
//  subF_reg_reg can cisc-spill operand 2 to subF_reg_mem
//  subD_reg can cisc-spill operand 2 to subD_mem
//  subD_reg_reg can cisc-spill operand 2 to subD_reg_mem
//  mulF_reg can cisc-spill operand 2 to mulF_mem
//  mulF_reg_reg can cisc-spill operand 2 to mulF_reg_mem
//  mulD_reg can cisc-spill operand 2 to mulD_mem
//  mulD_reg_reg can cisc-spill operand 2 to mulD_reg_mem
//  divF_reg can cisc-spill operand 2 to divF_mem
//  divF_reg_reg can cisc-spill operand 2 to divF_reg_mem
//  divD_reg can cisc-spill operand 2 to divD_mem
//  divD_reg_reg can cisc-spill operand 2 to divD_reg_mem
//  sqrtF_reg can cisc-spill operand 1 to sqrtF_mem
//  sqrtD_reg can cisc-spill operand 1 to sqrtD_mem
//  Repl8I can cisc-spill operand 1 to Repl8I_mem
//  Repl4L can cisc-spill operand 1 to Repl4L_mem
//  Repl8F can cisc-spill operand 1 to Repl8F_mem
//  Repl4D can cisc-spill operand 1 to Repl4D_mem
//  Repl2I can cisc-spill operand 1 to Repl2I_mem
//  Repl4I_evex can cisc-spill operand 1 to Repl4I_mem_evex
//  Repl8I_evex can cisc-spill operand 1 to Repl8I_mem_evex
//  Repl16I_evex can cisc-spill operand 1 to Repl16I_mem_evex
//  Repl4L_evex can cisc-spill operand 1 to Repl4L_mem_evex
//  Repl8L_evex can cisc-spill operand 1 to Repl8L_mem_evex
//  Repl8F_evex can cisc-spill operand 1 to Repl8F_mem_evex
//  Repl16F_evex can cisc-spill operand 1 to Repl16F_mem_evex
//  Repl4D_evex can cisc-spill operand 1 to Repl4D_mem_evex
//  Repl8D_evex can cisc-spill operand 1 to Repl8D_mem_evex



// An array of character pointers to machine register names.
const char *Matcher::regName[REG_COUNT] = {
  "R10",
  "R10_H",
  "R11",
  "R11_H",
  "R8",
  "R8_H",
  "R9",
  "R9_H",
  "R12",
  "R12_H",
  "RCX",
  "RCX_H",
  "RBX",
  "RBX_H",
  "RDI",
  "RDI_H",
  "RDX",
  "RDX_H",
  "RSI",
  "RSI_H",
  "RAX",
  "RAX_H",
  "RBP",
  "RBP_H",
  "R13",
  "R13_H",
  "R14",
  "R14_H",
  "R15",
  "R15_H",
  "RSP",
  "RSP_H",
  "XMM0",
  "XMM0b",
  "XMM0c",
  "XMM0d",
  "XMM0e",
  "XMM0f",
  "XMM0g",
  "XMM0h",
  "XMM0i",
  "XMM0j",
  "XMM0k",
  "XMM0l",
  "XMM0m",
  "XMM0n",
  "XMM0o",
  "XMM0p",
  "XMM1",
  "XMM1b",
  "XMM1c",
  "XMM1d",
  "XMM1e",
  "XMM1f",
  "XMM1g",
  "XMM1h",
  "XMM1i",
  "XMM1j",
  "XMM1k",
  "XMM1l",
  "XMM1m",
  "XMM1n",
  "XMM1o",
  "XMM1p",
  "XMM2",
  "XMM2b",
  "XMM2c",
  "XMM2d",
  "XMM2e",
  "XMM2f",
  "XMM2g",
  "XMM2h",
  "XMM2i",
  "XMM2j",
  "XMM2k",
  "XMM2l",
  "XMM2m",
  "XMM2n",
  "XMM2o",
  "XMM2p",
  "XMM3",
  "XMM3b",
  "XMM3c",
  "XMM3d",
  "XMM3e",
  "XMM3f",
  "XMM3g",
  "XMM3h",
  "XMM3i",
  "XMM3j",
  "XMM3k",
  "XMM3l",
  "XMM3m",
  "XMM3n",
  "XMM3o",
  "XMM3p",
  "XMM4",
  "XMM4b",
  "XMM4c",
  "XMM4d",
  "XMM4e",
  "XMM4f",
  "XMM4g",
  "XMM4h",
  "XMM4i",
  "XMM4j",
  "XMM4k",
  "XMM4l",
  "XMM4m",
  "XMM4n",
  "XMM4o",
  "XMM4p",
  "XMM5",
  "XMM5b",
  "XMM5c",
  "XMM5d",
  "XMM5e",
  "XMM5f",
  "XMM5g",
  "XMM5h",
  "XMM5i",
  "XMM5j",
  "XMM5k",
  "XMM5l",
  "XMM5m",
  "XMM5n",
  "XMM5o",
  "XMM5p",
  "XMM6",
  "XMM6b",
  "XMM6c",
  "XMM6d",
  "XMM6e",
  "XMM6f",
  "XMM6g",
  "XMM6h",
  "XMM6i",
  "XMM6j",
  "XMM6k",
  "XMM6l",
  "XMM6m",
  "XMM6n",
  "XMM6o",
  "XMM6p",
  "XMM7",
  "XMM7b",
  "XMM7c",
  "XMM7d",
  "XMM7e",
  "XMM7f",
  "XMM7g",
  "XMM7h",
  "XMM7i",
  "XMM7j",
  "XMM7k",
  "XMM7l",
  "XMM7m",
  "XMM7n",
  "XMM7o",
  "XMM7p",
  "XMM8",
  "XMM8b",
  "XMM8c",
  "XMM8d",
  "XMM8e",
  "XMM8f",
  "XMM8g",
  "XMM8h",
  "XMM8i",
  "XMM8j",
  "XMM8k",
  "XMM8l",
  "XMM8m",
  "XMM8n",
  "XMM8o",
  "XMM8p",
  "XMM9",
  "XMM9b",
  "XMM9c",
  "XMM9d",
  "XMM9e",
  "XMM9f",
  "XMM9g",
  "XMM9h",
  "XMM9i",
  "XMM9j",
  "XMM9k",
  "XMM9l",
  "XMM9m",
  "XMM9n",
  "XMM9o",
  "XMM9p",
  "XMM10",
  "XMM10b",
  "XMM10c",
  "XMM10d",
  "XMM10e",
  "XMM10f",
  "XMM10g",
  "XMM10h",
  "XMM10i",
  "XMM10j",
  "XMM10k",
  "XMM10l",
  "XMM10m",
  "XMM10n",
  "XMM10o",
  "XMM10p",
  "XMM11",
  "XMM11b",
  "XMM11c",
  "XMM11d",
  "XMM11e",
  "XMM11f",
  "XMM11g",
  "XMM11h",
  "XMM11i",
  "XMM11j",
  "XMM11k",
  "XMM11l",
  "XMM11m",
  "XMM11n",
  "XMM11o",
  "XMM11p",
  "XMM12",
  "XMM12b",
  "XMM12c",
  "XMM12d",
  "XMM12e",
  "XMM12f",
  "XMM12g",
  "XMM12h",
  "XMM12i",
  "XMM12j",
  "XMM12k",
  "XMM12l",
  "XMM12m",
  "XMM12n",
  "XMM12o",
  "XMM12p",
  "XMM13",
  "XMM13b",
  "XMM13c",
  "XMM13d",
  "XMM13e",
  "XMM13f",
  "XMM13g",
  "XMM13h",
  "XMM13i",
  "XMM13j",
  "XMM13k",
  "XMM13l",
  "XMM13m",
  "XMM13n",
  "XMM13o",
  "XMM13p",
  "XMM14",
  "XMM14b",
  "XMM14c",
  "XMM14d",
  "XMM14e",
  "XMM14f",
  "XMM14g",
  "XMM14h",
  "XMM14i",
  "XMM14j",
  "XMM14k",
  "XMM14l",
  "XMM14m",
  "XMM14n",
  "XMM14o",
  "XMM14p",
  "XMM15",
  "XMM15b",
  "XMM15c",
  "XMM15d",
  "XMM15e",
  "XMM15f",
  "XMM15g",
  "XMM15h",
  "XMM15i",
  "XMM15j",
  "XMM15k",
  "XMM15l",
  "XMM15m",
  "XMM15n",
  "XMM15o",
  "XMM15p",
  "XMM16",
  "XMM16b",
  "XMM16c",
  "XMM16d",
  "XMM16e",
  "XMM16f",
  "XMM16g",
  "XMM16h",
  "XMM16i",
  "XMM16j",
  "XMM16k",
  "XMM16l",
  "XMM16m",
  "XMM16n",
  "XMM16o",
  "XMM16p",
  "XMM17",
  "XMM17b",
  "XMM17c",
  "XMM17d",
  "XMM17e",
  "XMM17f",
  "XMM17g",
  "XMM17h",
  "XMM17i",
  "XMM17j",
  "XMM17k",
  "XMM17l",
  "XMM17m",
  "XMM17n",
  "XMM17o",
  "XMM17p",
  "XMM18",
  "XMM18b",
  "XMM18c",
  "XMM18d",
  "XMM18e",
  "XMM18f",
  "XMM18g",
  "XMM18h",
  "XMM18i",
  "XMM18j",
  "XMM18k",
  "XMM18l",
  "XMM18m",
  "XMM18n",
  "XMM18o",
  "XMM18p",
  "XMM19",
  "XMM19b",
  "XMM19c",
  "XMM19d",
  "XMM19e",
  "XMM19f",
  "XMM19g",
  "XMM19h",
  "XMM19i",
  "XMM19j",
  "XMM19k",
  "XMM19l",
  "XMM19m",
  "XMM19n",
  "XMM19o",
  "XMM19p",
  "XMM20",
  "XMM20b",
  "XMM20c",
  "XMM20d",
  "XMM20e",
  "XMM20f",
  "XMM20g",
  "XMM20h",
  "XMM20i",
  "XMM20j",
  "XMM20k",
  "XMM20l",
  "XMM20m",
  "XMM20n",
  "XMM20o",
  "XMM20p",
  "XMM21",
  "XMM21b",
  "XMM21c",
  "XMM21d",
  "XMM21e",
  "XMM21f",
  "XMM21g",
  "XMM21h",
  "XMM21i",
  "XMM21j",
  "XMM21k",
  "XMM21l",
  "XMM21m",
  "XMM21n",
  "XMM21o",
  "XMM21p",
  "XMM22",
  "XMM22b",
  "XMM22c",
  "XMM22d",
  "XMM22e",
  "XMM22f",
  "XMM22g",
  "XMM22h",
  "XMM22i",
  "XMM22j",
  "XMM22k",
  "XMM22l",
  "XMM22m",
  "XMM22n",
  "XMM22o",
  "XMM22p",
  "XMM23",
  "XMM23b",
  "XMM23c",
  "XMM23d",
  "XMM23e",
  "XMM23f",
  "XMM23g",
  "XMM23h",
  "XMM23i",
  "XMM23j",
  "XMM23k",
  "XMM23l",
  "XMM23m",
  "XMM23n",
  "XMM23o",
  "XMM23p",
  "XMM24",
  "XMM24b",
  "XMM24c",
  "XMM24d",
  "XMM24e",
  "XMM24f",
  "XMM24g",
  "XMM24h",
  "XMM24i",
  "XMM24j",
  "XMM24k",
  "XMM24l",
  "XMM24m",
  "XMM24n",
  "XMM24o",
  "XMM24p",
  "XMM25",
  "XMM25b",
  "XMM25c",
  "XMM25d",
  "XMM25e",
  "XMM25f",
  "XMM25g",
  "XMM25h",
  "XMM25i",
  "XMM25j",
  "XMM25k",
  "XMM25l",
  "XMM25m",
  "XMM25n",
  "XMM25o",
  "XMM25p",
  "XMM26",
  "XMM26b",
  "XMM26c",
  "XMM26d",
  "XMM26e",
  "XMM26f",
  "XMM26g",
  "XMM26h",
  "XMM26i",
  "XMM26j",
  "XMM26k",
  "XMM26l",
  "XMM26m",
  "XMM26n",
  "XMM26o",
  "XMM26p",
  "XMM27",
  "XMM27b",
  "XMM27c",
  "XMM27d",
  "XMM27e",
  "XMM27f",
  "XMM27g",
  "XMM27h",
  "XMM27i",
  "XMM27j",
  "XMM27k",
  "XMM27l",
  "XMM27m",
  "XMM27n",
  "XMM27o",
  "XMM27p",
  "XMM28",
  "XMM28b",
  "XMM28c",
  "XMM28d",
  "XMM28e",
  "XMM28f",
  "XMM28g",
  "XMM28h",
  "XMM28i",
  "XMM28j",
  "XMM28k",
  "XMM28l",
  "XMM28m",
  "XMM28n",
  "XMM28o",
  "XMM28p",
  "XMM29",
  "XMM29b",
  "XMM29c",
  "XMM29d",
  "XMM29e",
  "XMM29f",
  "XMM29g",
  "XMM29h",
  "XMM29i",
  "XMM29j",
  "XMM29k",
  "XMM29l",
  "XMM29m",
  "XMM29n",
  "XMM29o",
  "XMM29p",
  "XMM30",
  "XMM30b",
  "XMM30c",
  "XMM30d",
  "XMM30e",
  "XMM30f",
  "XMM30g",
  "XMM30h",
  "XMM30i",
  "XMM30j",
  "XMM30k",
  "XMM30l",
  "XMM30m",
  "XMM30n",
  "XMM30o",
  "XMM30p",
  "XMM31",
  "XMM31b",
  "XMM31c",
  "XMM31d",
  "XMM31e",
  "XMM31f",
  "XMM31g",
  "XMM31h",
  "XMM31i",
  "XMM31j",
  "XMM31k",
  "XMM31l",
  "XMM31m",
  "XMM31n",
  "XMM31o",
  "XMM31p",
  "RFLAGS" // no trailing comma
};

// An array of character pointers to machine register names.
const VMReg OptoReg::opto2vm[REG_COUNT] = {
	r10->as_VMReg(),
	r10->as_VMReg()->next(),
	r11->as_VMReg(),
	r11->as_VMReg()->next(),
	r8->as_VMReg(),
	r8->as_VMReg()->next(),
	r9->as_VMReg(),
	r9->as_VMReg()->next(),
	r12->as_VMReg(),
	r12->as_VMReg()->next(),
	rcx->as_VMReg(),
	rcx->as_VMReg()->next(),
	rbx->as_VMReg(),
	rbx->as_VMReg()->next(),
	rdi->as_VMReg(),
	rdi->as_VMReg()->next(),
	rdx->as_VMReg(),
	rdx->as_VMReg()->next(),
	rsi->as_VMReg(),
	rsi->as_VMReg()->next(),
	rax->as_VMReg(),
	rax->as_VMReg()->next(),
	rbp->as_VMReg(),
	rbp->as_VMReg()->next(),
	r13->as_VMReg(),
	r13->as_VMReg()->next(),
	r14->as_VMReg(),
	r14->as_VMReg()->next(),
	r15->as_VMReg(),
	r15->as_VMReg()->next(),
	rsp->as_VMReg(),
	rsp->as_VMReg()->next(),
	xmm0->as_VMReg(),
	xmm0->as_VMReg()->next(1),
	xmm0->as_VMReg()->next(2),
	xmm0->as_VMReg()->next(3),
	xmm0->as_VMReg()->next(4),
	xmm0->as_VMReg()->next(5),
	xmm0->as_VMReg()->next(6),
	xmm0->as_VMReg()->next(7),
	xmm0->as_VMReg()->next(8),
	xmm0->as_VMReg()->next(9),
	xmm0->as_VMReg()->next(10),
	xmm0->as_VMReg()->next(11),
	xmm0->as_VMReg()->next(12),
	xmm0->as_VMReg()->next(13),
	xmm0->as_VMReg()->next(14),
	xmm0->as_VMReg()->next(15),
	xmm1->as_VMReg(),
	xmm1->as_VMReg()->next(1),
	xmm1->as_VMReg()->next(2),
	xmm1->as_VMReg()->next(3),
	xmm1->as_VMReg()->next(4),
	xmm1->as_VMReg()->next(5),
	xmm1->as_VMReg()->next(6),
	xmm1->as_VMReg()->next(7),
	xmm1->as_VMReg()->next(8),
	xmm1->as_VMReg()->next(9),
	xmm1->as_VMReg()->next(10),
	xmm1->as_VMReg()->next(11),
	xmm1->as_VMReg()->next(12),
	xmm1->as_VMReg()->next(13),
	xmm1->as_VMReg()->next(14),
	xmm1->as_VMReg()->next(15),
	xmm2->as_VMReg(),
	xmm2->as_VMReg()->next(1),
	xmm2->as_VMReg()->next(2),
	xmm2->as_VMReg()->next(3),
	xmm2->as_VMReg()->next(4),
	xmm2->as_VMReg()->next(5),
	xmm2->as_VMReg()->next(6),
	xmm2->as_VMReg()->next(7),
	xmm2->as_VMReg()->next(8),
	xmm2->as_VMReg()->next(9),
	xmm2->as_VMReg()->next(10),
	xmm2->as_VMReg()->next(11),
	xmm2->as_VMReg()->next(12),
	xmm2->as_VMReg()->next(13),
	xmm2->as_VMReg()->next(14),
	xmm2->as_VMReg()->next(15),
	xmm3->as_VMReg(),
	xmm3->as_VMReg()->next(1),
	xmm3->as_VMReg()->next(2),
	xmm3->as_VMReg()->next(3),
	xmm3->as_VMReg()->next(4),
	xmm3->as_VMReg()->next(5),
	xmm3->as_VMReg()->next(6),
	xmm3->as_VMReg()->next(7),
	xmm3->as_VMReg()->next(8),
	xmm3->as_VMReg()->next(9),
	xmm3->as_VMReg()->next(10),
	xmm3->as_VMReg()->next(11),
	xmm3->as_VMReg()->next(12),
	xmm3->as_VMReg()->next(13),
	xmm3->as_VMReg()->next(14),
	xmm3->as_VMReg()->next(15),
	xmm4->as_VMReg(),
	xmm4->as_VMReg()->next(1),
	xmm4->as_VMReg()->next(2),
	xmm4->as_VMReg()->next(3),
	xmm4->as_VMReg()->next(4),
	xmm4->as_VMReg()->next(5),
	xmm4->as_VMReg()->next(6),
	xmm4->as_VMReg()->next(7),
	xmm4->as_VMReg()->next(8),
	xmm4->as_VMReg()->next(9),
	xmm4->as_VMReg()->next(10),
	xmm4->as_VMReg()->next(11),
	xmm4->as_VMReg()->next(12),
	xmm4->as_VMReg()->next(13),
	xmm4->as_VMReg()->next(14),
	xmm4->as_VMReg()->next(15),
	xmm5->as_VMReg(),
	xmm5->as_VMReg()->next(1),
	xmm5->as_VMReg()->next(2),
	xmm5->as_VMReg()->next(3),
	xmm5->as_VMReg()->next(4),
	xmm5->as_VMReg()->next(5),
	xmm5->as_VMReg()->next(6),
	xmm5->as_VMReg()->next(7),
	xmm5->as_VMReg()->next(8),
	xmm5->as_VMReg()->next(9),
	xmm5->as_VMReg()->next(10),
	xmm5->as_VMReg()->next(11),
	xmm5->as_VMReg()->next(12),
	xmm5->as_VMReg()->next(13),
	xmm5->as_VMReg()->next(14),
	xmm5->as_VMReg()->next(15),
	xmm6->as_VMReg(),
	xmm6->as_VMReg()->next(1),
	xmm6->as_VMReg()->next(2),
	xmm6->as_VMReg()->next(3),
	xmm6->as_VMReg()->next(4),
	xmm6->as_VMReg()->next(5),
	xmm6->as_VMReg()->next(6),
	xmm6->as_VMReg()->next(7),
	xmm6->as_VMReg()->next(8),
	xmm6->as_VMReg()->next(9),
	xmm6->as_VMReg()->next(10),
	xmm6->as_VMReg()->next(11),
	xmm6->as_VMReg()->next(12),
	xmm6->as_VMReg()->next(13),
	xmm6->as_VMReg()->next(14),
	xmm6->as_VMReg()->next(15),
	xmm7->as_VMReg(),
	xmm7->as_VMReg()->next(1),
	xmm7->as_VMReg()->next(2),
	xmm7->as_VMReg()->next(3),
	xmm7->as_VMReg()->next(4),
	xmm7->as_VMReg()->next(5),
	xmm7->as_VMReg()->next(6),
	xmm7->as_VMReg()->next(7),
	xmm7->as_VMReg()->next(8),
	xmm7->as_VMReg()->next(9),
	xmm7->as_VMReg()->next(10),
	xmm7->as_VMReg()->next(11),
	xmm7->as_VMReg()->next(12),
	xmm7->as_VMReg()->next(13),
	xmm7->as_VMReg()->next(14),
	xmm7->as_VMReg()->next(15),
	xmm8->as_VMReg(),
	xmm8->as_VMReg()->next(1),
	xmm8->as_VMReg()->next(2),
	xmm8->as_VMReg()->next(3),
	xmm8->as_VMReg()->next(4),
	xmm8->as_VMReg()->next(5),
	xmm8->as_VMReg()->next(6),
	xmm8->as_VMReg()->next(7),
	xmm8->as_VMReg()->next(8),
	xmm8->as_VMReg()->next(9),
	xmm8->as_VMReg()->next(10),
	xmm8->as_VMReg()->next(11),
	xmm8->as_VMReg()->next(12),
	xmm8->as_VMReg()->next(13),
	xmm8->as_VMReg()->next(14),
	xmm8->as_VMReg()->next(15),
	xmm9->as_VMReg(),
	xmm9->as_VMReg()->next(1),
	xmm9->as_VMReg()->next(2),
	xmm9->as_VMReg()->next(3),
	xmm9->as_VMReg()->next(4),
	xmm9->as_VMReg()->next(5),
	xmm9->as_VMReg()->next(6),
	xmm9->as_VMReg()->next(7),
	xmm9->as_VMReg()->next(8),
	xmm9->as_VMReg()->next(9),
	xmm9->as_VMReg()->next(10),
	xmm9->as_VMReg()->next(11),
	xmm9->as_VMReg()->next(12),
	xmm9->as_VMReg()->next(13),
	xmm9->as_VMReg()->next(14),
	xmm9->as_VMReg()->next(15),
	xmm10->as_VMReg(),
	xmm10->as_VMReg()->next(1),
	xmm10->as_VMReg()->next(2),
	xmm10->as_VMReg()->next(3),
	xmm10->as_VMReg()->next(4),
	xmm10->as_VMReg()->next(5),
	xmm10->as_VMReg()->next(6),
	xmm10->as_VMReg()->next(7),
	xmm10->as_VMReg()->next(8),
	xmm10->as_VMReg()->next(9),
	xmm10->as_VMReg()->next(10),
	xmm10->as_VMReg()->next(11),
	xmm10->as_VMReg()->next(12),
	xmm10->as_VMReg()->next(13),
	xmm10->as_VMReg()->next(14),
	xmm10->as_VMReg()->next(15),
	xmm11->as_VMReg(),
	xmm11->as_VMReg()->next(1),
	xmm11->as_VMReg()->next(2),
	xmm11->as_VMReg()->next(3),
	xmm11->as_VMReg()->next(4),
	xmm11->as_VMReg()->next(5),
	xmm11->as_VMReg()->next(6),
	xmm11->as_VMReg()->next(7),
	xmm11->as_VMReg()->next(8),
	xmm11->as_VMReg()->next(9),
	xmm11->as_VMReg()->next(10),
	xmm11->as_VMReg()->next(11),
	xmm11->as_VMReg()->next(12),
	xmm11->as_VMReg()->next(13),
	xmm11->as_VMReg()->next(14),
	xmm11->as_VMReg()->next(15),
	xmm12->as_VMReg(),
	xmm12->as_VMReg()->next(1),
	xmm12->as_VMReg()->next(2),
	xmm12->as_VMReg()->next(3),
	xmm12->as_VMReg()->next(4),
	xmm12->as_VMReg()->next(5),
	xmm12->as_VMReg()->next(6),
	xmm12->as_VMReg()->next(7),
	xmm12->as_VMReg()->next(8),
	xmm12->as_VMReg()->next(9),
	xmm12->as_VMReg()->next(10),
	xmm12->as_VMReg()->next(11),
	xmm12->as_VMReg()->next(12),
	xmm12->as_VMReg()->next(13),
	xmm12->as_VMReg()->next(14),
	xmm12->as_VMReg()->next(15),
	xmm13->as_VMReg(),
	xmm13->as_VMReg()->next(1),
	xmm13->as_VMReg()->next(2),
	xmm13->as_VMReg()->next(3),
	xmm13->as_VMReg()->next(4),
	xmm13->as_VMReg()->next(5),
	xmm13->as_VMReg()->next(6),
	xmm13->as_VMReg()->next(7),
	xmm13->as_VMReg()->next(8),
	xmm13->as_VMReg()->next(9),
	xmm13->as_VMReg()->next(10),
	xmm13->as_VMReg()->next(11),
	xmm13->as_VMReg()->next(12),
	xmm13->as_VMReg()->next(13),
	xmm13->as_VMReg()->next(14),
	xmm13->as_VMReg()->next(15),
	xmm14->as_VMReg(),
	xmm14->as_VMReg()->next(1),
	xmm14->as_VMReg()->next(2),
	xmm14->as_VMReg()->next(3),
	xmm14->as_VMReg()->next(4),
	xmm14->as_VMReg()->next(5),
	xmm14->as_VMReg()->next(6),
	xmm14->as_VMReg()->next(7),
	xmm14->as_VMReg()->next(8),
	xmm14->as_VMReg()->next(9),
	xmm14->as_VMReg()->next(10),
	xmm14->as_VMReg()->next(11),
	xmm14->as_VMReg()->next(12),
	xmm14->as_VMReg()->next(13),
	xmm14->as_VMReg()->next(14),
	xmm14->as_VMReg()->next(15),
	xmm15->as_VMReg(),
	xmm15->as_VMReg()->next(1),
	xmm15->as_VMReg()->next(2),
	xmm15->as_VMReg()->next(3),
	xmm15->as_VMReg()->next(4),
	xmm15->as_VMReg()->next(5),
	xmm15->as_VMReg()->next(6),
	xmm15->as_VMReg()->next(7),
	xmm15->as_VMReg()->next(8),
	xmm15->as_VMReg()->next(9),
	xmm15->as_VMReg()->next(10),
	xmm15->as_VMReg()->next(11),
	xmm15->as_VMReg()->next(12),
	xmm15->as_VMReg()->next(13),
	xmm15->as_VMReg()->next(14),
	xmm15->as_VMReg()->next(15),
	xmm16->as_VMReg(),
	xmm16->as_VMReg()->next(1),
	xmm16->as_VMReg()->next(2),
	xmm16->as_VMReg()->next(3),
	xmm16->as_VMReg()->next(4),
	xmm16->as_VMReg()->next(5),
	xmm16->as_VMReg()->next(6),
	xmm16->as_VMReg()->next(7),
	xmm16->as_VMReg()->next(8),
	xmm16->as_VMReg()->next(9),
	xmm16->as_VMReg()->next(10),
	xmm16->as_VMReg()->next(11),
	xmm16->as_VMReg()->next(12),
	xmm16->as_VMReg()->next(13),
	xmm16->as_VMReg()->next(14),
	xmm16->as_VMReg()->next(15),
	xmm17->as_VMReg(),
	xmm17->as_VMReg()->next(1),
	xmm17->as_VMReg()->next(2),
	xmm17->as_VMReg()->next(3),
	xmm17->as_VMReg()->next(4),
	xmm17->as_VMReg()->next(5),
	xmm17->as_VMReg()->next(6),
	xmm17->as_VMReg()->next(7),
	xmm17->as_VMReg()->next(8),
	xmm17->as_VMReg()->next(9),
	xmm17->as_VMReg()->next(10),
	xmm17->as_VMReg()->next(11),
	xmm17->as_VMReg()->next(12),
	xmm17->as_VMReg()->next(13),
	xmm17->as_VMReg()->next(14),
	xmm17->as_VMReg()->next(15),
	xmm18->as_VMReg(),
	xmm18->as_VMReg()->next(1),
	xmm18->as_VMReg()->next(2),
	xmm18->as_VMReg()->next(3),
	xmm18->as_VMReg()->next(4),
	xmm18->as_VMReg()->next(5),
	xmm18->as_VMReg()->next(6),
	xmm18->as_VMReg()->next(7),
	xmm18->as_VMReg()->next(8),
	xmm18->as_VMReg()->next(9),
	xmm18->as_VMReg()->next(10),
	xmm18->as_VMReg()->next(11),
	xmm18->as_VMReg()->next(12),
	xmm18->as_VMReg()->next(13),
	xmm18->as_VMReg()->next(14),
	xmm18->as_VMReg()->next(15),
	xmm19->as_VMReg(),
	xmm19->as_VMReg()->next(1),
	xmm19->as_VMReg()->next(2),
	xmm19->as_VMReg()->next(3),
	xmm19->as_VMReg()->next(4),
	xmm19->as_VMReg()->next(5),
	xmm19->as_VMReg()->next(6),
	xmm19->as_VMReg()->next(7),
	xmm19->as_VMReg()->next(8),
	xmm19->as_VMReg()->next(9),
	xmm19->as_VMReg()->next(10),
	xmm19->as_VMReg()->next(11),
	xmm19->as_VMReg()->next(12),
	xmm19->as_VMReg()->next(13),
	xmm19->as_VMReg()->next(14),
	xmm19->as_VMReg()->next(15),
	xmm20->as_VMReg(),
	xmm20->as_VMReg()->next(1),
	xmm20->as_VMReg()->next(2),
	xmm20->as_VMReg()->next(3),
	xmm20->as_VMReg()->next(4),
	xmm20->as_VMReg()->next(5),
	xmm20->as_VMReg()->next(6),
	xmm20->as_VMReg()->next(7),
	xmm20->as_VMReg()->next(8),
	xmm20->as_VMReg()->next(9),
	xmm20->as_VMReg()->next(10),
	xmm20->as_VMReg()->next(11),
	xmm20->as_VMReg()->next(12),
	xmm20->as_VMReg()->next(13),
	xmm20->as_VMReg()->next(14),
	xmm20->as_VMReg()->next(15),
	xmm21->as_VMReg(),
	xmm21->as_VMReg()->next(1),
	xmm21->as_VMReg()->next(2),
	xmm21->as_VMReg()->next(3),
	xmm21->as_VMReg()->next(4),
	xmm21->as_VMReg()->next(5),
	xmm21->as_VMReg()->next(6),
	xmm21->as_VMReg()->next(7),
	xmm21->as_VMReg()->next(8),
	xmm21->as_VMReg()->next(9),
	xmm21->as_VMReg()->next(10),
	xmm21->as_VMReg()->next(11),
	xmm21->as_VMReg()->next(12),
	xmm21->as_VMReg()->next(13),
	xmm21->as_VMReg()->next(14),
	xmm21->as_VMReg()->next(15),
	xmm22->as_VMReg(),
	xmm22->as_VMReg()->next(1),
	xmm22->as_VMReg()->next(2),
	xmm22->as_VMReg()->next(3),
	xmm22->as_VMReg()->next(4),
	xmm22->as_VMReg()->next(5),
	xmm22->as_VMReg()->next(6),
	xmm22->as_VMReg()->next(7),
	xmm22->as_VMReg()->next(8),
	xmm22->as_VMReg()->next(9),
	xmm22->as_VMReg()->next(10),
	xmm22->as_VMReg()->next(11),
	xmm22->as_VMReg()->next(12),
	xmm22->as_VMReg()->next(13),
	xmm22->as_VMReg()->next(14),
	xmm22->as_VMReg()->next(15),
	xmm23->as_VMReg(),
	xmm23->as_VMReg()->next(1),
	xmm23->as_VMReg()->next(2),
	xmm23->as_VMReg()->next(3),
	xmm23->as_VMReg()->next(4),
	xmm23->as_VMReg()->next(5),
	xmm23->as_VMReg()->next(6),
	xmm23->as_VMReg()->next(7),
	xmm23->as_VMReg()->next(8),
	xmm23->as_VMReg()->next(9),
	xmm23->as_VMReg()->next(10),
	xmm23->as_VMReg()->next(11),
	xmm23->as_VMReg()->next(12),
	xmm23->as_VMReg()->next(13),
	xmm23->as_VMReg()->next(14),
	xmm23->as_VMReg()->next(15),
	xmm24->as_VMReg(),
	xmm24->as_VMReg()->next(1),
	xmm24->as_VMReg()->next(2),
	xmm24->as_VMReg()->next(3),
	xmm24->as_VMReg()->next(4),
	xmm24->as_VMReg()->next(5),
	xmm24->as_VMReg()->next(6),
	xmm24->as_VMReg()->next(7),
	xmm24->as_VMReg()->next(8),
	xmm24->as_VMReg()->next(9),
	xmm24->as_VMReg()->next(10),
	xmm24->as_VMReg()->next(11),
	xmm24->as_VMReg()->next(12),
	xmm24->as_VMReg()->next(13),
	xmm24->as_VMReg()->next(14),
	xmm24->as_VMReg()->next(15),
	xmm25->as_VMReg(),
	xmm25->as_VMReg()->next(1),
	xmm25->as_VMReg()->next(2),
	xmm25->as_VMReg()->next(3),
	xmm25->as_VMReg()->next(4),
	xmm25->as_VMReg()->next(5),
	xmm25->as_VMReg()->next(6),
	xmm25->as_VMReg()->next(7),
	xmm25->as_VMReg()->next(8),
	xmm25->as_VMReg()->next(9),
	xmm25->as_VMReg()->next(10),
	xmm25->as_VMReg()->next(11),
	xmm25->as_VMReg()->next(12),
	xmm25->as_VMReg()->next(13),
	xmm25->as_VMReg()->next(14),
	xmm25->as_VMReg()->next(15),
	xmm26->as_VMReg(),
	xmm26->as_VMReg()->next(1),
	xmm26->as_VMReg()->next(2),
	xmm26->as_VMReg()->next(3),
	xmm26->as_VMReg()->next(4),
	xmm26->as_VMReg()->next(5),
	xmm26->as_VMReg()->next(6),
	xmm26->as_VMReg()->next(7),
	xmm26->as_VMReg()->next(8),
	xmm26->as_VMReg()->next(9),
	xmm26->as_VMReg()->next(10),
	xmm26->as_VMReg()->next(11),
	xmm26->as_VMReg()->next(12),
	xmm26->as_VMReg()->next(13),
	xmm26->as_VMReg()->next(14),
	xmm26->as_VMReg()->next(15),
	xmm27->as_VMReg(),
	xmm27->as_VMReg()->next(1),
	xmm27->as_VMReg()->next(2),
	xmm27->as_VMReg()->next(3),
	xmm27->as_VMReg()->next(4),
	xmm27->as_VMReg()->next(5),
	xmm27->as_VMReg()->next(6),
	xmm27->as_VMReg()->next(7),
	xmm27->as_VMReg()->next(8),
	xmm27->as_VMReg()->next(9),
	xmm27->as_VMReg()->next(10),
	xmm27->as_VMReg()->next(11),
	xmm27->as_VMReg()->next(12),
	xmm27->as_VMReg()->next(13),
	xmm27->as_VMReg()->next(14),
	xmm27->as_VMReg()->next(15),
	xmm28->as_VMReg(),
	xmm28->as_VMReg()->next(1),
	xmm28->as_VMReg()->next(2),
	xmm28->as_VMReg()->next(3),
	xmm28->as_VMReg()->next(4),
	xmm28->as_VMReg()->next(5),
	xmm28->as_VMReg()->next(6),
	xmm28->as_VMReg()->next(7),
	xmm28->as_VMReg()->next(8),
	xmm28->as_VMReg()->next(9),
	xmm28->as_VMReg()->next(10),
	xmm28->as_VMReg()->next(11),
	xmm28->as_VMReg()->next(12),
	xmm28->as_VMReg()->next(13),
	xmm28->as_VMReg()->next(14),
	xmm28->as_VMReg()->next(15),
	xmm29->as_VMReg(),
	xmm29->as_VMReg()->next(1),
	xmm29->as_VMReg()->next(2),
	xmm29->as_VMReg()->next(3),
	xmm29->as_VMReg()->next(4),
	xmm29->as_VMReg()->next(5),
	xmm29->as_VMReg()->next(6),
	xmm29->as_VMReg()->next(7),
	xmm29->as_VMReg()->next(8),
	xmm29->as_VMReg()->next(9),
	xmm29->as_VMReg()->next(10),
	xmm29->as_VMReg()->next(11),
	xmm29->as_VMReg()->next(12),
	xmm29->as_VMReg()->next(13),
	xmm29->as_VMReg()->next(14),
	xmm29->as_VMReg()->next(15),
	xmm30->as_VMReg(),
	xmm30->as_VMReg()->next(1),
	xmm30->as_VMReg()->next(2),
	xmm30->as_VMReg()->next(3),
	xmm30->as_VMReg()->next(4),
	xmm30->as_VMReg()->next(5),
	xmm30->as_VMReg()->next(6),
	xmm30->as_VMReg()->next(7),
	xmm30->as_VMReg()->next(8),
	xmm30->as_VMReg()->next(9),
	xmm30->as_VMReg()->next(10),
	xmm30->as_VMReg()->next(11),
	xmm30->as_VMReg()->next(12),
	xmm30->as_VMReg()->next(13),
	xmm30->as_VMReg()->next(14),
	xmm30->as_VMReg()->next(15),
	xmm31->as_VMReg(),
	xmm31->as_VMReg()->next(1),
	xmm31->as_VMReg()->next(2),
	xmm31->as_VMReg()->next(3),
	xmm31->as_VMReg()->next(4),
	xmm31->as_VMReg()->next(5),
	xmm31->as_VMReg()->next(6),
	xmm31->as_VMReg()->next(7),
	xmm31->as_VMReg()->next(8),
	xmm31->as_VMReg()->next(9),
	xmm31->as_VMReg()->next(10),
	xmm31->as_VMReg()->next(11),
	xmm31->as_VMReg()->next(12),
	xmm31->as_VMReg()->next(13),
	xmm31->as_VMReg()->next(14),
	xmm31->as_VMReg()->next(15),
	VMRegImpl::Bad() // no trailing comma
	};

 OptoReg::Name OptoReg::vm2opto[ConcreteRegisterImpl::number_of_registers];

// An array of the machine register encode values
const unsigned char Matcher::_regEncode[REG_COUNT] = {
  (unsigned char)'\xA',  // R10
  (unsigned char)'\xA',  // R10_H
  (unsigned char)'\xB',  // R11
  (unsigned char)'\xB',  // R11_H
  (unsigned char)'\x8',  // R8
  (unsigned char)'\x8',  // R8_H
  (unsigned char)'\x9',  // R9
  (unsigned char)'\x9',  // R9_H
  (unsigned char)'\xC',  // R12
  (unsigned char)'\xC',  // R12_H
  (unsigned char)'\x1',  // RCX
  (unsigned char)'\x1',  // RCX_H
  (unsigned char)'\x3',  // RBX
  (unsigned char)'\x3',  // RBX_H
  (unsigned char)'\x7',  // RDI
  (unsigned char)'\x7',  // RDI_H
  (unsigned char)'\x2',  // RDX
  (unsigned char)'\x2',  // RDX_H
  (unsigned char)'\x6',  // RSI
  (unsigned char)'\x6',  // RSI_H
  (unsigned char)'\x0',  // RAX
  (unsigned char)'\x0',  // RAX_H
  (unsigned char)'\x5',  // RBP
  (unsigned char)'\x5',  // RBP_H
  (unsigned char)'\xD',  // R13
  (unsigned char)'\xD',  // R13_H
  (unsigned char)'\xE',  // R14
  (unsigned char)'\xE',  // R14_H
  (unsigned char)'\xF',  // R15
  (unsigned char)'\xF',  // R15_H
  (unsigned char)'\x4',  // RSP
  (unsigned char)'\x4',  // RSP_H
  (unsigned char)'\x0',  // XMM0
  (unsigned char)'\x0',  // XMM0b
  (unsigned char)'\x0',  // XMM0c
  (unsigned char)'\x0',  // XMM0d
  (unsigned char)'\x0',  // XMM0e
  (unsigned char)'\x0',  // XMM0f
  (unsigned char)'\x0',  // XMM0g
  (unsigned char)'\x0',  // XMM0h
  (unsigned char)'\x0',  // XMM0i
  (unsigned char)'\x0',  // XMM0j
  (unsigned char)'\x0',  // XMM0k
  (unsigned char)'\x0',  // XMM0l
  (unsigned char)'\x0',  // XMM0m
  (unsigned char)'\x0',  // XMM0n
  (unsigned char)'\x0',  // XMM0o
  (unsigned char)'\x0',  // XMM0p
  (unsigned char)'\x1',  // XMM1
  (unsigned char)'\x1',  // XMM1b
  (unsigned char)'\x1',  // XMM1c
  (unsigned char)'\x1',  // XMM1d
  (unsigned char)'\x1',  // XMM1e
  (unsigned char)'\x1',  // XMM1f
  (unsigned char)'\x1',  // XMM1g
  (unsigned char)'\x1',  // XMM1h
  (unsigned char)'\x1',  // XMM1i
  (unsigned char)'\x1',  // XMM1j
  (unsigned char)'\x1',  // XMM1k
  (unsigned char)'\x1',  // XMM1l
  (unsigned char)'\x1',  // XMM1m
  (unsigned char)'\x1',  // XMM1n
  (unsigned char)'\x1',  // XMM1o
  (unsigned char)'\x1',  // XMM1p
  (unsigned char)'\x2',  // XMM2
  (unsigned char)'\x2',  // XMM2b
  (unsigned char)'\x2',  // XMM2c
  (unsigned char)'\x2',  // XMM2d
  (unsigned char)'\x2',  // XMM2e
  (unsigned char)'\x2',  // XMM2f
  (unsigned char)'\x2',  // XMM2g
  (unsigned char)'\x2',  // XMM2h
  (unsigned char)'\x2',  // XMM2i
  (unsigned char)'\x2',  // XMM2j
  (unsigned char)'\x2',  // XMM2k
  (unsigned char)'\x2',  // XMM2l
  (unsigned char)'\x2',  // XMM2m
  (unsigned char)'\x2',  // XMM2n
  (unsigned char)'\x2',  // XMM2o
  (unsigned char)'\x2',  // XMM2p
  (unsigned char)'\x3',  // XMM3
  (unsigned char)'\x3',  // XMM3b
  (unsigned char)'\x3',  // XMM3c
  (unsigned char)'\x3',  // XMM3d
  (unsigned char)'\x3',  // XMM3e
  (unsigned char)'\x3',  // XMM3f
  (unsigned char)'\x3',  // XMM3g
  (unsigned char)'\x3',  // XMM3h
  (unsigned char)'\x3',  // XMM3i
  (unsigned char)'\x3',  // XMM3j
  (unsigned char)'\x3',  // XMM3k
  (unsigned char)'\x3',  // XMM3l
  (unsigned char)'\x3',  // XMM3m
  (unsigned char)'\x3',  // XMM3n
  (unsigned char)'\x3',  // XMM3o
  (unsigned char)'\x3',  // XMM3p
  (unsigned char)'\x4',  // XMM4
  (unsigned char)'\x4',  // XMM4b
  (unsigned char)'\x4',  // XMM4c
  (unsigned char)'\x4',  // XMM4d
  (unsigned char)'\x4',  // XMM4e
  (unsigned char)'\x4',  // XMM4f
  (unsigned char)'\x4',  // XMM4g
  (unsigned char)'\x4',  // XMM4h
  (unsigned char)'\x4',  // XMM4i
  (unsigned char)'\x4',  // XMM4j
  (unsigned char)'\x4',  // XMM4k
  (unsigned char)'\x4',  // XMM4l
  (unsigned char)'\x4',  // XMM4m
  (unsigned char)'\x4',  // XMM4n
  (unsigned char)'\x4',  // XMM4o
  (unsigned char)'\x4',  // XMM4p
  (unsigned char)'\x5',  // XMM5
  (unsigned char)'\x5',  // XMM5b
  (unsigned char)'\x5',  // XMM5c
  (unsigned char)'\x5',  // XMM5d
  (unsigned char)'\x5',  // XMM5e
  (unsigned char)'\x5',  // XMM5f
  (unsigned char)'\x5',  // XMM5g
  (unsigned char)'\x5',  // XMM5h
  (unsigned char)'\x5',  // XMM5i
  (unsigned char)'\x5',  // XMM5j
  (unsigned char)'\x5',  // XMM5k
  (unsigned char)'\x5',  // XMM5l
  (unsigned char)'\x5',  // XMM5m
  (unsigned char)'\x5',  // XMM5n
  (unsigned char)'\x5',  // XMM5o
  (unsigned char)'\x5',  // XMM5p
  (unsigned char)'\x6',  // XMM6
  (unsigned char)'\x6',  // XMM6b
  (unsigned char)'\x6',  // XMM6c
  (unsigned char)'\x6',  // XMM6d
  (unsigned char)'\x6',  // XMM6e
  (unsigned char)'\x6',  // XMM6f
  (unsigned char)'\x6',  // XMM6g
  (unsigned char)'\x6',  // XMM6h
  (unsigned char)'\x6',  // XMM6i
  (unsigned char)'\x6',  // XMM6j
  (unsigned char)'\x6',  // XMM6k
  (unsigned char)'\x6',  // XMM6l
  (unsigned char)'\x6',  // XMM6m
  (unsigned char)'\x6',  // XMM6n
  (unsigned char)'\x6',  // XMM6o
  (unsigned char)'\x6',  // XMM6p
  (unsigned char)'\x7',  // XMM7
  (unsigned char)'\x7',  // XMM7b
  (unsigned char)'\x7',  // XMM7c
  (unsigned char)'\x7',  // XMM7d
  (unsigned char)'\x7',  // XMM7e
  (unsigned char)'\x7',  // XMM7f
  (unsigned char)'\x7',  // XMM7g
  (unsigned char)'\x7',  // XMM7h
  (unsigned char)'\x7',  // XMM7i
  (unsigned char)'\x7',  // XMM7j
  (unsigned char)'\x7',  // XMM7k
  (unsigned char)'\x7',  // XMM7l
  (unsigned char)'\x7',  // XMM7m
  (unsigned char)'\x7',  // XMM7n
  (unsigned char)'\x7',  // XMM7o
  (unsigned char)'\x7',  // XMM7p
  (unsigned char)'\x8',  // XMM8
  (unsigned char)'\x8',  // XMM8b
  (unsigned char)'\x8',  // XMM8c
  (unsigned char)'\x8',  // XMM8d
  (unsigned char)'\x8',  // XMM8e
  (unsigned char)'\x8',  // XMM8f
  (unsigned char)'\x8',  // XMM8g
  (unsigned char)'\x8',  // XMM8h
  (unsigned char)'\x8',  // XMM8i
  (unsigned char)'\x8',  // XMM8j
  (unsigned char)'\x8',  // XMM8k
  (unsigned char)'\x8',  // XMM8l
  (unsigned char)'\x8',  // XMM8m
  (unsigned char)'\x8',  // XMM8n
  (unsigned char)'\x8',  // XMM8o
  (unsigned char)'\x8',  // XMM8p
  (unsigned char)'\x9',  // XMM9
  (unsigned char)'\x9',  // XMM9b
  (unsigned char)'\x9',  // XMM9c
  (unsigned char)'\x9',  // XMM9d
  (unsigned char)'\x9',  // XMM9e
  (unsigned char)'\x9',  // XMM9f
  (unsigned char)'\x9',  // XMM9g
  (unsigned char)'\x9',  // XMM9h
  (unsigned char)'\x9',  // XMM9i
  (unsigned char)'\x9',  // XMM9j
  (unsigned char)'\x9',  // XMM9k
  (unsigned char)'\x9',  // XMM9l
  (unsigned char)'\x9',  // XMM9m
  (unsigned char)'\x9',  // XMM9n
  (unsigned char)'\x9',  // XMM9o
  (unsigned char)'\x9',  // XMM9p
  (unsigned char)'\xA',  // XMM10
  (unsigned char)'\xA',  // XMM10b
  (unsigned char)'\xA',  // XMM10c
  (unsigned char)'\xA',  // XMM10d
  (unsigned char)'\xA',  // XMM10e
  (unsigned char)'\xA',  // XMM10f
  (unsigned char)'\xA',  // XMM10g
  (unsigned char)'\xA',  // XMM10h
  (unsigned char)'\xA',  // XMM10i
  (unsigned char)'\xA',  // XMM10j
  (unsigned char)'\xA',  // XMM10k
  (unsigned char)'\xA',  // XMM10l
  (unsigned char)'\xA',  // XMM10m
  (unsigned char)'\xA',  // XMM10n
  (unsigned char)'\xA',  // XMM10o
  (unsigned char)'\xA',  // XMM10p
  (unsigned char)'\xB',  // XMM11
  (unsigned char)'\xB',  // XMM11b
  (unsigned char)'\xB',  // XMM11c
  (unsigned char)'\xB',  // XMM11d
  (unsigned char)'\xB',  // XMM11e
  (unsigned char)'\xB',  // XMM11f
  (unsigned char)'\xB',  // XMM11g
  (unsigned char)'\xB',  // XMM11h
  (unsigned char)'\xB',  // XMM11i
  (unsigned char)'\xB',  // XMM11j
  (unsigned char)'\xB',  // XMM11k
  (unsigned char)'\xB',  // XMM11l
  (unsigned char)'\xB',  // XMM11m
  (unsigned char)'\xB',  // XMM11n
  (unsigned char)'\xB',  // XMM11o
  (unsigned char)'\xB',  // XMM11p
  (unsigned char)'\xC',  // XMM12
  (unsigned char)'\xC',  // XMM12b
  (unsigned char)'\xC',  // XMM12c
  (unsigned char)'\xC',  // XMM12d
  (unsigned char)'\xC',  // XMM12e
  (unsigned char)'\xC',  // XMM12f
  (unsigned char)'\xC',  // XMM12g
  (unsigned char)'\xC',  // XMM12h
  (unsigned char)'\xC',  // XMM12i
  (unsigned char)'\xC',  // XMM12j
  (unsigned char)'\xC',  // XMM12k
  (unsigned char)'\xC',  // XMM12l
  (unsigned char)'\xC',  // XMM12m
  (unsigned char)'\xC',  // XMM12n
  (unsigned char)'\xC',  // XMM12o
  (unsigned char)'\xC',  // XMM12p
  (unsigned char)'\xD',  // XMM13
  (unsigned char)'\xD',  // XMM13b
  (unsigned char)'\xD',  // XMM13c
  (unsigned char)'\xD',  // XMM13d
  (unsigned char)'\xD',  // XMM13e
  (unsigned char)'\xD',  // XMM13f
  (unsigned char)'\xD',  // XMM13g
  (unsigned char)'\xD',  // XMM13h
  (unsigned char)'\xD',  // XMM13i
  (unsigned char)'\xD',  // XMM13j
  (unsigned char)'\xD',  // XMM13k
  (unsigned char)'\xD',  // XMM13l
  (unsigned char)'\xD',  // XMM13m
  (unsigned char)'\xD',  // XMM13n
  (unsigned char)'\xD',  // XMM13o
  (unsigned char)'\xD',  // XMM13p
  (unsigned char)'\xE',  // XMM14
  (unsigned char)'\xE',  // XMM14b
  (unsigned char)'\xE',  // XMM14c
  (unsigned char)'\xE',  // XMM14d
  (unsigned char)'\xE',  // XMM14e
  (unsigned char)'\xE',  // XMM14f
  (unsigned char)'\xE',  // XMM14g
  (unsigned char)'\xE',  // XMM14h
  (unsigned char)'\xE',  // XMM14i
  (unsigned char)'\xE',  // XMM14j
  (unsigned char)'\xE',  // XMM14k
  (unsigned char)'\xE',  // XMM14l
  (unsigned char)'\xE',  // XMM14m
  (unsigned char)'\xE',  // XMM14n
  (unsigned char)'\xE',  // XMM14o
  (unsigned char)'\xE',  // XMM14p
  (unsigned char)'\xF',  // XMM15
  (unsigned char)'\xF',  // XMM15b
  (unsigned char)'\xF',  // XMM15c
  (unsigned char)'\xF',  // XMM15d
  (unsigned char)'\xF',  // XMM15e
  (unsigned char)'\xF',  // XMM15f
  (unsigned char)'\xF',  // XMM15g
  (unsigned char)'\xF',  // XMM15h
  (unsigned char)'\xF',  // XMM15i
  (unsigned char)'\xF',  // XMM15j
  (unsigned char)'\xF',  // XMM15k
  (unsigned char)'\xF',  // XMM15l
  (unsigned char)'\xF',  // XMM15m
  (unsigned char)'\xF',  // XMM15n
  (unsigned char)'\xF',  // XMM15o
  (unsigned char)'\xF',  // XMM15p
  (unsigned char)'\x10',  // XMM16
  (unsigned char)'\x10',  // XMM16b
  (unsigned char)'\x10',  // XMM16c
  (unsigned char)'\x10',  // XMM16d
  (unsigned char)'\x10',  // XMM16e
  (unsigned char)'\x10',  // XMM16f
  (unsigned char)'\x10',  // XMM16g
  (unsigned char)'\x10',  // XMM16h
  (unsigned char)'\x10',  // XMM16i
  (unsigned char)'\x10',  // XMM16j
  (unsigned char)'\x10',  // XMM16k
  (unsigned char)'\x10',  // XMM16l
  (unsigned char)'\x10',  // XMM16m
  (unsigned char)'\x10',  // XMM16n
  (unsigned char)'\x10',  // XMM16o
  (unsigned char)'\x10',  // XMM16p
  (unsigned char)'\x11',  // XMM17
  (unsigned char)'\x11',  // XMM17b
  (unsigned char)'\x11',  // XMM17c
  (unsigned char)'\x11',  // XMM17d
  (unsigned char)'\x11',  // XMM17e
  (unsigned char)'\x11',  // XMM17f
  (unsigned char)'\x11',  // XMM17g
  (unsigned char)'\x11',  // XMM17h
  (unsigned char)'\x11',  // XMM17i
  (unsigned char)'\x11',  // XMM17j
  (unsigned char)'\x11',  // XMM17k
  (unsigned char)'\x11',  // XMM17l
  (unsigned char)'\x11',  // XMM17m
  (unsigned char)'\x11',  // XMM17n
  (unsigned char)'\x11',  // XMM17o
  (unsigned char)'\x11',  // XMM17p
  (unsigned char)'\x12',  // XMM18
  (unsigned char)'\x12',  // XMM18b
  (unsigned char)'\x12',  // XMM18c
  (unsigned char)'\x12',  // XMM18d
  (unsigned char)'\x12',  // XMM18e
  (unsigned char)'\x12',  // XMM18f
  (unsigned char)'\x12',  // XMM18g
  (unsigned char)'\x12',  // XMM18h
  (unsigned char)'\x12',  // XMM18i
  (unsigned char)'\x12',  // XMM18j
  (unsigned char)'\x12',  // XMM18k
  (unsigned char)'\x12',  // XMM18l
  (unsigned char)'\x12',  // XMM18m
  (unsigned char)'\x12',  // XMM18n
  (unsigned char)'\x12',  // XMM18o
  (unsigned char)'\x12',  // XMM18p
  (unsigned char)'\x13',  // XMM19
  (unsigned char)'\x13',  // XMM19b
  (unsigned char)'\x13',  // XMM19c
  (unsigned char)'\x13',  // XMM19d
  (unsigned char)'\x13',  // XMM19e
  (unsigned char)'\x13',  // XMM19f
  (unsigned char)'\x13',  // XMM19g
  (unsigned char)'\x13',  // XMM19h
  (unsigned char)'\x13',  // XMM19i
  (unsigned char)'\x13',  // XMM19j
  (unsigned char)'\x13',  // XMM19k
  (unsigned char)'\x13',  // XMM19l
  (unsigned char)'\x13',  // XMM19m
  (unsigned char)'\x13',  // XMM19n
  (unsigned char)'\x13',  // XMM19o
  (unsigned char)'\x13',  // XMM19p
  (unsigned char)'\x14',  // XMM20
  (unsigned char)'\x14',  // XMM20b
  (unsigned char)'\x14',  // XMM20c
  (unsigned char)'\x14',  // XMM20d
  (unsigned char)'\x14',  // XMM20e
  (unsigned char)'\x14',  // XMM20f
  (unsigned char)'\x14',  // XMM20g
  (unsigned char)'\x14',  // XMM20h
  (unsigned char)'\x14',  // XMM20i
  (unsigned char)'\x14',  // XMM20j
  (unsigned char)'\x14',  // XMM20k
  (unsigned char)'\x14',  // XMM20l
  (unsigned char)'\x14',  // XMM20m
  (unsigned char)'\x14',  // XMM20n
  (unsigned char)'\x14',  // XMM20o
  (unsigned char)'\x14',  // XMM20p
  (unsigned char)'\x15',  // XMM21
  (unsigned char)'\x15',  // XMM21b
  (unsigned char)'\x15',  // XMM21c
  (unsigned char)'\x15',  // XMM21d
  (unsigned char)'\x15',  // XMM21e
  (unsigned char)'\x15',  // XMM21f
  (unsigned char)'\x15',  // XMM21g
  (unsigned char)'\x15',  // XMM21h
  (unsigned char)'\x15',  // XMM21i
  (unsigned char)'\x15',  // XMM21j
  (unsigned char)'\x15',  // XMM21k
  (unsigned char)'\x15',  // XMM21l
  (unsigned char)'\x15',  // XMM21m
  (unsigned char)'\x15',  // XMM21n
  (unsigned char)'\x15',  // XMM21o
  (unsigned char)'\x15',  // XMM21p
  (unsigned char)'\x16',  // XMM22
  (unsigned char)'\x16',  // XMM22b
  (unsigned char)'\x16',  // XMM22c
  (unsigned char)'\x16',  // XMM22d
  (unsigned char)'\x16',  // XMM22e
  (unsigned char)'\x16',  // XMM22f
  (unsigned char)'\x16',  // XMM22g
  (unsigned char)'\x16',  // XMM22h
  (unsigned char)'\x16',  // XMM22i
  (unsigned char)'\x16',  // XMM22j
  (unsigned char)'\x16',  // XMM22k
  (unsigned char)'\x16',  // XMM22l
  (unsigned char)'\x16',  // XMM22m
  (unsigned char)'\x16',  // XMM22n
  (unsigned char)'\x16',  // XMM22o
  (unsigned char)'\x16',  // XMM22p
  (unsigned char)'\x17',  // XMM23
  (unsigned char)'\x17',  // XMM23b
  (unsigned char)'\x17',  // XMM23c
  (unsigned char)'\x17',  // XMM23d
  (unsigned char)'\x17',  // XMM23e
  (unsigned char)'\x17',  // XMM23f
  (unsigned char)'\x17',  // XMM23g
  (unsigned char)'\x17',  // XMM23h
  (unsigned char)'\x17',  // XMM23i
  (unsigned char)'\x17',  // XMM23j
  (unsigned char)'\x17',  // XMM23k
  (unsigned char)'\x17',  // XMM23l
  (unsigned char)'\x17',  // XMM23m
  (unsigned char)'\x17',  // XMM23n
  (unsigned char)'\x17',  // XMM23o
  (unsigned char)'\x17',  // XMM23p
  (unsigned char)'\x18',  // XMM24
  (unsigned char)'\x18',  // XMM24b
  (unsigned char)'\x18',  // XMM24c
  (unsigned char)'\x18',  // XMM24d
  (unsigned char)'\x18',  // XMM24e
  (unsigned char)'\x18',  // XMM24f
  (unsigned char)'\x18',  // XMM24g
  (unsigned char)'\x18',  // XMM24h
  (unsigned char)'\x18',  // XMM24i
  (unsigned char)'\x18',  // XMM24j
  (unsigned char)'\x18',  // XMM24k
  (unsigned char)'\x18',  // XMM24l
  (unsigned char)'\x18',  // XMM24m
  (unsigned char)'\x18',  // XMM24n
  (unsigned char)'\x18',  // XMM24o
  (unsigned char)'\x18',  // XMM24p
  (unsigned char)'\x19',  // XMM25
  (unsigned char)'\x19',  // XMM25b
  (unsigned char)'\x19',  // XMM25c
  (unsigned char)'\x19',  // XMM25d
  (unsigned char)'\x19',  // XMM25e
  (unsigned char)'\x19',  // XMM25f
  (unsigned char)'\x19',  // XMM25g
  (unsigned char)'\x19',  // XMM25h
  (unsigned char)'\x19',  // XMM25i
  (unsigned char)'\x19',  // XMM25j
  (unsigned char)'\x19',  // XMM25k
  (unsigned char)'\x19',  // XMM25l
  (unsigned char)'\x19',  // XMM25m
  (unsigned char)'\x19',  // XMM25n
  (unsigned char)'\x19',  // XMM25o
  (unsigned char)'\x19',  // XMM25p
  (unsigned char)'\x1A',  // XMM26
  (unsigned char)'\x1A',  // XMM26b
  (unsigned char)'\x1A',  // XMM26c
  (unsigned char)'\x1A',  // XMM26d
  (unsigned char)'\x1A',  // XMM26e
  (unsigned char)'\x1A',  // XMM26f
  (unsigned char)'\x1A',  // XMM26g
  (unsigned char)'\x1A',  // XMM26h
  (unsigned char)'\x1A',  // XMM26i
  (unsigned char)'\x1A',  // XMM26j
  (unsigned char)'\x1A',  // XMM26k
  (unsigned char)'\x1A',  // XMM26l
  (unsigned char)'\x1A',  // XMM26m
  (unsigned char)'\x1A',  // XMM26n
  (unsigned char)'\x1A',  // XMM26o
  (unsigned char)'\x1A',  // XMM26p
  (unsigned char)'\x1B',  // XMM27
  (unsigned char)'\x1B',  // XMM27b
  (unsigned char)'\x1B',  // XMM27c
  (unsigned char)'\x1B',  // XMM27d
  (unsigned char)'\x1B',  // XMM27e
  (unsigned char)'\x1B',  // XMM27f
  (unsigned char)'\x1B',  // XMM27g
  (unsigned char)'\x1B',  // XMM27h
  (unsigned char)'\x1B',  // XMM27i
  (unsigned char)'\x1B',  // XMM27j
  (unsigned char)'\x1B',  // XMM27k
  (unsigned char)'\x1B',  // XMM27l
  (unsigned char)'\x1B',  // XMM27m
  (unsigned char)'\x1B',  // XMM27n
  (unsigned char)'\x1B',  // XMM27o
  (unsigned char)'\x1B',  // XMM27p
  (unsigned char)'\x1C',  // XMM28
  (unsigned char)'\x1C',  // XMM28b
  (unsigned char)'\x1C',  // XMM28c
  (unsigned char)'\x1C',  // XMM28d
  (unsigned char)'\x1C',  // XMM28e
  (unsigned char)'\x1C',  // XMM28f
  (unsigned char)'\x1C',  // XMM28g
  (unsigned char)'\x1C',  // XMM28h
  (unsigned char)'\x1C',  // XMM28i
  (unsigned char)'\x1C',  // XMM28j
  (unsigned char)'\x1C',  // XMM28k
  (unsigned char)'\x1C',  // XMM28l
  (unsigned char)'\x1C',  // XMM28m
  (unsigned char)'\x1C',  // XMM28n
  (unsigned char)'\x1C',  // XMM28o
  (unsigned char)'\x1C',  // XMM28p
  (unsigned char)'\x1D',  // XMM29
  (unsigned char)'\x1D',  // XMM29b
  (unsigned char)'\x1D',  // XMM29c
  (unsigned char)'\x1D',  // XMM29d
  (unsigned char)'\x1D',  // XMM29e
  (unsigned char)'\x1D',  // XMM29f
  (unsigned char)'\x1D',  // XMM29g
  (unsigned char)'\x1D',  // XMM29h
  (unsigned char)'\x1D',  // XMM29i
  (unsigned char)'\x1D',  // XMM29j
  (unsigned char)'\x1D',  // XMM29k
  (unsigned char)'\x1D',  // XMM29l
  (unsigned char)'\x1D',  // XMM29m
  (unsigned char)'\x1D',  // XMM29n
  (unsigned char)'\x1D',  // XMM29o
  (unsigned char)'\x1D',  // XMM29p
  (unsigned char)'\x1E',  // XMM30
  (unsigned char)'\x1E',  // XMM30b
  (unsigned char)'\x1E',  // XMM30c
  (unsigned char)'\x1E',  // XMM30d
  (unsigned char)'\x1E',  // XMM30e
  (unsigned char)'\x1E',  // XMM30f
  (unsigned char)'\x1E',  // XMM30g
  (unsigned char)'\x1E',  // XMM30h
  (unsigned char)'\x1E',  // XMM30i
  (unsigned char)'\x1E',  // XMM30j
  (unsigned char)'\x1E',  // XMM30k
  (unsigned char)'\x1E',  // XMM30l
  (unsigned char)'\x1E',  // XMM30m
  (unsigned char)'\x1E',  // XMM30n
  (unsigned char)'\x1E',  // XMM30o
  (unsigned char)'\x1E',  // XMM30p
  (unsigned char)'\x1F',  // XMM31
  (unsigned char)'\x1F',  // XMM31b
  (unsigned char)'\x1F',  // XMM31c
  (unsigned char)'\x1F',  // XMM31d
  (unsigned char)'\x1F',  // XMM31e
  (unsigned char)'\x1F',  // XMM31f
  (unsigned char)'\x1F',  // XMM31g
  (unsigned char)'\x1F',  // XMM31h
  (unsigned char)'\x1F',  // XMM31i
  (unsigned char)'\x1F',  // XMM31j
  (unsigned char)'\x1F',  // XMM31k
  (unsigned char)'\x1F',  // XMM31l
  (unsigned char)'\x1F',  // XMM31m
  (unsigned char)'\x1F',  // XMM31n
  (unsigned char)'\x1F',  // XMM31o
  (unsigned char)'\x1F',  // XMM31p
  (unsigned char)'\x10' // no trailing comma  // RFLAGS
};


//------------------Define classes derived from MachOper---------------------
MachOper  *labelOper::clone() const {
  return  new labelOper(_label, _block_num);
}
uint labelOper::opcode() const { return LABEL; }

const RegMask *sRegIOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &(Compile::current()->FIRST_STACK_mask());
}

const RegMask *sRegPOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &(Compile::current()->FIRST_STACK_mask());
}

const RegMask *sRegFOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &(Compile::current()->FIRST_STACK_mask());
}

const RegMask *sRegDOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &(Compile::current()->FIRST_STACK_mask());
}

const RegMask *sRegLOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &(Compile::current()->FIRST_STACK_mask());
}

MachOper  *methodOper::clone() const {
  return  new methodOper(_method);
}
uint methodOper::opcode() const { return METHOD; }

const RegMask *rRegIOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &INT_REG_mask();
}

const RegMask *rax_RegIOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &INT_RAX_REG_mask();
}

const RegMask *rbx_RegIOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &INT_RBX_REG_mask();
}

const RegMask *rcx_RegIOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &INT_RCX_REG_mask();
}

const RegMask *rdx_RegIOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &INT_RDX_REG_mask();
}

const RegMask *rdi_RegIOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &INT_RDI_REG_mask();
}

const RegMask *no_rcx_RegIOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &INT_NO_RCX_REG_mask();
}

const RegMask *no_rax_rdx_RegIOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &INT_NO_RAX_RDX_REG_mask();
}

const RegMask *any_RegPOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &ANY_REG_mask();
}

const RegMask *rRegPOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_REG_mask();
}

const RegMask *rRegNOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &INT_REG_mask();
}

const RegMask *no_rax_RegPOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_NO_RAX_REG_mask();
}

const RegMask *no_rbp_RegPOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_REG_NO_RBP_mask();
}

const RegMask *no_rax_rbx_RegPOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_NO_RAX_RBX_REG_mask();
}

const RegMask *rax_RegPOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_RAX_REG_mask();
}

const RegMask *rax_RegNOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &INT_RAX_REG_mask();
}

const RegMask *rbx_RegPOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_RBX_REG_mask();
}

const RegMask *rsi_RegPOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_RSI_REG_mask();
}

const RegMask *rdi_RegPOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_RDI_REG_mask();
}

const RegMask *r15_RegPOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_R15_REG_mask();
}

const RegMask *rRegLOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &LONG_REG_mask();
}

const RegMask *no_rax_rdx_RegLOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &LONG_NO_RAX_RDX_REG_mask();
}

const RegMask *no_rax_RegLOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &LONG_NO_RAX_RDX_REG_mask();
}

const RegMask *no_rcx_RegLOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &LONG_NO_RCX_REG_mask();
}

const RegMask *rax_RegLOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &LONG_RAX_REG_mask();
}

const RegMask *rcx_RegLOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &LONG_RCX_REG_mask();
}

const RegMask *rdx_RegLOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &LONG_RDX_REG_mask();
}

const RegMask *rFlagsRegOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &INT_FLAGS_mask();
}

const RegMask *rFlagsRegUOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &INT_FLAGS_mask();
}

const RegMask *rFlagsRegUCFOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &INT_FLAGS_mask();
}

const RegMask *regFOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &FLOAT_REG_mask();
}

const RegMask *regDOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &DOUBLE_REG_mask();
}

const RegMask *vecSOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &VECTORS_REG_mask();
}

const RegMask *vecDOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &VECTORD_REG_mask();
}

const RegMask *vecXOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &VECTORX_REG_mask();
}

const RegMask *vecYOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &VECTORY_REG_mask();
}

const RegMask *indirectOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &PTR_REG_mask();
}

const RegMask *indOffset8Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &ANY_REG_mask();
}

const RegMask *indOffset32Oper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &ANY_REG_mask();
}

const RegMask *indIndexOffsetOper::in_RegMask(int index) const {
  assert(0 <= index && index < 2, "index out of range");
  switch (index) {
  case 0: return &ANY_REG_mask();
  case 1: return &LONG_REG_mask();
  }
  ShouldNotReachHere();
  return NULL;
}

const RegMask *indIndexOper::in_RegMask(int index) const {
  assert(0 <= index && index < 2, "index out of range");
  switch (index) {
  case 0: return &ANY_REG_mask();
  case 1: return &LONG_REG_mask();
  }
  ShouldNotReachHere();
  return NULL;
}

const RegMask *indIndexScaleOper::in_RegMask(int index) const {
  assert(0 <= index && index < 2, "index out of range");
  switch (index) {
  case 0: return &ANY_REG_mask();
  case 1: return &LONG_REG_mask();
  }
  ShouldNotReachHere();
  return NULL;
}

const RegMask *indPosIndexScaleOper::in_RegMask(int index) const {
  assert(0 <= index && index < 2, "index out of range");
  switch (index) {
  case 0: return &ANY_REG_mask();
  case 1: return &INT_REG_mask();
  }
  ShouldNotReachHere();
  return NULL;
}

const RegMask *indIndexScaleOffsetOper::in_RegMask(int index) const {
  assert(0 <= index && index < 2, "index out of range");
  switch (index) {
  case 0: return &ANY_REG_mask();
  case 1: return &LONG_REG_mask();
  }
  ShouldNotReachHere();
  return NULL;
}

const RegMask *indPosIndexOffsetOper::in_RegMask(int index) const {
  assert(0 <= index && index < 2, "index out of range");
  switch (index) {
  case 0: return &ANY_REG_mask();
  case 1: return &INT_REG_mask();
  }
  ShouldNotReachHere();
  return NULL;
}

const RegMask *indPosIndexScaleOffsetOper::in_RegMask(int index) const {
  assert(0 <= index && index < 2, "index out of range");
  switch (index) {
  case 0: return &ANY_REG_mask();
  case 1: return &INT_REG_mask();
  }
  ShouldNotReachHere();
  return NULL;
}

const RegMask *indCompressedOopOffsetOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &INT_REG_mask();
}

const RegMask *indirectNarrowOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &INT_REG_mask();
}

const RegMask *indOffset8NarrowOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &INT_REG_mask();
}

const RegMask *indOffset32NarrowOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &INT_REG_mask();
}

const RegMask *indIndexOffsetNarrowOper::in_RegMask(int index) const {
  assert(0 <= index && index < 2, "index out of range");
  switch (index) {
  case 0: return &INT_REG_mask();
  case 1: return &LONG_REG_mask();
  }
  ShouldNotReachHere();
  return NULL;
}

const RegMask *indIndexNarrowOper::in_RegMask(int index) const {
  assert(0 <= index && index < 2, "index out of range");
  switch (index) {
  case 0: return &INT_REG_mask();
  case 1: return &LONG_REG_mask();
  }
  ShouldNotReachHere();
  return NULL;
}

const RegMask *indIndexScaleNarrowOper::in_RegMask(int index) const {
  assert(0 <= index && index < 2, "index out of range");
  switch (index) {
  case 0: return &INT_REG_mask();
  case 1: return &LONG_REG_mask();
  }
  ShouldNotReachHere();
  return NULL;
}

const RegMask *indIndexScaleOffsetNarrowOper::in_RegMask(int index) const {
  assert(0 <= index && index < 2, "index out of range");
  switch (index) {
  case 0: return &INT_REG_mask();
  case 1: return &LONG_REG_mask();
  }
  ShouldNotReachHere();
  return NULL;
}

const RegMask *indPosIndexOffsetNarrowOper::in_RegMask(int index) const {
  assert(0 <= index && index < 2, "index out of range");
  return &INT_REG_mask();
}

const RegMask *indPosIndexScaleOffsetNarrowOper::in_RegMask(int index) const {
  assert(0 <= index && index < 2, "index out of range");
  return &INT_REG_mask();
}

const RegMask *stackSlotPOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &(Compile::current()->FIRST_STACK_mask());
}

const RegMask *stackSlotIOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &(Compile::current()->FIRST_STACK_mask());
}

const RegMask *stackSlotFOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &(Compile::current()->FIRST_STACK_mask());
}

const RegMask *stackSlotDOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &(Compile::current()->FIRST_STACK_mask());
}

const RegMask *stackSlotLOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &(Compile::current()->FIRST_STACK_mask());
}

const RegMask *vecZOper::in_RegMask(int index) const {
  assert(0 <= index && index < 1, "index out of range");
  return &VECTORZ_REG_mask();
}

//------------------Define members for classes derived from MachNode----------

void popCountINode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *popCountINode::cisc_version(int offset) {
  popCountI_memNode *node = new popCountI_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void popCountLNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_LONG_REG_mask();
}

// Build CISC version of this instruction
MachNode *popCountLNode::cisc_version(int offset) {
  popCountL_memNode *node = new popCountL_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void cmovI_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *cmovI_regNode::cisc_version(int offset) {
  cmovI_memNode *node = new cmovI_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void cmovI_regUNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *cmovI_regUNode::cisc_version(int offset) {
  cmovI_memUNode *node = new cmovI_memUNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void cmovI_regUCFNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *cmovI_regUCFNode::cisc_version(int offset) {
  cmovI_memUCFNode *node = new cmovI_memUCFNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void cmovL_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_LONG_REG_mask();
}

// Build CISC version of this instruction
MachNode *cmovL_regNode::cisc_version(int offset) {
  cmovL_memNode *node = new cmovL_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void cmovL_regUNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_LONG_REG_mask();
}

// Build CISC version of this instruction
MachNode *cmovL_regUNode::cisc_version(int offset) {
  cmovL_memUNode *node = new cmovL_memUNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void cmovL_regUCFNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_LONG_REG_mask();
}

// Build CISC version of this instruction
MachNode *cmovL_regUCFNode::cisc_version(int offset) {
  cmovL_memUCFNode *node = new cmovL_memUCFNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void addI_rRegNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *addI_rRegNode::cisc_version(int offset) {
  addI_rReg_memNode *node = new addI_rReg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void addL_rRegNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_LONG_REG_mask();
}

// Build CISC version of this instruction
MachNode *addL_rRegNode::cisc_version(int offset) {
  addL_rReg_memNode *node = new addL_rReg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void subI_rRegNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *subI_rRegNode::cisc_version(int offset) {
  subI_rReg_memNode *node = new subI_rReg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void subL_rRegNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_LONG_REG_mask();
}

// Build CISC version of this instruction
MachNode *subL_rRegNode::cisc_version(int offset) {
  subL_rReg_memNode *node = new subL_rReg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void mulI_rRegNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *mulI_rRegNode::cisc_version(int offset) {
  mulI_memNode *node = new mulI_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void mulI_rReg_immNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *mulI_rReg_immNode::cisc_version(int offset) {
  mulI_mem_immNode *node = new mulI_mem_immNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void mulL_rRegNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_LONG_REG_mask();
}

// Build CISC version of this instruction
MachNode *mulL_rRegNode::cisc_version(int offset) {
  mulL_memNode *node = new mulL_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void mulL_rReg_immNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_LONG_REG_mask();
}

// Build CISC version of this instruction
MachNode *mulL_rReg_immNode::cisc_version(int offset) {
  mulL_mem_immNode *node = new mulL_mem_immNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void i2bNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *i2bNode::cisc_version(int offset) {
  loadI2BNode *node = new loadI2BNode();
  node->_num_opnds = 3;

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void i2sNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *i2sNode::cisc_version(int offset) {
  loadI2SNode *node = new loadI2SNode();
  node->_num_opnds = 3;

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void andI_rRegNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *andI_rRegNode::cisc_version(int offset) {
  andI_rReg_memNode *node = new andI_rReg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void andI2L_rReg_imm255Node::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *andI2L_rReg_imm255Node::cisc_version(int offset) {
  loadI2L_immI_255Node *node = new loadI2L_immI_255Node();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void andI2L_rReg_imm65535Node::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *andI2L_rReg_imm65535Node::cisc_version(int offset) {
  loadI2L_immI_65535Node *node = new loadI2L_immI_65535Node();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void andnI_rReg_rReg_rRegNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *andnI_rReg_rReg_rRegNode::cisc_version(int offset) {
  andnI_rReg_rReg_memNode *node = new andnI_rReg_rReg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void andnI_rReg_rReg_rReg_0Node::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *andnI_rReg_rReg_rReg_0Node::cisc_version(int offset) {
  andnI_rReg_rReg_mem_0Node *node = new andnI_rReg_rReg_mem_0Node();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void orI_rRegNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *orI_rRegNode::cisc_version(int offset) {
  orI_rReg_memNode *node = new orI_rReg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void xorI_rRegNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *xorI_rRegNode::cisc_version(int offset) {
  xorI_rReg_memNode *node = new xorI_rReg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void andL_rRegNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_LONG_REG_mask();
}

// Build CISC version of this instruction
MachNode *andL_rRegNode::cisc_version(int offset) {
  andL_rReg_memNode *node = new andL_rReg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void andnL_rReg_rReg_rRegNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_LONG_REG_mask();
}

// Build CISC version of this instruction
MachNode *andnL_rReg_rReg_rRegNode::cisc_version(int offset) {
  andnL_rReg_rReg_memNode *node = new andnL_rReg_rReg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void andnL_rReg_rReg_rReg_0Node::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_LONG_REG_mask();
}

// Build CISC version of this instruction
MachNode *andnL_rReg_rReg_rReg_0Node::cisc_version(int offset) {
  andnL_rReg_rReg_mem_0Node *node = new andnL_rReg_rReg_mem_0Node();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void orL_rRegNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_LONG_REG_mask();
}

// Build CISC version of this instruction
MachNode *orL_rRegNode::cisc_version(int offset) {
  orL_rReg_memNode *node = new orL_rReg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void xorL_rRegNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_LONG_REG_mask();
}

// Build CISC version of this instruction
MachNode *xorL_rRegNode::cisc_version(int offset) {
  xorL_rReg_memNode *node = new xorL_rReg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void cmpF_cc_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_FLOAT_REG_mask();
}

// Build CISC version of this instruction
MachNode *cmpF_cc_regNode::cisc_version(int offset) {
  cmpF_cc_memNode *node = new cmpF_cc_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void cmpF_cc_reg_CFNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_FLOAT_REG_mask();
}

// Build CISC version of this instruction
MachNode *cmpF_cc_reg_CFNode::cisc_version(int offset) {
  cmpF_cc_memCFNode *node = new cmpF_cc_memCFNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void cmpD_cc_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_DOUBLE_REG_mask();
}

// Build CISC version of this instruction
MachNode *cmpD_cc_regNode::cisc_version(int offset) {
  cmpD_cc_memNode *node = new cmpD_cc_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void cmpD_cc_reg_CFNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_DOUBLE_REG_mask();
}

// Build CISC version of this instruction
MachNode *cmpD_cc_reg_CFNode::cisc_version(int offset) {
  cmpD_cc_memCFNode *node = new cmpD_cc_memCFNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void cmpF_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_FLOAT_REG_mask();
}

// Build CISC version of this instruction
MachNode *cmpF_regNode::cisc_version(int offset) {
  cmpF_memNode *node = new cmpF_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void cmpD_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_DOUBLE_REG_mask();
}

// Build CISC version of this instruction
MachNode *cmpD_regNode::cisc_version(int offset) {
  cmpD_memNode *node = new cmpD_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void convF2D_reg_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_FLOAT_REG_mask();
}

// Build CISC version of this instruction
MachNode *convF2D_reg_regNode::cisc_version(int offset) {
  convF2D_reg_memNode *node = new convF2D_reg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void convD2F_reg_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_DOUBLE_REG_mask();
}

// Build CISC version of this instruction
MachNode *convD2F_reg_regNode::cisc_version(int offset) {
  convD2F_reg_memNode *node = new convD2F_reg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void convL2F_reg_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_LONG_REG_mask();
}

// Build CISC version of this instruction
MachNode *convL2F_reg_regNode::cisc_version(int offset) {
  convL2F_reg_memNode *node = new convL2F_reg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void convL2D_reg_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_LONG_REG_mask();
}

// Build CISC version of this instruction
MachNode *convL2D_reg_regNode::cisc_version(int offset) {
  convL2D_reg_memNode *node = new convL2D_reg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void convI2L_reg_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *convI2L_reg_regNode::cisc_version(int offset) {
  loadI2LNode *node = new loadI2LNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void convI2L_reg_reg_zexNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *convI2L_reg_reg_zexNode::cisc_version(int offset) {
  loadUI2LNode *node = new loadUI2LNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void MoveF2I_reg_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_FLOAT_REG_mask();
}

// Build CISC version of this instruction
MachNode *MoveF2I_reg_regNode::cisc_version(int offset) {
  MoveF2I_stack_regNode *node = new MoveF2I_stack_regNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void MoveD2L_reg_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_DOUBLE_REG_mask();
}

// Build CISC version of this instruction
MachNode *MoveD2L_reg_regNode::cisc_version(int offset) {
  MoveD2L_stack_regNode *node = new MoveD2L_stack_regNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void MoveI2F_reg_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *MoveI2F_reg_regNode::cisc_version(int offset) {
  MoveI2F_stack_regNode *node = new MoveI2F_stack_regNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void compI_rRegNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *compI_rRegNode::cisc_version(int offset) {
  compI_rReg_memNode *node = new compI_rReg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void compU_rRegNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *compU_rRegNode::cisc_version(int offset) {
  compU_rReg_memNode *node = new compU_rReg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void compP_rRegNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_PTR_REG_mask();
}

// Build CISC version of this instruction
MachNode *compP_rRegNode::cisc_version(int offset) {
  compP_rReg_memNode *node = new compP_rReg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void compL_rRegNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_LONG_REG_mask();
}

// Build CISC version of this instruction
MachNode *compL_rRegNode::cisc_version(int offset) {
  compL_rReg_memNode *node = new compL_rReg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void compUL_rRegNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_LONG_REG_mask();
}

// Build CISC version of this instruction
MachNode *compUL_rRegNode::cisc_version(int offset) {
  compUL_rReg_memNode *node = new compUL_rReg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}

// Build short branch version of this instruction
MachNode *jmpDirNode::short_branch_version() {
  jmpDir_shortNode *node = new jmpDir_shortNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  return node;
}

// Build short branch version of this instruction
MachNode *jmpConNode::short_branch_version() {
  jmpCon_shortNode *node = new jmpCon_shortNode();
  node->_prob = _prob;
  node->_fcnt = _fcnt;

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  return node;
}

// Build short branch version of this instruction
MachNode *jmpLoopEndNode::short_branch_version() {
  jmpLoopEnd_shortNode *node = new jmpLoopEnd_shortNode();
  node->_prob = _prob;
  node->_fcnt = _fcnt;

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  return node;
}

// Build short branch version of this instruction
MachNode *jmpLoopEndUNode::short_branch_version() {
  jmpLoopEndU_shortNode *node = new jmpLoopEndU_shortNode();
  node->_prob = _prob;
  node->_fcnt = _fcnt;

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  return node;
}

// Build short branch version of this instruction
MachNode *jmpLoopEndUCFNode::short_branch_version() {
  jmpLoopEndUCF_shortNode *node = new jmpLoopEndUCF_shortNode();
  node->_prob = _prob;
  node->_fcnt = _fcnt;

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  return node;
}

// Build short branch version of this instruction
MachNode *jmpConUNode::short_branch_version() {
  jmpConU_shortNode *node = new jmpConU_shortNode();
  node->_prob = _prob;
  node->_fcnt = _fcnt;

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  return node;
}

// Build short branch version of this instruction
MachNode *jmpConUCFNode::short_branch_version() {
  jmpConUCF_shortNode *node = new jmpConUCF_shortNode();
  node->_prob = _prob;
  node->_fcnt = _fcnt;

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  return node;
}

// Build short branch version of this instruction
MachNode *jmpConUCF2Node::short_branch_version() {
  jmpConUCF2_shortNode *node = new jmpConUCF2_shortNode();
  node->_prob = _prob;
  node->_fcnt = _fcnt;

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  return node;
}


void addF_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_FLOAT_REG_mask();
}

// Build CISC version of this instruction
MachNode *addF_regNode::cisc_version(int offset) {
  addF_memNode *node = new addF_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void addF_reg_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_FLOAT_REG_mask();
}

// Build CISC version of this instruction
MachNode *addF_reg_regNode::cisc_version(int offset) {
  addF_reg_memNode *node = new addF_reg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void addD_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_DOUBLE_REG_mask();
}

// Build CISC version of this instruction
MachNode *addD_regNode::cisc_version(int offset) {
  addD_memNode *node = new addD_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void addD_reg_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_DOUBLE_REG_mask();
}

// Build CISC version of this instruction
MachNode *addD_reg_regNode::cisc_version(int offset) {
  addD_reg_memNode *node = new addD_reg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void subF_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_FLOAT_REG_mask();
}

// Build CISC version of this instruction
MachNode *subF_regNode::cisc_version(int offset) {
  subF_memNode *node = new subF_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void subF_reg_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_FLOAT_REG_mask();
}

// Build CISC version of this instruction
MachNode *subF_reg_regNode::cisc_version(int offset) {
  subF_reg_memNode *node = new subF_reg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void subD_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_DOUBLE_REG_mask();
}

// Build CISC version of this instruction
MachNode *subD_regNode::cisc_version(int offset) {
  subD_memNode *node = new subD_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void subD_reg_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_DOUBLE_REG_mask();
}

// Build CISC version of this instruction
MachNode *subD_reg_regNode::cisc_version(int offset) {
  subD_reg_memNode *node = new subD_reg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void mulF_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_FLOAT_REG_mask();
}

// Build CISC version of this instruction
MachNode *mulF_regNode::cisc_version(int offset) {
  mulF_memNode *node = new mulF_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void mulF_reg_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_FLOAT_REG_mask();
}

// Build CISC version of this instruction
MachNode *mulF_reg_regNode::cisc_version(int offset) {
  mulF_reg_memNode *node = new mulF_reg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void mulD_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_DOUBLE_REG_mask();
}

// Build CISC version of this instruction
MachNode *mulD_regNode::cisc_version(int offset) {
  mulD_memNode *node = new mulD_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void mulD_reg_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_DOUBLE_REG_mask();
}

// Build CISC version of this instruction
MachNode *mulD_reg_regNode::cisc_version(int offset) {
  mulD_reg_memNode *node = new mulD_reg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void divF_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_FLOAT_REG_mask();
}

// Build CISC version of this instruction
MachNode *divF_regNode::cisc_version(int offset) {
  divF_memNode *node = new divF_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void divF_reg_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_FLOAT_REG_mask();
}

// Build CISC version of this instruction
MachNode *divF_reg_regNode::cisc_version(int offset) {
  divF_reg_memNode *node = new divF_reg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void divD_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_DOUBLE_REG_mask();
}

// Build CISC version of this instruction
MachNode *divD_regNode::cisc_version(int offset) {
  divD_memNode *node = new divD_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void divD_reg_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_DOUBLE_REG_mask();
}

// Build CISC version of this instruction
MachNode *divD_reg_regNode::cisc_version(int offset) {
  divD_reg_memNode *node = new divD_reg_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void sqrtF_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_FLOAT_REG_mask();
}

// Build CISC version of this instruction
MachNode *sqrtF_regNode::cisc_version(int offset) {
  sqrtF_memNode *node = new sqrtF_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void sqrtD_regNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_DOUBLE_REG_mask();
}

// Build CISC version of this instruction
MachNode *sqrtD_regNode::cisc_version(int offset) {
  sqrtD_memNode *node = new sqrtD_memNode();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void Repl8INode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *Repl8INode::cisc_version(int offset) {
  Repl8I_memNode *node = new Repl8I_memNode();
  node->_bottom_type = bottom_type();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void Repl4LNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_LONG_REG_mask();
}

// Build CISC version of this instruction
MachNode *Repl4LNode::cisc_version(int offset) {
  Repl4L_memNode *node = new Repl4L_memNode();
  node->_bottom_type = bottom_type();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void Repl8FNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_FLOAT_REG_mask();
}

// Build CISC version of this instruction
MachNode *Repl8FNode::cisc_version(int offset) {
  Repl8F_memNode *node = new Repl8F_memNode();
  node->_bottom_type = bottom_type();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void Repl4DNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_DOUBLE_REG_mask();
}

// Build CISC version of this instruction
MachNode *Repl4DNode::cisc_version(int offset) {
  Repl4D_memNode *node = new Repl4D_memNode();
  node->_bottom_type = bottom_type();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void Repl2INode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *Repl2INode::cisc_version(int offset) {
  Repl2I_memNode *node = new Repl2I_memNode();
  node->_bottom_type = bottom_type();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void Repl4I_evexNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *Repl4I_evexNode::cisc_version(int offset) {
  Repl4I_mem_evexNode *node = new Repl4I_mem_evexNode();
  node->_bottom_type = bottom_type();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void Repl8I_evexNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *Repl8I_evexNode::cisc_version(int offset) {
  Repl8I_mem_evexNode *node = new Repl8I_mem_evexNode();
  node->_bottom_type = bottom_type();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void Repl16I_evexNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_INT_REG_mask();
}

// Build CISC version of this instruction
MachNode *Repl16I_evexNode::cisc_version(int offset) {
  Repl16I_mem_evexNode *node = new Repl16I_mem_evexNode();
  node->_bottom_type = bottom_type();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void Repl4L_evexNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_LONG_REG_mask();
}

// Build CISC version of this instruction
MachNode *Repl4L_evexNode::cisc_version(int offset) {
  Repl4L_mem_evexNode *node = new Repl4L_mem_evexNode();
  node->_bottom_type = bottom_type();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void Repl8L_evexNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_LONG_REG_mask();
}

// Build CISC version of this instruction
MachNode *Repl8L_evexNode::cisc_version(int offset) {
  Repl8L_mem_evexNode *node = new Repl8L_mem_evexNode();
  node->_bottom_type = bottom_type();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void Repl8F_evexNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_FLOAT_REG_mask();
}

// Build CISC version of this instruction
MachNode *Repl8F_evexNode::cisc_version(int offset) {
  Repl8F_mem_evexNode *node = new Repl8F_mem_evexNode();
  node->_bottom_type = bottom_type();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void Repl16F_evexNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_FLOAT_REG_mask();
}

// Build CISC version of this instruction
MachNode *Repl16F_evexNode::cisc_version(int offset) {
  Repl16F_mem_evexNode *node = new Repl16F_mem_evexNode();
  node->_bottom_type = bottom_type();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void Repl4D_evexNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_DOUBLE_REG_mask();
}

// Build CISC version of this instruction
MachNode *Repl4D_evexNode::cisc_version(int offset) {
  Repl4D_mem_evexNode *node = new Repl4D_mem_evexNode();
  node->_bottom_type = bottom_type();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


void Repl8D_evexNode::use_cisc_RegMask() {
  _cisc_RegMask = &STACK_OR_DOUBLE_REG_mask();
}

// Build CISC version of this instruction
MachNode *Repl8D_evexNode::cisc_version(int offset) {
  Repl8D_mem_evexNode *node = new Repl8D_mem_evexNode();
  node->_bottom_type = bottom_type();

  // Copy _idx, inputs and operands to new node
  fill_new_machnode(node);
  // Construct operand to access [stack_pointer + offset]
  node->set_opnd_array(cisc_operand(), new indOffset32Oper(offset));

  return node;
}


// Copy _idx, inputs and operands to new node
void MachNode::fill_new_machnode(MachNode* node) const {
  // New node must use same node index
  node->set_idx( _idx );
  // Copy machine-independent inputs
  for( uint j = 0; j < req(); j++ ) {
    node->add_req(in(j));
  }
  // Copy my operands, except for cisc position
  int nopnds = num_opnds();
  assert( node->num_opnds() == (uint)nopnds, "Must have same number of operands");
  MachOper **to = node->_opnds;
  for( int i = 0; i < nopnds; i++ ) {
    if( i != cisc_operand() ) 
      to[i] = _opnds[i]->clone();
  }
}

void jmpDirNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(1));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void jmpDirNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(1));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void jmpConNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void jmpConNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void jmpLoopEndNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void jmpLoopEndNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void jmpLoopEndUNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void jmpLoopEndUNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void jmpLoopEndUCFNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void jmpLoopEndUCFNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void jmpLoopEnd_and_restoreMaskNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void jmpLoopEnd_and_restoreMaskNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void jmpLoopEndU_and_restoreMaskNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void jmpLoopEndU_and_restoreMaskNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void jmpLoopEndUCF_and_restoreMaskNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void jmpLoopEndUCF_and_restoreMaskNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void jmpConUNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void jmpConUNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void jmpConUCFNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void jmpConUCFNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void jmpConUCF2Node::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void jmpConUCF2Node::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void jmpDir_shortNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(1));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void jmpDir_shortNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(1));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void jmpCon_shortNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void jmpCon_shortNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void jmpLoopEnd_shortNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void jmpLoopEnd_shortNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void jmpLoopEndU_shortNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void jmpLoopEndU_shortNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void jmpLoopEndUCF_shortNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void jmpLoopEndUCF_shortNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void jmpConU_shortNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void jmpConU_shortNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void jmpConUCF_shortNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void jmpConUCF_shortNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void jmpConUCF2_shortNode::label_set( Label* label, uint block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  oper->_label     = label;
  oper->_block_num = block_num;
}
void jmpConUCF2_shortNode::save_label( Label** label, uint* block_num ) {
  labelOper* oper  = (labelOper*)(opnd_array(3));
  *label = oper->_label;
  *block_num = oper->_block_num;
}
void CallStaticJavaDirectNode::method_set( intptr_t method ) {
  ((methodOper*)opnd_array(1))->_method = method;
}

void CallDynamicJavaDirectNode::method_set( intptr_t method ) {
  ((methodOper*)opnd_array(1))->_method = method;
}

void CallRuntimeDirectNode::method_set( intptr_t method ) {
  ((methodOper*)opnd_array(1))->_method = method;
}

void CallLeafDirectNode::method_set( intptr_t method ) {
  ((methodOper*)opnd_array(1))->_method = method;
}

void CallLeafNoFPDirectNode::method_set( intptr_t method ) {
  ((methodOper*)opnd_array(1))->_method = method;
}

int loadBNode::reloc() const {
  return 1;
}

int loadB2LNode::reloc() const {
  return 1;
}

int loadUBNode::reloc() const {
  return 1;
}

int loadUB2LNode::reloc() const {
  return 1;
}

int loadUB2L_immINode::reloc() const {
  return 1;
}

int loadSNode::reloc() const {
  return 1;
}

int loadS2BNode::reloc() const {
  return 1;
}

int loadS2LNode::reloc() const {
  return 1;
}

int loadUSNode::reloc() const {
  return 1;
}

int loadUS2BNode::reloc() const {
  return 1;
}

int loadUS2LNode::reloc() const {
  return 1;
}

int loadUS2L_immI_255Node::reloc() const {
  return 1;
}

int loadUS2L_immINode::reloc() const {
  return 1;
}

int loadINode::reloc() const {
  return 1;
}

int loadI2BNode::reloc() const {
  return 1;
}

int loadI2UBNode::reloc() const {
  return 1;
}

int loadI2SNode::reloc() const {
  return 1;
}

int loadI2USNode::reloc() const {
  return 1;
}

int loadI2LNode::reloc() const {
  return 1;
}

int loadI2L_immI_255Node::reloc() const {
  return 1;
}

int loadI2L_immI_65535Node::reloc() const {
  return 1;
}

int loadI2L_immU31Node::reloc() const {
  return 1;
}

int loadUI2LNode::reloc() const {
  return 1;
}

int loadLNode::reloc() const {
  return 1;
}

int loadRangeNode::reloc() const {
  return 1;
}

int loadPNode::reloc() const {
  return 1;
}

int loadNNode::reloc() const {
  return 1;
}

int loadKlassNode::reloc() const {
  return 1;
}

int loadNKlassNode::reloc() const {
  return 1;
}

int loadFNode::reloc() const {
  return 1;
}

int loadD_partialNode::reloc() const {
  return 1;
}

int loadDNode::reloc() const {
  return 1;
}

int loadConPNode::reloc() const {
  return 1;
}

int loadConP0Node::reloc() const {
  return 1;
}

int loadConP31Node::reloc() const {
  return 1;
}

int loadConFNode::reloc() const {
  return 2;
}

int loadConF0Node::reloc() const {
  return 2;
}

int loadConDNode::reloc() const {
  return 2;
}

int loadConD0Node::reloc() const {
  return 2;
}

int prefetchAllocNode::reloc() const {
  return 1;
}

int prefetchAllocNTANode::reloc() const {
  return 1;
}

int prefetchAllocT0Node::reloc() const {
  return 1;
}

int prefetchAllocT2Node::reloc() const {
  return 1;
}

int storeBNode::reloc() const {
  return 2;
}

int storeCNode::reloc() const {
  return 2;
}

int storeINode::reloc() const {
  return 2;
}

int storeLNode::reloc() const {
  return 2;
}

int storePNode::reloc() const {
  return 2;
}

int storeImmP0Node::reloc() const {
  return 3;
}

int storeImmPNode::reloc() const {
  return 3;
}

int storeNNode::reloc() const {
  return 2;
}

int storeNKlassNode::reloc() const {
  return 2;
}

int storeImmN0Node::reloc() const {
  return 2;
}

int storeImmNNode::reloc() const {
  return 2;
}

int storeImmNKlassNode::reloc() const {
  return 2;
}

int storeImmI0Node::reloc() const {
  return 2;
}

int storeImmINode::reloc() const {
  return 2;
}

int storeImmL0Node::reloc() const {
  return 2;
}

int storeImmLNode::reloc() const {
  return 2;
}

int storeImmC0Node::reloc() const {
  return 2;
}

int storeImmI16Node::reloc() const {
  return 2;
}

int storeImmB0Node::reloc() const {
  return 2;
}

int storeImmBNode::reloc() const {
  return 2;
}

int storeImmCM0_regNode::reloc() const {
  return 2;
}

int storeImmCM0Node::reloc() const {
  return 2;
}

int storeFNode::reloc() const {
  return 2;
}

int storeF0Node::reloc() const {
  return 3;
}

int storeF_immNode::reloc() const {
  return 3;
}

int storeDNode::reloc() const {
  return 2;
}

int storeD0_immNode::reloc() const {
  return 3;
}

int storeD0Node::reloc() const {
  return 3;
}

int popCountI_memNode::reloc() const {
  return 1;
}

int popCountL_memNode::reloc() const {
  return 1;
}

int cmovI_memNode::reloc() const {
  return 1;
}

int cmovI_memUNode::reloc() const {
  return 1;
}

int cmovI_memUCFNode::reloc() const {
  return 1;
}

int cmovL_memNode::reloc() const {
  return 1;
}

int cmovL_memUNode::reloc() const {
  return 1;
}

int cmovL_memUCFNode::reloc() const {
  return 1;
}

int addI_rReg_memNode::reloc() const {
  return 1;
}

int addI_rReg_mem_0Node::reloc() const {
  return 1;
}

int addI_mem_rRegNode::reloc() const {
  return 3;
}

int addI_mem_rReg_0Node::reloc() const {
  return 3;
}

int addI_mem_immNode::reloc() const {
  return 3;
}

int incI_memNode::reloc() const {
  return 3;
}

int decI_memNode::reloc() const {
  return 3;
}

int addL_rReg_memNode::reloc() const {
  return 1;
}

int addL_rReg_mem_0Node::reloc() const {
  return 1;
}

int addL_mem_rRegNode::reloc() const {
  return 3;
}

int addL_mem_rReg_0Node::reloc() const {
  return 3;
}

int addL_mem_immNode::reloc() const {
  return 3;
}

int incL_memNode::reloc() const {
  return 3;
}

int decL_memNode::reloc() const {
  return 3;
}

int loadPLockedNode::reloc() const {
  return 1;
}

int storePConditionalNode::reloc() const {
  return 1;
}

int storeIConditionalNode::reloc() const {
  return 1;
}

int storeLConditionalNode::reloc() const {
  return 1;
}

int compareAndSwapPNode::reloc() const {
  return 1;
}

int compareAndSwapP_0Node::reloc() const {
  return 1;
}

int compareAndSwapLNode::reloc() const {
  return 1;
}

int compareAndSwapL_0Node::reloc() const {
  return 1;
}

int compareAndSwapINode::reloc() const {
  return 1;
}

int compareAndSwapI_0Node::reloc() const {
  return 1;
}

int compareAndSwapBNode::reloc() const {
  return 1;
}

int compareAndSwapB_0Node::reloc() const {
  return 1;
}

int compareAndSwapSNode::reloc() const {
  return 1;
}

int compareAndSwapS_0Node::reloc() const {
  return 1;
}

int compareAndSwapNNode::reloc() const {
  return 1;
}

int compareAndSwapN_0Node::reloc() const {
  return 1;
}

int compareAndExchangeBNode::reloc() const {
  return 1;
}

int compareAndExchangeSNode::reloc() const {
  return 1;
}

int compareAndExchangeINode::reloc() const {
  return 1;
}

int compareAndExchangeLNode::reloc() const {
  return 1;
}

int compareAndExchangeNNode::reloc() const {
  return 1;
}

int compareAndExchangePNode::reloc() const {
  return 1;
}

int xaddB_no_resNode::reloc() const {
  return 1;
}

int xaddBNode::reloc() const {
  return 1;
}

int xaddS_no_resNode::reloc() const {
  return 1;
}

int xaddSNode::reloc() const {
  return 1;
}

int xaddI_no_resNode::reloc() const {
  return 1;
}

int xaddINode::reloc() const {
  return 1;
}

int xaddL_no_resNode::reloc() const {
  return 1;
}

int xaddLNode::reloc() const {
  return 1;
}

int xchgBNode::reloc() const {
  return 1;
}

int xchgSNode::reloc() const {
  return 1;
}

int xchgINode::reloc() const {
  return 1;
}

int xchgLNode::reloc() const {
  return 1;
}

int xchgPNode::reloc() const {
  return 1;
}

int xchgNNode::reloc() const {
  return 1;
}

int subI_rReg_memNode::reloc() const {
  return 1;
}

int subI_mem_rRegNode::reloc() const {
  return 3;
}

int subI_mem_immNode::reloc() const {
  return 3;
}

int subL_rReg_memNode::reloc() const {
  return 1;
}

int subL_mem_rRegNode::reloc() const {
  return 3;
}

int subL_mem_immNode::reloc() const {
  return 3;
}

int negI_memNode::reloc() const {
  return 3;
}

int negL_memNode::reloc() const {
  return 3;
}

int mulI_memNode::reloc() const {
  return 1;
}

int mulI_mem_0Node::reloc() const {
  return 1;
}

int mulI_mem_immNode::reloc() const {
  return 1;
}

int mulL_memNode::reloc() const {
  return 1;
}

int mulL_mem_0Node::reloc() const {
  return 1;
}

int mulL_mem_immNode::reloc() const {
  return 1;
}

int salI_mem_1Node::reloc() const {
  return 3;
}

int salI_mem_immNode::reloc() const {
  return 3;
}

int salI_mem_CLNode::reloc() const {
  return 3;
}

int sarI_mem_1Node::reloc() const {
  return 3;
}

int sarI_mem_immNode::reloc() const {
  return 3;
}

int sarI_mem_CLNode::reloc() const {
  return 3;
}

int shrI_mem_1Node::reloc() const {
  return 3;
}

int shrI_mem_immNode::reloc() const {
  return 3;
}

int shrI_mem_CLNode::reloc() const {
  return 3;
}

int salL_mem_1Node::reloc() const {
  return 3;
}

int salL_mem_immNode::reloc() const {
  return 3;
}

int salL_mem_CLNode::reloc() const {
  return 3;
}

int sarL_mem_1Node::reloc() const {
  return 3;
}

int sarL_mem_immNode::reloc() const {
  return 3;
}

int sarL_mem_CLNode::reloc() const {
  return 3;
}

int shrL_mem_1Node::reloc() const {
  return 3;
}

int shrL_mem_immNode::reloc() const {
  return 3;
}

int shrL_mem_CLNode::reloc() const {
  return 3;
}

int andI_rReg_memNode::reloc() const {
  return 1;
}

int andI_rReg_mem_0Node::reloc() const {
  return 1;
}

int andI_mem_rRegNode::reloc() const {
  return 3;
}

int andI_mem_rReg_0Node::reloc() const {
  return 3;
}

int andI_mem_immNode::reloc() const {
  return 3;
}

int andnI_rReg_rReg_memNode::reloc() const {
  return 1;
}

int andnI_rReg_rReg_mem_0Node::reloc() const {
  return 1;
}

int blsiI_rReg_memNode::reloc() const {
  return 2;
}

int blsiI_rReg_mem_0Node::reloc() const {
  return 2;
}

int blsmskI_rReg_memNode::reloc() const {
  return 2;
}

int blsmskI_rReg_mem_0Node::reloc() const {
  return 2;
}

int blsrI_rReg_memNode::reloc() const {
  return 2;
}

int blsrI_rReg_mem_0Node::reloc() const {
  return 2;
}

int orI_rReg_memNode::reloc() const {
  return 1;
}

int orI_rReg_mem_0Node::reloc() const {
  return 1;
}

int orI_mem_rRegNode::reloc() const {
  return 3;
}

int orI_mem_rReg_0Node::reloc() const {
  return 3;
}

int orI_mem_immNode::reloc() const {
  return 3;
}

int xorI_rReg_memNode::reloc() const {
  return 1;
}

int xorI_rReg_mem_0Node::reloc() const {
  return 1;
}

int xorI_mem_rRegNode::reloc() const {
  return 3;
}

int xorI_mem_rReg_0Node::reloc() const {
  return 3;
}

int xorI_mem_immNode::reloc() const {
  return 3;
}

int andL_rReg_memNode::reloc() const {
  return 1;
}

int andL_rReg_mem_0Node::reloc() const {
  return 1;
}

int andL_mem_rRegNode::reloc() const {
  return 3;
}

int andL_mem_rReg_0Node::reloc() const {
  return 3;
}

int andL_mem_immNode::reloc() const {
  return 3;
}

int andnL_rReg_rReg_memNode::reloc() const {
  return 1;
}

int andnL_rReg_rReg_mem_0Node::reloc() const {
  return 1;
}

int blsiL_rReg_memNode::reloc() const {
  return 2;
}

int blsiL_rReg_mem_0Node::reloc() const {
  return 2;
}

int blsmskL_rReg_memNode::reloc() const {
  return 2;
}

int blsmskL_rReg_mem_0Node::reloc() const {
  return 2;
}

int blsrL_rReg_memNode::reloc() const {
  return 2;
}

int blsrL_rReg_mem_0Node::reloc() const {
  return 2;
}

int orL_rReg_memNode::reloc() const {
  return 1;
}

int orL_rReg_mem_0Node::reloc() const {
  return 1;
}

int orL_mem_rRegNode::reloc() const {
  return 3;
}

int orL_mem_rReg_0Node::reloc() const {
  return 3;
}

int orL_mem_immNode::reloc() const {
  return 3;
}

int xorL_rReg_memNode::reloc() const {
  return 1;
}

int xorL_rReg_mem_0Node::reloc() const {
  return 1;
}

int xorL_mem_rRegNode::reloc() const {
  return 3;
}

int xorL_mem_rReg_0Node::reloc() const {
  return 3;
}

int xorL_mem_immNode::reloc() const {
  return 3;
}

int cmpF_cc_memNode::reloc() const {
  return 1;
}

int cmpF_cc_memCFNode::reloc() const {
  return 1;
}

int cmpF_cc_immNode::reloc() const {
  return 1;
}

int cmpF_cc_immCFNode::reloc() const {
  return 1;
}

int cmpD_cc_memNode::reloc() const {
  return 1;
}

int cmpD_cc_memCFNode::reloc() const {
  return 1;
}

int cmpD_cc_immNode::reloc() const {
  return 1;
}

int cmpD_cc_immCFNode::reloc() const {
  return 1;
}

int cmpF_memNode::reloc() const {
  return 1;
}

int cmpF_immNode::reloc() const {
  return 1;
}

int cmpD_memNode::reloc() const {
  return 1;
}

int cmpD_immNode::reloc() const {
  return 1;
}

int convF2D_reg_memNode::reloc() const {
  return 1;
}

int convD2F_reg_memNode::reloc() const {
  return 1;
}

int convI2F_reg_memNode::reloc() const {
  return 1;
}

int convI2D_reg_memNode::reloc() const {
  return 1;
}

int convL2F_reg_memNode::reloc() const {
  return 1;
}

int convL2D_reg_memNode::reloc() const {
  return 1;
}

int convI2L_reg_mem_zexNode::reloc() const {
  return 1;
}

int compI_rReg_memNode::reloc() const {
  return 1;
}

int testI_reg_memNode::reloc() const {
  return 1;
}

int testI_reg_mem_0Node::reloc() const {
  return 1;
}

int compU_rReg_memNode::reloc() const {
  return 1;
}

int compP_rReg_memNode::reloc() const {
  return 1;
}

int compP_mem_rRegNode::reloc() const {
  return 1;
}

int testP_regNode::reloc() const {
  return 1;
}

int testP_memNode::reloc() const {
  return 2;
}

int testP_mem_reg0Node::reloc() const {
  return 2;
}

int compN_rReg_memNode::reloc() const {
  return 1;
}

int compN_mem_immNode::reloc() const {
  return 1;
}

int compN_mem_imm_klassNode::reloc() const {
  return 1;
}

int testN_memNode::reloc() const {
  return 1;
}

int testN_mem_reg0Node::reloc() const {
  return 1;
}

int compL_rReg_memNode::reloc() const {
  return 1;
}

int testL_reg_memNode::reloc() const {
  return 1;
}

int testL_reg_mem_0Node::reloc() const {
  return 1;
}

int compUL_rReg_memNode::reloc() const {
  return 1;
}

int partialSubtypeCheck_vs_ZeroNode::reloc() const {
  return 1;
}

int safePoint_pollNode::reloc() const {
  return 1;
}

int safePoint_poll_farNode::reloc() const {
  return 1;
}

int CallStaticJavaDirectNode::reloc() const {
  return 1;
}

int CallDynamicJavaDirectNode::reloc() const {
  return 1;
}

int CallRuntimeDirectNode::reloc() const {
  return 1;
}

int CallLeafDirectNode::reloc() const {
  return 1;
}

int CallLeafNoFPDirectNode::reloc() const {
  return 1;
}

int RetNode::reloc() const {
  return 1;
}

int TailCalljmpIndNode::reloc() const {
  return 1;
}

int tailjmpIndNode::reloc() const {
  return 1;
}

int RethrowExceptionNode::reloc() const {
  return 1;
}

int addF_memNode::reloc() const {
  return 1;
}

int addF_mem_0Node::reloc() const {
  return 1;
}

int addF_immNode::reloc() const {
  return 1;
}

int addF_reg_memNode::reloc() const {
  return 1;
}

int addF_reg_mem_0Node::reloc() const {
  return 1;
}

int addF_reg_immNode::reloc() const {
  return 1;
}

int addD_memNode::reloc() const {
  return 1;
}

int addD_mem_0Node::reloc() const {
  return 1;
}

int addD_immNode::reloc() const {
  return 1;
}

int addD_reg_memNode::reloc() const {
  return 1;
}

int addD_reg_mem_0Node::reloc() const {
  return 1;
}

int addD_reg_immNode::reloc() const {
  return 1;
}

int subF_memNode::reloc() const {
  return 1;
}

int subF_immNode::reloc() const {
  return 1;
}

int subF_reg_memNode::reloc() const {
  return 1;
}

int subF_reg_immNode::reloc() const {
  return 1;
}

int subD_memNode::reloc() const {
  return 1;
}

int subD_immNode::reloc() const {
  return 1;
}

int subD_reg_memNode::reloc() const {
  return 1;
}

int subD_reg_immNode::reloc() const {
  return 1;
}

int mulF_memNode::reloc() const {
  return 1;
}

int mulF_mem_0Node::reloc() const {
  return 1;
}

int mulF_immNode::reloc() const {
  return 1;
}

int mulF_reg_memNode::reloc() const {
  return 1;
}

int mulF_reg_mem_0Node::reloc() const {
  return 1;
}

int mulF_reg_immNode::reloc() const {
  return 1;
}

int mulD_memNode::reloc() const {
  return 1;
}

int mulD_mem_0Node::reloc() const {
  return 1;
}

int mulD_immNode::reloc() const {
  return 1;
}

int mulD_reg_memNode::reloc() const {
  return 1;
}

int mulD_reg_mem_0Node::reloc() const {
  return 1;
}

int mulD_reg_immNode::reloc() const {
  return 1;
}

int divF_memNode::reloc() const {
  return 1;
}

int divF_immNode::reloc() const {
  return 1;
}

int divF_reg_memNode::reloc() const {
  return 1;
}

int divF_reg_immNode::reloc() const {
  return 1;
}

int divD_memNode::reloc() const {
  return 1;
}

int divD_immNode::reloc() const {
  return 1;
}

int divD_reg_memNode::reloc() const {
  return 1;
}

int divD_reg_immNode::reloc() const {
  return 1;
}

int sqrtF_memNode::reloc() const {
  return 1;
}

int sqrtF_immNode::reloc() const {
  return 1;
}

int sqrtD_memNode::reloc() const {
  return 1;
}

int sqrtD_immNode::reloc() const {
  return 1;
}

int loadV4Node::reloc() const {
  return 1;
}

int loadV8Node::reloc() const {
  return 1;
}

int loadV16Node::reloc() const {
  return 1;
}

int loadV32Node::reloc() const {
  return 1;
}

int loadV64_dwordNode::reloc() const {
  return 1;
}

int loadV64_qwordNode::reloc() const {
  return 1;
}

int storeV4Node::reloc() const {
  return 2;
}

int storeV8Node::reloc() const {
  return 2;
}

int storeV16Node::reloc() const {
  return 2;
}

int storeV32Node::reloc() const {
  return 2;
}

int storeV64_dwordNode::reloc() const {
  return 2;
}

int storeV64_qwordNode::reloc() const {
  return 2;
}

int Repl4B_memNode::reloc() const {
  return 1;
}

int Repl8B_memNode::reloc() const {
  return 1;
}

int Repl16B_memNode::reloc() const {
  return 1;
}

int Repl32B_memNode::reloc() const {
  return 1;
}

int Repl4S_memNode::reloc() const {
  return 1;
}

int Repl8S_memNode::reloc() const {
  return 1;
}

int Repl16S_memNode::reloc() const {
  return 1;
}

int Repl4I_memNode::reloc() const {
  return 1;
}

int Repl8I_memNode::reloc() const {
  return 1;
}

int Repl2L_memNode::reloc() const {
  return 1;
}

int Repl4L_memNode::reloc() const {
  return 1;
}

int Repl2F_memNode::reloc() const {
  return 1;
}

int Repl4F_memNode::reloc() const {
  return 1;
}

int Repl8F_memNode::reloc() const {
  return 1;
}

int Repl2F_zeroNode::reloc() const {
  return 1;
}

int Repl4F_zeroNode::reloc() const {
  return 1;
}

int Repl8F_zeroNode::reloc() const {
  return 1;
}

int Repl2D_memNode::reloc() const {
  return 1;
}

int Repl4D_memNode::reloc() const {
  return 1;
}

int Repl2D_zeroNode::reloc() const {
  return 1;
}

int Repl4D_zeroNode::reloc() const {
  return 1;
}

int Repl2I_memNode::reloc() const {
  return 1;
}

int Repl4B_mem_evexNode::reloc() const {
  return 1;
}

int Repl8B_mem_evexNode::reloc() const {
  return 1;
}

int Repl16B_mem_evexNode::reloc() const {
  return 1;
}

int Repl32B_mem_evexNode::reloc() const {
  return 1;
}

int Repl64B_mem_evexNode::reloc() const {
  return 1;
}

int Repl4S_mem_evexNode::reloc() const {
  return 1;
}

int Repl8S_mem_evexNode::reloc() const {
  return 1;
}

int Repl16S_mem_evexNode::reloc() const {
  return 1;
}

int Repl32S_mem_evexNode::reloc() const {
  return 1;
}

int Repl4I_mem_evexNode::reloc() const {
  return 1;
}

int Repl8I_mem_evexNode::reloc() const {
  return 1;
}

int Repl16I_mem_evexNode::reloc() const {
  return 1;
}

int Repl2L_mem_evexNode::reloc() const {
  return 1;
}

int Repl4L_mem_evexNode::reloc() const {
  return 1;
}

int Repl8L_mem_evexNode::reloc() const {
  return 1;
}

int Repl8F_mem_evexNode::reloc() const {
  return 1;
}

int Repl16F_mem_evexNode::reloc() const {
  return 1;
}

int Repl2F_zero_evexNode::reloc() const {
  return 1;
}

int Repl4F_zero_evexNode::reloc() const {
  return 1;
}

int Repl8F_zero_evexNode::reloc() const {
  return 1;
}

int Repl16F_zero_evexNode::reloc() const {
  return 1;
}

int Repl4D_mem_evexNode::reloc() const {
  return 1;
}

int Repl8D_mem_evexNode::reloc() const {
  return 1;
}

int Repl2D_zero_evexNode::reloc() const {
  return 1;
}

int Repl4D_zero_evexNode::reloc() const {
  return 1;
}

int Repl8D_zero_evexNode::reloc() const {
  return 1;
}

int vadd4B_mem_avxNode::reloc() const {
  return 1;
}

int vadd4B_mem_evexNode::reloc() const {
  return 1;
}

int vadd4B_mem_evex_specialNode::reloc() const {
  return 1;
}

int vadd8B_mem_avxNode::reloc() const {
  return 1;
}

int vadd8B_mem_evexNode::reloc() const {
  return 1;
}

int vadd8B_mem_evex_specialNode::reloc() const {
  return 1;
}

int vadd16B_mem_avxNode::reloc() const {
  return 1;
}

int vadd16B_mem_evexNode::reloc() const {
  return 1;
}

int vadd16B_mem_evex_specialNode::reloc() const {
  return 1;
}

int vadd32B_mem_avxNode::reloc() const {
  return 1;
}

int vadd32B_mem_evexNode::reloc() const {
  return 1;
}

int vadd32B_mem_evex_specialNode::reloc() const {
  return 1;
}

int vadd64B_memNode::reloc() const {
  return 1;
}

int vadd2S_mem_avxNode::reloc() const {
  return 1;
}

int vadd2S_mem_evexNode::reloc() const {
  return 1;
}

int vadd2S_mem_evex_specialNode::reloc() const {
  return 1;
}

int vadd4S_mem_avxNode::reloc() const {
  return 1;
}

int vadd4S_mem_evexNode::reloc() const {
  return 1;
}

int vadd4S_mem_evex_specialNode::reloc() const {
  return 1;
}

int vadd8S_mem_avxNode::reloc() const {
  return 1;
}

int vadd8S_mem_evexNode::reloc() const {
  return 1;
}

int vadd8S_mem_evex_specialNode::reloc() const {
  return 1;
}

int vadd16S_mem_avxNode::reloc() const {
  return 1;
}

int vadd16S_mem_evexNode::reloc() const {
  return 1;
}

int vadd16S_mem_evex_specialNode::reloc() const {
  return 1;
}

int vadd32S_memNode::reloc() const {
  return 1;
}

int vadd2I_memNode::reloc() const {
  return 1;
}

int vadd4I_memNode::reloc() const {
  return 1;
}

int vadd8I_memNode::reloc() const {
  return 1;
}

int vadd16I_memNode::reloc() const {
  return 1;
}

int vadd2L_memNode::reloc() const {
  return 1;
}

int vadd4L_memNode::reloc() const {
  return 1;
}

int vadd8L_memNode::reloc() const {
  return 1;
}

int vadd2F_memNode::reloc() const {
  return 1;
}

int vadd4F_memNode::reloc() const {
  return 1;
}

int vadd8F_memNode::reloc() const {
  return 1;
}

int vadd16F_memNode::reloc() const {
  return 1;
}

int vadd2D_memNode::reloc() const {
  return 1;
}

int vadd4D_memNode::reloc() const {
  return 1;
}

int vadd8D_memNode::reloc() const {
  return 1;
}

int vsub4B_mem_avxNode::reloc() const {
  return 1;
}

int vsub4B_mem_evexNode::reloc() const {
  return 1;
}

int vsub4B_mem_evex_specialNode::reloc() const {
  return 1;
}

int vsub8B_mem_avxNode::reloc() const {
  return 1;
}

int vsub8B_mem_evexNode::reloc() const {
  return 1;
}

int vsub8B_mem_evex_specialNode::reloc() const {
  return 1;
}

int vsub16B_mem_avxNode::reloc() const {
  return 1;
}

int vsub16B_mem_evexNode::reloc() const {
  return 1;
}

int vsub16B_mem_evex_specialNode::reloc() const {
  return 1;
}

int vsub32B_mem_avxNode::reloc() const {
  return 1;
}

int vsub32B_mem_evexNode::reloc() const {
  return 1;
}

int vsub32B_mem_evex_specialNode::reloc() const {
  return 1;
}

int vsub64B_memNode::reloc() const {
  return 1;
}

int vsub2S_mem_avxNode::reloc() const {
  return 1;
}

int vsub2S_mem_evexNode::reloc() const {
  return 1;
}

int vsub2S_mem_evex_specialNode::reloc() const {
  return 1;
}

int vsub4S_mem_avxNode::reloc() const {
  return 1;
}

int vsub4S_mem_evexNode::reloc() const {
  return 1;
}

int vsub4S_mem_evex_specialNode::reloc() const {
  return 1;
}

int vsub8S_mem_avxNode::reloc() const {
  return 1;
}

int vsub8S_mem_evexNode::reloc() const {
  return 1;
}

int vsub8S_mem_evex_specialNode::reloc() const {
  return 1;
}

int vsub16S_mem_avxNode::reloc() const {
  return 1;
}

int vsub16S_mem_evexNode::reloc() const {
  return 1;
}

int vsub16S_mem_evex_specialNode::reloc() const {
  return 1;
}

int vsub32S_memNode::reloc() const {
  return 1;
}

int vsub2I_memNode::reloc() const {
  return 1;
}

int vsub4I_memNode::reloc() const {
  return 1;
}

int vsub8I_memNode::reloc() const {
  return 1;
}

int vsub16I_memNode::reloc() const {
  return 1;
}

int vsub2L_memNode::reloc() const {
  return 1;
}

int vsub4L_memNode::reloc() const {
  return 1;
}

int vsub8L_memNode::reloc() const {
  return 1;
}

int vsub2F_memNode::reloc() const {
  return 1;
}

int vsub4F_memNode::reloc() const {
  return 1;
}

int vsub8F_memNode::reloc() const {
  return 1;
}

int vsub16F_memNode::reloc() const {
  return 1;
}

int vsub2D_memNode::reloc() const {
  return 1;
}

int vsub4D_memNode::reloc() const {
  return 1;
}

int vsub8D_memNode::reloc() const {
  return 1;
}

int vmul2S_mem_avxNode::reloc() const {
  return 1;
}

int vmul2S_mem_evexNode::reloc() const {
  return 1;
}

int vmul2S_mem_evex_specialNode::reloc() const {
  return 1;
}

int vmul4S_mem_avxNode::reloc() const {
  return 1;
}

int vmul4S_mem_evexNode::reloc() const {
  return 1;
}

int vmul4S_mem_evex_specialNode::reloc() const {
  return 1;
}

int vmul8S_mem_avxNode::reloc() const {
  return 1;
}

int vmul8S_mem_evexNode::reloc() const {
  return 1;
}

int vmul8S_mem_evex_specialNode::reloc() const {
  return 1;
}

int vmul16S_mem_avxNode::reloc() const {
  return 1;
}

int vmul16S_mem_evexNode::reloc() const {
  return 1;
}

int vmul16S_mem_evex_specialNode::reloc() const {
  return 1;
}

int vmul32S_memNode::reloc() const {
  return 1;
}

int vmul2I_memNode::reloc() const {
  return 1;
}

int vmul4I_memNode::reloc() const {
  return 1;
}

int vmul2L_memNode::reloc() const {
  return 1;
}

int vmul4L_memNode::reloc() const {
  return 1;
}

int vmul8L_memNode::reloc() const {
  return 1;
}

int vmul8I_memNode::reloc() const {
  return 1;
}

int vmul16I_memNode::reloc() const {
  return 1;
}

int vmul2F_memNode::reloc() const {
  return 1;
}

int vmul4F_memNode::reloc() const {
  return 1;
}

int vmul8F_memNode::reloc() const {
  return 1;
}

int vmul16F_memNode::reloc() const {
  return 1;
}

int vmul2D_memNode::reloc() const {
  return 1;
}

int vmul4D_memNode::reloc() const {
  return 1;
}

int vmul8D_memNode::reloc() const {
  return 1;
}

int vdiv2F_memNode::reloc() const {
  return 1;
}

int vdiv4F_memNode::reloc() const {
  return 1;
}

int vdiv8F_memNode::reloc() const {
  return 1;
}

int vdiv16F_memNode::reloc() const {
  return 1;
}

int vdiv2D_memNode::reloc() const {
  return 1;
}

int vdiv4D_memNode::reloc() const {
  return 1;
}

int vdiv8D_memNode::reloc() const {
  return 1;
}

int vsqrt2D_memNode::reloc() const {
  return 1;
}

int vsqrt4D_memNode::reloc() const {
  return 1;
}

int vsqrt8D_memNode::reloc() const {
  return 1;
}

int vand4B_memNode::reloc() const {
  return 1;
}

int vand8B_memNode::reloc() const {
  return 1;
}

int vand16B_memNode::reloc() const {
  return 1;
}

int vand32B_memNode::reloc() const {
  return 1;
}

int vand64B_memNode::reloc() const {
  return 1;
}

int vor4B_memNode::reloc() const {
  return 1;
}

int vor8B_memNode::reloc() const {
  return 1;
}

int vor16B_memNode::reloc() const {
  return 1;
}

int vor32B_memNode::reloc() const {
  return 1;
}

int vor64B_memNode::reloc() const {
  return 1;
}

int vxor4B_memNode::reloc() const {
  return 1;
}

int vxor8B_memNode::reloc() const {
  return 1;
}

int vxor16B_memNode::reloc() const {
  return 1;
}

int vxor32B_memNode::reloc() const {
  return 1;
}

int vxor64B_memNode::reloc() const {
  return 1;
}


void loadBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 4732 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movsbl(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadB2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 4747 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movsbq(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadUBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 4762 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movzbl(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadUB2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 4777 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movzbq(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadUB2L_immINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  {
    MacroAssembler _masm(&cbuf);

#line 4791 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Register Rdst = opnd_array(0)->as_Register(ra_,this)/* dst */;
    __ movzbq(Rdst, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
    __ andl(Rdst, opnd_array(2)->constant()& right_n_bits(8));
  
#line 999999
  }
}

void loadSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 4807 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movswl(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadS2BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// twentyfour
  {
    MacroAssembler _masm(&cbuf);

#line 4820 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movsbl(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadS2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 4834 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movswq(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadUSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 4849 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movzwl(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadUS2BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// twentyfour
  {
    MacroAssembler _masm(&cbuf);

#line 4862 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movsbl(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadUS2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 4876 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movzwq(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadUS2L_immI_255Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  {
    MacroAssembler _masm(&cbuf);

#line 4888 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movzbq(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadUS2L_immINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  {
    MacroAssembler _masm(&cbuf);

#line 4901 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Register Rdst = opnd_array(0)->as_Register(ra_,this)/* dst */;
    __ movzwq(Rdst, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
    __ andl(Rdst, opnd_array(2)->constant()& right_n_bits(16));
  
#line 999999
  }
}

void loadINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 4917 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movl(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadI2BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// twentyfour
  {
    MacroAssembler _masm(&cbuf);

#line 4930 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movsbl(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadI2UBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  {
    MacroAssembler _masm(&cbuf);

#line 4942 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movzbl(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadI2SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// sixteen
  {
    MacroAssembler _masm(&cbuf);

#line 4954 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movswl(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadI2USNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  {
    MacroAssembler _masm(&cbuf);

#line 4966 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movzwl(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadI2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 4980 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movslq(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadI2L_immI_255Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  {
    MacroAssembler _masm(&cbuf);

#line 4992 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movzbq(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadI2L_immI_65535Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  {
    MacroAssembler _masm(&cbuf);

#line 5003 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movzwq(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadI2L_immU31Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  {
    MacroAssembler _masm(&cbuf);

#line 5016 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Register Rdst = opnd_array(0)->as_Register(ra_,this)/* dst */;
    __ movl(Rdst, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
    __ andl(Rdst, opnd_array(2)->constant());
  
#line 999999
  }
}

void loadUI2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  {
    MacroAssembler _masm(&cbuf);

#line 5032 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movl(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 5047 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movq(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadRangeNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8B /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(0)->reg(ra_,this)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void loadPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8B /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(0)->reg(ra_,this)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void loadNNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 5085 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

     __ movl(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
   
#line 999999
  }
}

void loadKlassNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8B /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(0)->reg(ra_,this)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void loadNKlassNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 5111 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movl(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 5124 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movflt(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadD_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 5138 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movdbl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 5151 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movdbl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void leaP8Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8D /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(0)->reg(ra_,this)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void leaP32Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8D /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(0)->reg(ra_,this)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void leaPIdxOffNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8D /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(0)->reg(ra_,this)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void leaPIdxScaleNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8D /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(0)->reg(ra_,this)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void leaPPosIdxScaleNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8D /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(0)->reg(ra_,this)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void leaPIdxScaleOffNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8D /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(0)->reg(ra_,this)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void leaPPosIdxOffNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8D /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(0)->reg(ra_,this)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void leaPPosIdxScaleOffNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8D /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(0)->reg(ra_,this)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void leaPCompressedOopOffsetNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8D /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(0)->reg(ra_,this)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void leaP8NarrowNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8D /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(0)->reg(ra_,this)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void leaP32NarrowNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8D /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(0)->reg(ra_,this)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void leaPIdxOffNarrowNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8D /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(0)->reg(ra_,this)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void leaPIdxScaleNarrowNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8D /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(0)->reg(ra_,this)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void leaPIdxScaleOffNarrowNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8D /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(0)->reg(ra_,this)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void leaPPosIdxOffNarrowNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8D /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(0)->reg(ra_,this)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void leaPPosIdxScaleOffNarrowNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8D /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(0)->reg(ra_,this)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void loadConINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {

#line 2210 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int dstenc = opnd_array(0)->reg(ra_,this)/* dst */;
    if (dstenc >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
      dstenc -= 8;
    }
    emit_opcode(cbuf, 0xB8 | dstenc);
    emit_d32(cbuf, opnd_array(1)->constant());
  
#line 999999
  }
}

void loadConI0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(0)->reg(ra_,this)/* dst */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x33 /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(0)->reg(ra_,this)/* dst */ & 7, opnd_array(0)->reg(ra_,this)/* dst */ & 7);
  
#line 999999
  }
}

void loadConLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {

#line 2221 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int dstenc = opnd_array(0)->reg(ra_,this)/* dst */;
    if (dstenc < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
      dstenc -= 8;
    }
    emit_opcode(cbuf, 0xB8 | dstenc);
    emit_d64(cbuf, opnd_array(1)->constantL());
  
#line 999999
  }
}

void loadConL0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(0)->reg(ra_,this)/* dst */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x33 /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(0)->reg(ra_,this)/* dst */ & 7, opnd_array(0)->reg(ra_,this)/* dst */ & 7);
  
#line 999999
  }
}

void loadConUL32Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {

#line 2234 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // same as load_immI, but this time we care about zeroes in the high word
    int dstenc = opnd_array(0)->reg(ra_,this)/* dst */;
    if (dstenc >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
      dstenc -= 8;
    }
    emit_opcode(cbuf, 0xB8 | dstenc);
    emit_d32(cbuf, opnd_array(1)->constantL());
  
#line 999999
  }
}

void loadConL32Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {

#line 2246 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int dstenc = opnd_array(0)->reg(ra_,this)/* dst */;
    if (dstenc < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
      dstenc -= 8;
    }
    emit_opcode(cbuf, 0xC7);
    emit_rm(cbuf, 0x03, 0x00, dstenc);
    emit_d32(cbuf, opnd_array(1)->constantL());
  
#line 999999
  }
}

void loadConPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {

#line 2272 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int dstenc = opnd_array(0)->reg(ra_,this)/* dst */;
    if (dstenc < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
      dstenc -= 8;
    }
    emit_opcode(cbuf, 0xB8 | dstenc);
    // This next line should be generated from ADLC
    if (opnd_array(1)->constant_reloc() != relocInfo::none) {
      emit_d64_reloc(cbuf, opnd_array(1)->constant(), opnd_array(1)->constant_reloc(), RELOC_IMM64);
    } else {
      emit_d64(cbuf, opnd_array(1)->constant());
    }
  
#line 999999
  }
}

void loadConP0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(0)->reg(ra_,this)/* dst */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x33 /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(0)->reg(ra_,this)/* dst */ & 7, opnd_array(0)->reg(ra_,this)/* dst */ & 7);
  
#line 999999
  }
}

void loadConP31Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {

#line 2260 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // same as load_immI, but this time we care about zeroes in the high word
    int dstenc = opnd_array(0)->reg(ra_,this)/* dst */;
    if (dstenc >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
      dstenc -= 8;
    }
    emit_opcode(cbuf, 0xB8 | dstenc);
    
if ( opnd_array(1)->constant_reloc() != relocInfo::none ) {
  emit_d32_reloc(cbuf, opnd_array(1)->constant(), opnd_array(1)->constant_reloc(), 0);
} else {
  emit_d32(cbuf, opnd_array(1)->constant());
};
  
#line 999999
  }
}

void loadConFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 5452 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movflt(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void loadConFNode::eval_constant(Compile* C) {
  {

#line 5453 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"
    _constant = C->constant_table().add(this, opnd_array(1));
#line 999999
  }
}
void loadConN0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5462 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ xorq(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(0)->as_Register(ra_,this)/* dst */);
  
#line 999999
  }
}

void loadConNNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5473 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    address con = (address)opnd_array(1)->constant();
    if (con == NULL) {
      ShouldNotReachHere();
    } else {
      __ set_narrow_oop(opnd_array(0)->as_Register(ra_,this)/* dst */, (jobject)opnd_array(1)->constant());
    }
  
#line 999999
  }
}

void loadConNKlassNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5489 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    address con = (address)opnd_array(1)->constant();
    if (con == NULL) {
      ShouldNotReachHere();
    } else {
      __ set_narrow_klass(opnd_array(0)->as_Register(ra_,this)/* dst */, (Klass*)opnd_array(1)->constant());
    }
  
#line 999999
  }
}

void loadConF0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5506 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ xorps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void loadConDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 5517 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movdbl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void loadConDNode::eval_constant(Compile* C) {
  {

#line 5518 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"
    _constant = C->constant_table().add(this, opnd_array(1));
#line 999999
  }
}
void loadConD0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5529 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ xorpd (opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void loadSSINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8B /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(0)->reg(ra_,this)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void loadSSLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8B /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(0)->reg(ra_,this)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void loadSSPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8B /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(0)->reg(ra_,this)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void loadSSFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5574 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movflt(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address(rsp, opnd_array(1)->disp(ra_,this,idx1)));
  
#line 999999
  }
}

void loadSSDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5587 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movdbl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address(rsp, opnd_array(1)->disp(ra_,this,idx1)));
  
#line 999999
  }
}

void prefetchAllocNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 5602 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ prefetchw(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void prefetchAllocNTANode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 5614 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ prefetchnta(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void prefetchAllocT0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 5626 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ prefetcht0(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void prefetchAllocT2Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 5638 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ prefetcht2(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void storeBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2386 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        } else if (opnd_array(2)->reg(ra_,this,idx2)/* src */ >= 4) {
          emit_opcode(cbuf, Assembler::REX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x88 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* src */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void storeCNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 1828 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, 0x66);
  
#line 999999
  }
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x89 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* src */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void storeINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x89 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* src */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void storeLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x89 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* src */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void storePNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x89 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* src */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void storeImmP0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 5713 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movq(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), r12);
  
#line 999999
  }
}

void storeImmPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2344 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_WB);
      } else {
        emit_opcode(cbuf, Assembler::REX_WXB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WX);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xC7 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x00);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
  {

#line 2290 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Output immediate
    
if ( opnd_array(2)->constant_reloc() != relocInfo::none ) {
  emit_d32_reloc(cbuf, opnd_array(2)->constant(), opnd_array(2)->constant_reloc(), 0);
} else {
  emit_d32(cbuf, opnd_array(2)->constant());
};
  
#line 999999
  }
}

void storeNNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5738 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movl(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), opnd_array(2)->as_Register(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void storeNKlassNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5750 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movl(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), opnd_array(2)->as_Register(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void storeImmN0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 5763 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movl(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), r12);
  
#line 999999
  }
}

void storeImmNNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5775 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    address con = (address)opnd_array(2)->constant();
    if (con == NULL) {
      __ movl(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), (int32_t)0);
    } else {
      __ set_narrow_oop(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), (jobject)opnd_array(2)->constant());
    }
  
#line 999999
  }
}

void storeImmNKlassNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5792 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ set_narrow_klass(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), (Klass*)opnd_array(2)->constant());
  
#line 999999
  }
}

void storeImmI0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 5806 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movl(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), r12);
  
#line 999999
  }
}

void storeImmINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2329 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      } else {
        emit_opcode(cbuf, Assembler::REX_XB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
        emit_opcode(cbuf, Assembler::REX_X);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xC7 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x00);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
  {

#line 2290 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Output immediate
    emit_d32(cbuf, opnd_array(2)->constant());
  
#line 999999
  }
}

void storeImmL0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 5831 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movq(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), r12);
  
#line 999999
  }
}

void storeImmLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2344 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_WB);
      } else {
        emit_opcode(cbuf, Assembler::REX_WXB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WX);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xC7 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x00);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
  {

#line 2290 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Output immediate
    emit_d32(cbuf, opnd_array(2)->constantL());
  
#line 999999
  }
}

void storeImmC0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 5856 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movw(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), r12);
  
#line 999999
  }
}

void storeImmI16Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 1828 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, 0x66);
  
#line 999999
  }
  {

#line 2329 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      } else {
        emit_opcode(cbuf, Assembler::REX_XB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
        emit_opcode(cbuf, Assembler::REX_X);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xC7 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x00);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
  {

#line 2304 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Output immediate
    emit_d16(cbuf, opnd_array(2)->constant());
  
#line 999999
  }
}

void storeImmB0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 5882 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movb(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), r12);
  
#line 999999
  }
}

void storeImmBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2329 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      } else {
        emit_opcode(cbuf, Assembler::REX_XB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
        emit_opcode(cbuf, Assembler::REX_X);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xC6 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x00);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constant());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constant());
    }
  
#line 999999
  }
}

void storeImmCM0_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 5907 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movb(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), r12);
  
#line 999999
  }
}

void storeImmCM0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2329 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      } else {
        emit_opcode(cbuf, Assembler::REX_XB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
        emit_opcode(cbuf, Assembler::REX_X);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xC6 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x00);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constant());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constant());
    }
  
#line 999999
  }
}

void storeFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5931 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movflt(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void storeF0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 5945 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movl(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), r12);
  
#line 999999
  }
}

void storeF_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2329 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      } else {
        emit_opcode(cbuf, Assembler::REX_XB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
        emit_opcode(cbuf, Assembler::REX_X);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xC7 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x00);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
  {

#line 2296 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Output Float immediate bits
    jfloat jf = opnd_array(2)->constantF();
    jint jf_as_bits = jint_cast(jf);
    emit_d32(cbuf, jf_as_bits);
  
#line 999999
  }
}

void storeDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5969 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movdbl(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void storeD0_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2344 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_WB);
      } else {
        emit_opcode(cbuf, Assembler::REX_WXB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WX);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xC7 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x00);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
  {

#line 2296 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Output Float immediate bits
    jfloat jf = opnd_array(2)->constantD();
    jint jf_as_bits = jint_cast(jf);
    emit_d32(cbuf, jf_as_bits);
  
#line 999999
  }
}

void storeD0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 5995 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movq(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), r12);
  
#line 999999
  }
}

void storeSSINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
      if (opnd_array(0)->base(ra_,this,idx0) < 8) {
        if (opnd_array(0)->index(ra_,this,idx0) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(0)->index(ra_,this,idx0) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(0)->base(ra_,this,idx0) < 8) {
        if (opnd_array(0)->index(ra_,this,idx0) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(0)->index(ra_,this,idx0) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x89 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(1)->reg(ra_,this,idx1)/* src */;
    int base = opnd_array(0)->base(ra_,this,idx0);
    int index = opnd_array(0)->index(ra_,this,idx0);
    int scale = opnd_array(0)->scale();
    int disp = opnd_array(0)->disp(ra_,this,0);
    relocInfo::relocType disp_reloc = opnd_array(0)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void storeSSLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
      if (opnd_array(0)->base(ra_,this,idx0) < 8) {
        if (opnd_array(0)->index(ra_,this,idx0) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(0)->index(ra_,this,idx0) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(0)->base(ra_,this,idx0) < 8) {
        if (opnd_array(0)->index(ra_,this,idx0) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(0)->index(ra_,this,idx0) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x89 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(1)->reg(ra_,this,idx1)/* src */;
    int base = opnd_array(0)->base(ra_,this,idx0);
    int index = opnd_array(0)->index(ra_,this,idx0);
    int scale = opnd_array(0)->scale();
    int disp = opnd_array(0)->disp(ra_,this,0);
    relocInfo::relocType disp_reloc = opnd_array(0)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void storeSSPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
      if (opnd_array(0)->base(ra_,this,idx0) < 8) {
        if (opnd_array(0)->index(ra_,this,idx0) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(0)->index(ra_,this,idx0) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(0)->base(ra_,this,idx0) < 8) {
        if (opnd_array(0)->index(ra_,this,idx0) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(0)->index(ra_,this,idx0) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x89 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(1)->reg(ra_,this,idx1)/* src */;
    int base = opnd_array(0)->base(ra_,this,idx0);
    int index = opnd_array(0)->index(ra_,this,idx0);
    int scale = opnd_array(0)->scale();
    int disp = opnd_array(0)->disp(ra_,this,0);
    relocInfo::relocType disp_reloc = opnd_array(0)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void storeSSFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6040 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movflt(Address(rsp, opnd_array(0)->disp(ra_,this,0)), opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void storeSSDNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6052 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movdbl(Address(rsp, opnd_array(0)->disp(ra_,this,0)), opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void bytes_reverse_intNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  {

#line 2419 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 2050 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // BSWAP
    emit_cc(cbuf, (0xC8 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */);
  
#line 999999
  }
}

void bytes_reverse_longNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  {

#line 2426 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 2050 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // BSWAP
    emit_cc(cbuf, (0xC8 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */);
  
#line 999999
  }
}

void bytes_reverse_unsigned_shortNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  {
    MacroAssembler _masm(&cbuf);

#line 6083 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ bswapl(opnd_array(1)->as_Register(ra_,this,idx1)/* dst */);
    __ shrl(opnd_array(1)->as_Register(ra_,this,idx1)/* dst */, 16);
  
#line 999999
  }
}

void bytes_reverse_shortNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  {
    MacroAssembler _masm(&cbuf);

#line 6096 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ bswapl(opnd_array(1)->as_Register(ra_,this,idx1)/* dst */);
    __ sarl(opnd_array(1)->as_Register(ra_,this,idx1)/* dst */, 16);
  
#line 999999
  }
}

void countLeadingZerosINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6111 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ lzcntl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void countLeadingZerosI_bsrNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6128 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Register Rdst = opnd_array(0)->as_Register(ra_,this)/* dst */;
    Register Rsrc = opnd_array(1)->as_Register(ra_,this,idx1)/* src */;
    Label skip;
    __ bsrl(Rdst, Rsrc);
    __ jccb(Assembler::notZero, skip);
    __ movl(Rdst, -1);
    __ bind(skip);
    __ negl(Rdst);
    __ addl(Rdst, BitsPerInt - 1);
  
#line 999999
  }
}

void countLeadingZerosLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6148 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ lzcntq(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void countLeadingZerosL_bsrNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6165 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Register Rdst = opnd_array(0)->as_Register(ra_,this)/* dst */;
    Register Rsrc = opnd_array(1)->as_Register(ra_,this,idx1)/* src */;
    Label skip;
    __ bsrq(Rdst, Rsrc);
    __ jccb(Assembler::notZero, skip);
    __ movl(Rdst, -1);
    __ bind(skip);
    __ negl(Rdst);
    __ addl(Rdst, BitsPerLong - 1);
  
#line 999999
  }
}

void countTrailingZerosINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6185 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ tzcntl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void countTrailingZerosI_bsfNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6200 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Register Rdst = opnd_array(0)->as_Register(ra_,this)/* dst */;
    Label done;
    __ bsfl(Rdst, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
    __ jccb(Assembler::notZero, done);
    __ movl(Rdst, BitsPerInt);
    __ bind(done);
  
#line 999999
  }
}

void countTrailingZerosLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6217 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ tzcntq(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void countTrailingZerosL_bsfNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6232 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Register Rdst = opnd_array(0)->as_Register(ra_,this)/* dst */;
    Label done;
    __ bsfq(Rdst, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
    __ jccb(Assembler::notZero, done);
    __ movl(Rdst, BitsPerLong);
    __ bind(done);
  
#line 999999
  }
}

void popCountINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6252 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ popcntl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void popCountI_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6264 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ popcntl(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void popCountLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6277 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ popcntq(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void popCountL_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6290 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ popcntq(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void membar_acquireNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  // User did not define which encode class to use.
}

uint membar_acquireNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 0, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 0);
}

void membar_acquire_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  // User did not define which encode class to use.
}

uint membar_acquire_0Node::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 0, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 0);
}

void membar_acquire_lockNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  // User did not define which encode class to use.
}

uint membar_acquire_lockNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 0, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 0);
}

void membar_releaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  // User did not define which encode class to use.
}

uint membar_releaseNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 0, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 0);
}

void membar_release_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  // User did not define which encode class to use.
}

uint membar_release_0Node::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 0, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 0);
}

void membar_release_lockNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  // User did not define which encode class to use.
}

uint membar_release_lockNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 0, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 0);
}

void membar_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 6359 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ membar(Assembler::StoreLoad);
  
#line 999999
  }
}

void unnecessary_membar_volatileNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  // User did not define which encode class to use.
}

uint unnecessary_membar_volatileNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 0, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 0);
}

void membar_storestoreNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  // User did not define which encode class to use.
}

uint membar_storestoreNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 0, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 0);
}

void castX2PNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6394 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */!= opnd_array(1)->reg(ra_,this,idx1)/* src */) {
      __ movptr(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
    }
  
#line 999999
  }
}

void castP2XNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6407 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */!= opnd_array(1)->reg(ra_,this,idx1)/* src */) {
      __ movptr(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
    }
  
#line 999999
  }
}

void convP2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6421 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void convN2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void encodeHeapOopNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6447 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Register s = opnd_array(1)->as_Register(ra_,this,idx1)/* src */;
    Register d = opnd_array(0)->as_Register(ra_,this)/* dst */;
    if (s != d) {
      __ movq(d, s);
    }
    __ encode_heap_oop(d);
  
#line 999999
  }
}

void encodeHeapOop_not_nullNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6463 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ encode_heap_oop_not_null(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void decodeHeapOopNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6475 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Register s = opnd_array(1)->as_Register(ra_,this,idx1)/* src */;
    Register d = opnd_array(0)->as_Register(ra_,this)/* dst */;
    if (s != d) {
      __ movq(d, s);
    }
    __ decode_heap_oop(d);
  
#line 999999
  }
}

void decodeHeapOop_not_nullNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6492 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Register s = opnd_array(1)->as_Register(ra_,this,idx1)/* src */;
    Register d = opnd_array(0)->as_Register(ra_,this)/* dst */;
    if (s != d) {
      __ decode_heap_oop_not_null(d, s);
    } else {
      __ decode_heap_oop_not_null(d);
    }
  
#line 999999
  }
}

void encodeKlass_not_nullNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6508 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ encode_klass_not_null(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void decodeKlass_not_nullNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6518 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Register s = opnd_array(1)->as_Register(ra_,this,idx1)/* src */;
    Register d = opnd_array(0)->as_Register(ra_,this)/* dst */;
    if (s != d) {
      __ decode_klass_not_null(d, s);
    } else {
      __ decode_klass_not_null(d);
    }
  
#line 999999
  }
}

void jumpXtnd_offsetNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  ra_->C->constant_table().fill_jump_table(cbuf, (MachConstantNode*) this, _index2label);
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// shift
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dest
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 6542 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // We could use jump(ArrayAddress) except that the macro assembler needs to use r10
    // to do that and the compiler is using that register as one it can allocate.
    // So we build it all by hand.
    // Address index(noreg, switch_reg, (Address::ScaleFactor)$shift$$constant);
    // ArrayAddress dispatch(table, index);
    Address dispatch(opnd_array(3)->as_Register(ra_,this,idx3)/* dest */, opnd_array(1)->as_Register(ra_,this,idx1)/* switch_val */, (Address::ScaleFactor) opnd_array(2)->constant());
    __ lea(opnd_array(3)->as_Register(ra_,this,idx3)/* dest */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    __ jmp(dispatch);
  
#line 999999
  }
}

void jumpXtnd_offsetNode::eval_constant(Compile* C) {
  _constant = C->constant_table().add_jump_table(this);
  // User did not define an encode section.
}
void jumpXtnd_addrNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  ra_->C->constant_table().fill_jump_table(cbuf, (MachConstantNode*) this, _index2label);
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// shift
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// offset
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dest
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 6562 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // We could use jump(ArrayAddress) except that the macro assembler needs to use r10
    // to do that and the compiler is using that register as one it can allocate.
    // So we build it all by hand.
    // Address index(noreg, switch_reg, (Address::ScaleFactor) $shift$$constant, (int) $offset$$constant);
    // ArrayAddress dispatch(table, index);
    Address dispatch(opnd_array(4)->as_Register(ra_,this,idx4)/* dest */, opnd_array(1)->as_Register(ra_,this,idx1)/* switch_val */, (Address::ScaleFactor) opnd_array(2)->constant(), (int) opnd_array(3)->constantL());
    __ lea(opnd_array(4)->as_Register(ra_,this,idx4)/* dest */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    __ jmp(dispatch);
  
#line 999999
  }
}

void jumpXtnd_addrNode::eval_constant(Compile* C) {
  _constant = C->constant_table().add_jump_table(this);
  // User did not define an encode section.
}
void jumpXtndNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  ra_->C->constant_table().fill_jump_table(cbuf, (MachConstantNode*) this, _index2label);
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dest
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 6582 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // We could use jump(ArrayAddress) except that the macro assembler needs to use r10
    // to do that and the compiler is using that register as one it can allocate.
    // So we build it all by hand.
    // Address index(noreg, switch_reg, Address::times_1);
    // ArrayAddress dispatch(table, index);
    Address dispatch(opnd_array(2)->as_Register(ra_,this,idx2)/* dest */, opnd_array(1)->as_Register(ra_,this,idx1)/* switch_val */, Address::times_1);
    __ lea(opnd_array(2)->as_Register(ra_,this,idx2)/* dest */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    __ jmp(dispatch);
  
#line 999999
  }
}

void jumpXtndNode::eval_constant(Compile* C) {
  _constant = C->constant_table().add_jump_table(this);
  // User did not define an encode section.
}
void cmovI_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cop
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* dst */ < 8) {
      if (opnd_array(4)->reg(ra_,this,idx4)/* src */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(4)->reg(ra_,this,idx4)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 2068 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // CMOV
    emit_d8(cbuf, (0x0F /*primary()*/));
    emit_cc(cbuf, (0x40 /*secondary()*/), opnd_array(1)->ccode());
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(3)->reg(ra_,this,idx3)/* dst */ & 7, opnd_array(4)->reg(ra_,this,idx4)/* src */ & 7);
  
#line 999999
  }
}

void cmovI_regUNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cop
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* dst */ < 8) {
      if (opnd_array(4)->reg(ra_,this,idx4)/* src */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(4)->reg(ra_,this,idx4)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 2068 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // CMOV
    emit_d8(cbuf, (0x0F /*primary()*/));
    emit_cc(cbuf, (0x40 /*secondary()*/), opnd_array(1)->ccode());
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(3)->reg(ra_,this,idx3)/* dst */ & 7, opnd_array(4)->reg(ra_,this,idx4)/* src */ & 7);
  
#line 999999
  }
}

void cmovI_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// cop
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* dst */ < 8) {
      if (opnd_array(4)->base(ra_,this,idx4) < 8) {
        if (opnd_array(4)->index(ra_,this,idx4) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(4)->index(ra_,this,idx4) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(4)->base(ra_,this,idx4) < 8) {
        if (opnd_array(4)->index(ra_,this,idx4) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(4)->index(ra_,this,idx4) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 2068 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // CMOV
    emit_d8(cbuf, (0x0F /*primary()*/));
    emit_cc(cbuf, (0x40 /*secondary()*/), opnd_array(1)->ccode());
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(3)->reg(ra_,this,idx3)/* dst */;
    int base = opnd_array(4)->base(ra_,this,idx4);
    int index = opnd_array(4)->index(ra_,this,idx4);
    int scale = opnd_array(4)->scale();
    int disp = opnd_array(4)->disp(ra_,this,idx4);
    relocInfo::relocType disp_reloc = opnd_array(4)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void cmovI_memUNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// cop
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* dst */ < 8) {
      if (opnd_array(4)->base(ra_,this,idx4) < 8) {
        if (opnd_array(4)->index(ra_,this,idx4) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(4)->index(ra_,this,idx4) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(4)->base(ra_,this,idx4) < 8) {
        if (opnd_array(4)->index(ra_,this,idx4) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(4)->index(ra_,this,idx4) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 2068 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // CMOV
    emit_d8(cbuf, (0x0F /*primary()*/));
    emit_cc(cbuf, (0x40 /*secondary()*/), opnd_array(1)->ccode());
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(3)->reg(ra_,this,idx3)/* dst */;
    int base = opnd_array(4)->base(ra_,this,idx4);
    int index = opnd_array(4)->index(ra_,this,idx4);
    int scale = opnd_array(4)->scale();
    int disp = opnd_array(4)->disp(ra_,this,idx4);
    relocInfo::relocType disp_reloc = opnd_array(4)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void cmovN_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cop
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* dst */ < 8) {
      if (opnd_array(4)->reg(ra_,this,idx4)/* src */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(4)->reg(ra_,this,idx4)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 2068 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // CMOV
    emit_d8(cbuf, (0x0F /*primary()*/));
    emit_cc(cbuf, (0x40 /*secondary()*/), opnd_array(1)->ccode());
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(3)->reg(ra_,this,idx3)/* dst */ & 7, opnd_array(4)->reg(ra_,this,idx4)/* src */ & 7);
  
#line 999999
  }
}

void cmovN_regUNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cop
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* dst */ < 8) {
      if (opnd_array(4)->reg(ra_,this,idx4)/* src */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(4)->reg(ra_,this,idx4)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 2068 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // CMOV
    emit_d8(cbuf, (0x0F /*primary()*/));
    emit_cc(cbuf, (0x40 /*secondary()*/), opnd_array(1)->ccode());
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(3)->reg(ra_,this,idx3)/* dst */ & 7, opnd_array(4)->reg(ra_,this,idx4)/* src */ & 7);
  
#line 999999
  }
}

void cmovP_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cop
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* dst */ < 8) {
      if (opnd_array(4)->reg(ra_,this,idx4)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(4)->reg(ra_,this,idx4)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 2068 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // CMOV
    emit_d8(cbuf, (0x0F /*primary()*/));
    emit_cc(cbuf, (0x40 /*secondary()*/), opnd_array(1)->ccode());
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(3)->reg(ra_,this,idx3)/* dst */ & 7, opnd_array(4)->reg(ra_,this,idx4)/* src */ & 7);
  
#line 999999
  }
}

void cmovP_regUNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cop
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* dst */ < 8) {
      if (opnd_array(4)->reg(ra_,this,idx4)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(4)->reg(ra_,this,idx4)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 2068 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // CMOV
    emit_d8(cbuf, (0x0F /*primary()*/));
    emit_cc(cbuf, (0x40 /*secondary()*/), opnd_array(1)->ccode());
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(3)->reg(ra_,this,idx3)/* dst */ & 7, opnd_array(4)->reg(ra_,this,idx4)/* src */ & 7);
  
#line 999999
  }
}

void cmovL_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cop
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* dst */ < 8) {
      if (opnd_array(4)->reg(ra_,this,idx4)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(4)->reg(ra_,this,idx4)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 2068 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // CMOV
    emit_d8(cbuf, (0x0F /*primary()*/));
    emit_cc(cbuf, (0x40 /*secondary()*/), opnd_array(1)->ccode());
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(3)->reg(ra_,this,idx3)/* dst */ & 7, opnd_array(4)->reg(ra_,this,idx4)/* src */ & 7);
  
#line 999999
  }
}

void cmovL_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// cop
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* dst */ < 8) {
      if (opnd_array(4)->base(ra_,this,idx4) < 8) {
        if (opnd_array(4)->index(ra_,this,idx4) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(4)->index(ra_,this,idx4) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(4)->base(ra_,this,idx4) < 8) {
        if (opnd_array(4)->index(ra_,this,idx4) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(4)->index(ra_,this,idx4) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 2068 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // CMOV
    emit_d8(cbuf, (0x0F /*primary()*/));
    emit_cc(cbuf, (0x40 /*secondary()*/), opnd_array(1)->ccode());
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(3)->reg(ra_,this,idx3)/* dst */;
    int base = opnd_array(4)->base(ra_,this,idx4);
    int index = opnd_array(4)->index(ra_,this,idx4);
    int scale = opnd_array(4)->scale();
    int disp = opnd_array(4)->disp(ra_,this,idx4);
    relocInfo::relocType disp_reloc = opnd_array(4)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void cmovL_regUNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cop
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* dst */ < 8) {
      if (opnd_array(4)->reg(ra_,this,idx4)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(4)->reg(ra_,this,idx4)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 2068 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // CMOV
    emit_d8(cbuf, (0x0F /*primary()*/));
    emit_cc(cbuf, (0x40 /*secondary()*/), opnd_array(1)->ccode());
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(3)->reg(ra_,this,idx3)/* dst */ & 7, opnd_array(4)->reg(ra_,this,idx4)/* src */ & 7);
  
#line 999999
  }
}

void cmovL_memUNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// cop
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* dst */ < 8) {
      if (opnd_array(4)->base(ra_,this,idx4) < 8) {
        if (opnd_array(4)->index(ra_,this,idx4) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(4)->index(ra_,this,idx4) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(4)->base(ra_,this,idx4) < 8) {
        if (opnd_array(4)->index(ra_,this,idx4) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(4)->index(ra_,this,idx4) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 2068 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // CMOV
    emit_d8(cbuf, (0x0F /*primary()*/));
    emit_cc(cbuf, (0x40 /*secondary()*/), opnd_array(1)->ccode());
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(3)->reg(ra_,this,idx3)/* dst */;
    int base = opnd_array(4)->base(ra_,this,idx4);
    int index = opnd_array(4)->index(ra_,this,idx4);
    int scale = opnd_array(4)->scale();
    int disp = opnd_array(4)->disp(ra_,this,idx4);
    relocInfo::relocType disp_reloc = opnd_array(4)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void cmovF_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cop
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6815 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label Lskip;
    // Invert sense of branch from sense of CMOV
    __ jccb((Assembler::Condition)(opnd_array(1)->ccode()^1), Lskip);
    __ movflt(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* src */);
    __ bind(Lskip);
  
#line 999999
  }
}

void cmovF_regUNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cop
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6845 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label Lskip;
    // Invert sense of branch from sense of CMOV
    __ jccb((Assembler::Condition)(opnd_array(1)->ccode()^1), Lskip);
    __ movflt(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* src */);
    __ bind(Lskip);
  
#line 999999
  }
}

void cmovD_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cop
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6871 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label Lskip;
    // Invert sense of branch from sense of CMOV
    __ jccb((Assembler::Condition)(opnd_array(1)->ccode()^1), Lskip);
    __ movdbl(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* src */);
    __ bind(Lskip);
  
#line 999999
  }
}

void cmovD_regUNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cop
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// dst
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6889 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label Lskip;
    // Invert sense of branch from sense of CMOV
    __ jccb((Assembler::Condition)(opnd_array(1)->ccode()^1), Lskip);
    __ movdbl(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* src */);
    __ bind(Lskip);
  
#line 999999
  }
}

void addI_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x03 /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7, opnd_array(2)->reg(ra_,this,idx2)/* src */ & 7);
  
#line 999999
  }
}

void addI_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 1997 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // OpcSEr/m
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    if (dstenc >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
      dstenc -= 8;
    }
    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_opcode(cbuf, (0x81 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x81 /*primary()*/));
    }
    // Emit r/m byte with secondary opcode, after primary opcode.
    emit_rm(cbuf, 0x3, (0x00 /*secondary()*/), dstenc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constant());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constant());
    }
  
#line 999999
  }
}

void addI_rReg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x03 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    int base = opnd_array(2)->base(ra_,this,idx2);
    int index = opnd_array(2)->index(ra_,this,idx2);
    int scale = opnd_array(2)->scale();
    int disp = opnd_array(2)->disp(ra_,this,idx2);
    relocInfo::relocType disp_reloc = opnd_array(2)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void addI_rReg_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x03 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void addI_mem_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x01 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* src */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void addI_mem_rReg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x01 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* src */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void addI_mem_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2329 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      } else {
        emit_opcode(cbuf, Assembler::REX_XB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
        emit_opcode(cbuf, Assembler::REX_X);
      }
    }
  
#line 999999
  }
  {

#line 1985 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_opcode(cbuf, (0x81 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x81 /*primary()*/));
    }
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x00);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constant());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constant());
    }
  
#line 999999
  }
}

void incI_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2419 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xFF /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x00 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void incI_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2329 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      } else {
        emit_opcode(cbuf, Assembler::REX_XB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
        emit_opcode(cbuf, Assembler::REX_X);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xFF /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x00);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
}

void decI_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2419 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xFF /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x01 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void decI_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2329 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      } else {
        emit_opcode(cbuf, Assembler::REX_XB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
        emit_opcode(cbuf, Assembler::REX_X);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xFF /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x01);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
}

void leaI_rReg_immINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src0
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x67));
  
#line 999999
  }
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src0 */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src0 */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8D /*primary()*/));
  
#line 999999
  }
  {

#line 2561 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int reg_encoding = opnd_array(0)->reg(ra_,this)/* dst */;
    int base         = opnd_array(1)->reg(ra_,this,idx1)/* src0 */;      // 0xFFFFFFFF indicates no base
    int index        = 0x04;            // 0x04 indicates no index
    int scale        = 0x00;            // 0x00 indicates no scale
    int displace     = opnd_array(2)->constant(); // 0x00 indicates no displacement
    relocInfo::relocType disp_reloc = relocInfo::none;
    encode_RegMem(cbuf, reg_encoding, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
}

void addL_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x03 /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7, opnd_array(2)->reg(ra_,this,idx2)/* src */ & 7);
  
#line 999999
  }
}

void addL_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2017 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // OpcSEr/m
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    if (dstenc < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
      dstenc -= 8;
    }
    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_opcode(cbuf, (0x81 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x81 /*primary()*/));
    }
    // Emit r/m byte with secondary opcode, after primary opcode.
    emit_rm(cbuf, 0x3, (0x00 /*secondary()*/), dstenc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constantL());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constantL());
    }
  
#line 999999
  }
}

void addL_rReg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x03 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    int base = opnd_array(2)->base(ra_,this,idx2);
    int index = opnd_array(2)->index(ra_,this,idx2);
    int scale = opnd_array(2)->scale();
    int disp = opnd_array(2)->disp(ra_,this,idx2);
    relocInfo::relocType disp_reloc = opnd_array(2)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void addL_rReg_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x03 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void addL_mem_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x01 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* src */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void addL_mem_rReg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x01 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* src */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void addL_mem_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2344 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_WB);
      } else {
        emit_opcode(cbuf, Assembler::REX_WXB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WX);
      }
    }
  
#line 999999
  }
  {

#line 1985 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_opcode(cbuf, (0x81 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x81 /*primary()*/));
    }
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x00);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constantL());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constantL());
    }
  
#line 999999
  }
}

void incL_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2426 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xFF /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x00 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void incL_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2344 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_WB);
      } else {
        emit_opcode(cbuf, Assembler::REX_WXB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WX);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xFF /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x00);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
}

void decL_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2426 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xFF /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x01 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void decL_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2344 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_WB);
      } else {
        emit_opcode(cbuf, Assembler::REX_WXB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WX);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xFF /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x01);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
}

void leaL_rReg_immLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src0
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src0 */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src0 */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8D /*primary()*/));
  
#line 999999
  }
  {

#line 2561 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int reg_encoding = opnd_array(0)->reg(ra_,this)/* dst */;
    int base         = opnd_array(1)->reg(ra_,this,idx1)/* src0 */;      // 0xFFFFFFFF indicates no base
    int index        = 0x04;            // 0x04 indicates no index
    int scale        = 0x00;            // 0x00 indicates no scale
    int displace     = opnd_array(2)->constantL(); // 0x00 indicates no displacement
    relocInfo::relocType disp_reloc = relocInfo::none;
    encode_RegMem(cbuf, reg_encoding, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
}

void addP_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x03 /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7, opnd_array(2)->reg(ra_,this,idx2)/* src */ & 7);
  
#line 999999
  }
}

void addP_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2017 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // OpcSEr/m
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    if (dstenc < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
      dstenc -= 8;
    }
    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_opcode(cbuf, (0x81 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x81 /*primary()*/));
    }
    // Emit r/m byte with secondary opcode, after primary opcode.
    emit_rm(cbuf, 0x3, (0x00 /*secondary()*/), dstenc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constantL());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constantL());
    }
  
#line 999999
  }
}

void leaP_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src0
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src0 */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src0 */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8D /*primary()*/));
  
#line 999999
  }
  {

#line 2561 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int reg_encoding = opnd_array(0)->reg(ra_,this)/* dst */;
    int base         = opnd_array(1)->reg(ra_,this,idx1)/* src0 */;      // 0xFFFFFFFF indicates no base
    int index        = 0x04;            // 0x04 indicates no index
    int scale        = 0x00;            // 0x00 indicates no scale
    int displace     = opnd_array(2)->constantL(); // 0x00 indicates no displacement
    relocInfo::relocType disp_reloc = relocInfo::none;
    encode_RegMem(cbuf, reg_encoding, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
}

void checkCastPPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  // User did not define which encode class to use.
}

uint checkCastPPNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 0, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 0);
}

void castPPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  // User did not define which encode class to use.
}

uint castPPNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 0, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 0);
}

void castIINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  // User did not define which encode class to use.
}

uint castIINode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 0, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 0);
}

void loadPLockedNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x8B /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(0)->reg(ra_,this)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void storePConditionalNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// heap_top_ptr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 2322 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) {
      emit_opcode(cbuf, 0xF0); // lock
    }
  
#line 999999
  }
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* newval */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB1 /*secondary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(3)->reg(ra_,this,idx3)/* newval */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void storeIConditionalNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 2322 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) {
      emit_opcode(cbuf, 0xF0); // lock
    }
  
#line 999999
  }
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* newval */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB1 /*secondary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(3)->reg(ra_,this,idx3)/* newval */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void storeLConditionalNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 2322 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) {
      emit_opcode(cbuf, 0xF0); // lock
    }
  
#line 999999
  }
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* newval */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB1 /*secondary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(3)->reg(ra_,this,idx3)/* newval */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void compareAndSwapPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem_ptr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 2322 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) {
      emit_opcode(cbuf, 0xF0); // lock
    }
  
#line 999999
  }
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* newval */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB1 /*secondary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(3)->reg(ra_,this,idx3)/* newval */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
  {

#line 2362 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* res */ >= 4) {
      emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* res */ < 8 ? Assembler::REX : Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x94));
  
#line 999999
  }
  {

#line 1833 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, 0, opnd_array(0)->reg(ra_,this)/* res */ & 7);
  
#line 999999
  }
  {

#line 2370 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* res */ < 8) {
      if (opnd_array(0)->reg(ra_,this)/* res */ >= 4) {
        emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* res */ < 8 ? Assembler::REX : Assembler::REX_B);
      }
    } else {
      if (opnd_array(0)->reg(ra_,this)/* res */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB6));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(0)->reg(ra_,this)/* res */ & 7, opnd_array(0)->reg(ra_,this)/* res */ & 7);
  
#line 999999
  }
}

void compareAndSwapP_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem_ptr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 2322 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) {
      emit_opcode(cbuf, 0xF0); // lock
    }
  
#line 999999
  }
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* newval */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB1 /*secondary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(3)->reg(ra_,this,idx3)/* newval */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
  {

#line 2362 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* res */ >= 4) {
      emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* res */ < 8 ? Assembler::REX : Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x94));
  
#line 999999
  }
  {

#line 1833 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, 0, opnd_array(0)->reg(ra_,this)/* res */ & 7);
  
#line 999999
  }
  {

#line 2370 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* res */ < 8) {
      if (opnd_array(0)->reg(ra_,this)/* res */ >= 4) {
        emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* res */ < 8 ? Assembler::REX : Assembler::REX_B);
      }
    } else {
      if (opnd_array(0)->reg(ra_,this)/* res */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB6));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(0)->reg(ra_,this)/* res */ & 7, opnd_array(0)->reg(ra_,this)/* res */ & 7);
  
#line 999999
  }
}

void compareAndSwapLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem_ptr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 2322 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) {
      emit_opcode(cbuf, 0xF0); // lock
    }
  
#line 999999
  }
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* newval */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB1 /*secondary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(3)->reg(ra_,this,idx3)/* newval */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
  {

#line 2362 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* res */ >= 4) {
      emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* res */ < 8 ? Assembler::REX : Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x94));
  
#line 999999
  }
  {

#line 1833 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, 0, opnd_array(0)->reg(ra_,this)/* res */ & 7);
  
#line 999999
  }
  {

#line 2370 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* res */ < 8) {
      if (opnd_array(0)->reg(ra_,this)/* res */ >= 4) {
        emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* res */ < 8 ? Assembler::REX : Assembler::REX_B);
      }
    } else {
      if (opnd_array(0)->reg(ra_,this)/* res */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB6));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(0)->reg(ra_,this)/* res */ & 7, opnd_array(0)->reg(ra_,this)/* res */ & 7);
  
#line 999999
  }
}

void compareAndSwapL_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem_ptr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 2322 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) {
      emit_opcode(cbuf, 0xF0); // lock
    }
  
#line 999999
  }
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* newval */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB1 /*secondary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(3)->reg(ra_,this,idx3)/* newval */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
  {

#line 2362 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* res */ >= 4) {
      emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* res */ < 8 ? Assembler::REX : Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x94));
  
#line 999999
  }
  {

#line 1833 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, 0, opnd_array(0)->reg(ra_,this)/* res */ & 7);
  
#line 999999
  }
  {

#line 2370 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* res */ < 8) {
      if (opnd_array(0)->reg(ra_,this)/* res */ >= 4) {
        emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* res */ < 8 ? Assembler::REX : Assembler::REX_B);
      }
    } else {
      if (opnd_array(0)->reg(ra_,this)/* res */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB6));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(0)->reg(ra_,this)/* res */ & 7, opnd_array(0)->reg(ra_,this)/* res */ & 7);
  
#line 999999
  }
}

void compareAndSwapINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem_ptr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 2322 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) {
      emit_opcode(cbuf, 0xF0); // lock
    }
  
#line 999999
  }
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* newval */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB1 /*secondary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(3)->reg(ra_,this,idx3)/* newval */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
  {

#line 2362 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* res */ >= 4) {
      emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* res */ < 8 ? Assembler::REX : Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x94));
  
#line 999999
  }
  {

#line 1833 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, 0, opnd_array(0)->reg(ra_,this)/* res */ & 7);
  
#line 999999
  }
  {

#line 2370 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* res */ < 8) {
      if (opnd_array(0)->reg(ra_,this)/* res */ >= 4) {
        emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* res */ < 8 ? Assembler::REX : Assembler::REX_B);
      }
    } else {
      if (opnd_array(0)->reg(ra_,this)/* res */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB6));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(0)->reg(ra_,this)/* res */ & 7, opnd_array(0)->reg(ra_,this)/* res */ & 7);
  
#line 999999
  }
}

void compareAndSwapI_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem_ptr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 2322 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) {
      emit_opcode(cbuf, 0xF0); // lock
    }
  
#line 999999
  }
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* newval */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB1 /*secondary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(3)->reg(ra_,this,idx3)/* newval */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
  {

#line 2362 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* res */ >= 4) {
      emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* res */ < 8 ? Assembler::REX : Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x94));
  
#line 999999
  }
  {

#line 1833 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, 0, opnd_array(0)->reg(ra_,this)/* res */ & 7);
  
#line 999999
  }
  {

#line 2370 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* res */ < 8) {
      if (opnd_array(0)->reg(ra_,this)/* res */ >= 4) {
        emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* res */ < 8 ? Assembler::REX : Assembler::REX_B);
      }
    } else {
      if (opnd_array(0)->reg(ra_,this)/* res */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB6));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(0)->reg(ra_,this)/* res */ & 7, opnd_array(0)->reg(ra_,this)/* res */ & 7);
  
#line 999999
  }
}

void compareAndSwapBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem_ptr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 2322 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) {
      emit_opcode(cbuf, 0xF0); // lock
    }
  
#line 999999
  }
  {

#line 2386 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* newval */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        } else if (opnd_array(3)->reg(ra_,this,idx3)/* newval */ >= 4) {
          emit_opcode(cbuf, Assembler::REX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB0 /*secondary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(3)->reg(ra_,this,idx3)/* newval */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
  {

#line 2362 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* res */ >= 4) {
      emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* res */ < 8 ? Assembler::REX : Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x94));
  
#line 999999
  }
  {

#line 1833 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, 0, opnd_array(0)->reg(ra_,this)/* res */ & 7);
  
#line 999999
  }
  {

#line 2370 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* res */ < 8) {
      if (opnd_array(0)->reg(ra_,this)/* res */ >= 4) {
        emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* res */ < 8 ? Assembler::REX : Assembler::REX_B);
      }
    } else {
      if (opnd_array(0)->reg(ra_,this)/* res */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB6));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(0)->reg(ra_,this)/* res */ & 7, opnd_array(0)->reg(ra_,this)/* res */ & 7);
  
#line 999999
  }
}

void compareAndSwapB_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem_ptr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 2322 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) {
      emit_opcode(cbuf, 0xF0); // lock
    }
  
#line 999999
  }
  {

#line 2386 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* newval */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        } else if (opnd_array(3)->reg(ra_,this,idx3)/* newval */ >= 4) {
          emit_opcode(cbuf, Assembler::REX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB0 /*secondary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(3)->reg(ra_,this,idx3)/* newval */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
  {

#line 2362 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* res */ >= 4) {
      emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* res */ < 8 ? Assembler::REX : Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x94));
  
#line 999999
  }
  {

#line 1833 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, 0, opnd_array(0)->reg(ra_,this)/* res */ & 7);
  
#line 999999
  }
  {

#line 2370 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* res */ < 8) {
      if (opnd_array(0)->reg(ra_,this)/* res */ >= 4) {
        emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* res */ < 8 ? Assembler::REX : Assembler::REX_B);
      }
    } else {
      if (opnd_array(0)->reg(ra_,this)/* res */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB6));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(0)->reg(ra_,this)/* res */ & 7, opnd_array(0)->reg(ra_,this)/* res */ & 7);
  
#line 999999
  }
}

void compareAndSwapSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem_ptr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 2322 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) {
      emit_opcode(cbuf, 0xF0); // lock
    }
  
#line 999999
  }
  {

#line 1828 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, 0x66);
  
#line 999999
  }
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* newval */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB1 /*secondary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(3)->reg(ra_,this,idx3)/* newval */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
  {

#line 2362 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* res */ >= 4) {
      emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* res */ < 8 ? Assembler::REX : Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x94));
  
#line 999999
  }
  {

#line 1833 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, 0, opnd_array(0)->reg(ra_,this)/* res */ & 7);
  
#line 999999
  }
  {

#line 2370 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* res */ < 8) {
      if (opnd_array(0)->reg(ra_,this)/* res */ >= 4) {
        emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* res */ < 8 ? Assembler::REX : Assembler::REX_B);
      }
    } else {
      if (opnd_array(0)->reg(ra_,this)/* res */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB6));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(0)->reg(ra_,this)/* res */ & 7, opnd_array(0)->reg(ra_,this)/* res */ & 7);
  
#line 999999
  }
}

void compareAndSwapS_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem_ptr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 2322 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) {
      emit_opcode(cbuf, 0xF0); // lock
    }
  
#line 999999
  }
  {

#line 1828 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, 0x66);
  
#line 999999
  }
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* newval */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB1 /*secondary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(3)->reg(ra_,this,idx3)/* newval */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
  {

#line 2362 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* res */ >= 4) {
      emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* res */ < 8 ? Assembler::REX : Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x94));
  
#line 999999
  }
  {

#line 1833 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, 0, opnd_array(0)->reg(ra_,this)/* res */ & 7);
  
#line 999999
  }
  {

#line 2370 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* res */ < 8) {
      if (opnd_array(0)->reg(ra_,this)/* res */ >= 4) {
        emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* res */ < 8 ? Assembler::REX : Assembler::REX_B);
      }
    } else {
      if (opnd_array(0)->reg(ra_,this)/* res */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB6));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(0)->reg(ra_,this)/* res */ & 7, opnd_array(0)->reg(ra_,this)/* res */ & 7);
  
#line 999999
  }
}

void compareAndSwapNNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem_ptr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 2322 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) {
      emit_opcode(cbuf, 0xF0); // lock
    }
  
#line 999999
  }
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* newval */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB1 /*secondary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(3)->reg(ra_,this,idx3)/* newval */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
  {

#line 2362 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* res */ >= 4) {
      emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* res */ < 8 ? Assembler::REX : Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x94));
  
#line 999999
  }
  {

#line 1833 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, 0, opnd_array(0)->reg(ra_,this)/* res */ & 7);
  
#line 999999
  }
  {

#line 2370 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* res */ < 8) {
      if (opnd_array(0)->reg(ra_,this)/* res */ >= 4) {
        emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* res */ < 8 ? Assembler::REX : Assembler::REX_B);
      }
    } else {
      if (opnd_array(0)->reg(ra_,this)/* res */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB6));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(0)->reg(ra_,this)/* res */ & 7, opnd_array(0)->reg(ra_,this)/* res */ & 7);
  
#line 999999
  }
}

void compareAndSwapN_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem_ptr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 2322 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) {
      emit_opcode(cbuf, 0xF0); // lock
    }
  
#line 999999
  }
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* newval */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB1 /*secondary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(3)->reg(ra_,this,idx3)/* newval */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
  {

#line 2362 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* res */ >= 4) {
      emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* res */ < 8 ? Assembler::REX : Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x94));
  
#line 999999
  }
  {

#line 1833 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, 0, opnd_array(0)->reg(ra_,this)/* res */ & 7);
  
#line 999999
  }
  {

#line 2370 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* res */ < 8) {
      if (opnd_array(0)->reg(ra_,this)/* res */ >= 4) {
        emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* res */ < 8 ? Assembler::REX : Assembler::REX_B);
      }
    } else {
      if (opnd_array(0)->reg(ra_,this)/* res */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB6));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(0)->reg(ra_,this)/* res */ & 7, opnd_array(0)->reg(ra_,this)/* res */ & 7);
  
#line 999999
  }
}

void compareAndExchangeBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem_ptr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 2322 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) {
      emit_opcode(cbuf, 0xF0); // lock
    }
  
#line 999999
  }
  {

#line 2386 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* newval */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        } else if (opnd_array(3)->reg(ra_,this,idx3)/* newval */ >= 4) {
          emit_opcode(cbuf, Assembler::REX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB0 /*secondary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(3)->reg(ra_,this,idx3)/* newval */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void compareAndExchangeSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem_ptr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 2322 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) {
      emit_opcode(cbuf, 0xF0); // lock
    }
  
#line 999999
  }
  {

#line 1828 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, 0x66);
  
#line 999999
  }
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* newval */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB1 /*secondary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(3)->reg(ra_,this,idx3)/* newval */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void compareAndExchangeINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem_ptr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 2322 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) {
      emit_opcode(cbuf, 0xF0); // lock
    }
  
#line 999999
  }
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* newval */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB1 /*secondary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(3)->reg(ra_,this,idx3)/* newval */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void compareAndExchangeLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem_ptr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 2322 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) {
      emit_opcode(cbuf, 0xF0); // lock
    }
  
#line 999999
  }
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* newval */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB1 /*secondary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(3)->reg(ra_,this,idx3)/* newval */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void compareAndExchangeNNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem_ptr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 2322 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) {
      emit_opcode(cbuf, 0xF0); // lock
    }
  
#line 999999
  }
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* newval */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB1 /*secondary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(3)->reg(ra_,this,idx3)/* newval */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void compareAndExchangePNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem_ptr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// oldval
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// newval
  {

#line 2322 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) {
      emit_opcode(cbuf, 0xF0); // lock
    }
  
#line 999999
  }
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(3)->reg(ra_,this,idx3)/* newval */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB1 /*secondary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(3)->reg(ra_,this,idx3)/* newval */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void xaddB_no_resNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// add
  {
    MacroAssembler _masm(&cbuf);

#line 7552 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) { __ lock(); }
    __ addb(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), opnd_array(2)->constant());
  
#line 999999
  }
}

void xaddBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// newval
  {
    MacroAssembler _masm(&cbuf);

#line 7563 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) { __ lock(); }
    __ xaddb(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), opnd_array(2)->as_Register(ra_,this,idx2)/* newval */);
  
#line 999999
  }
}

void xaddS_no_resNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// add
  {
    MacroAssembler _masm(&cbuf);

#line 7575 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) { __ lock(); }
    __ addw(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), opnd_array(2)->constant());
  
#line 999999
  }
}

void xaddSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// newval
  {
    MacroAssembler _masm(&cbuf);

#line 7586 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) { __ lock(); }
    __ xaddw(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), opnd_array(2)->as_Register(ra_,this,idx2)/* newval */);
  
#line 999999
  }
}

void xaddI_no_resNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// add
  {
    MacroAssembler _masm(&cbuf);

#line 7598 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) { __ lock(); }
    __ addl(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), opnd_array(2)->constant());
  
#line 999999
  }
}

void xaddINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// newval
  {
    MacroAssembler _masm(&cbuf);

#line 7609 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) { __ lock(); }
    __ xaddl(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), opnd_array(2)->as_Register(ra_,this,idx2)/* newval */);
  
#line 999999
  }
}

void xaddL_no_resNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// add
  {
    MacroAssembler _masm(&cbuf);

#line 7621 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) { __ lock(); }
    __ addq(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), opnd_array(2)->constantL());
  
#line 999999
  }
}

void xaddLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// newval
  {
    MacroAssembler _masm(&cbuf);

#line 7632 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (os::is_MP()) { __ lock(); }
    __ xaddq(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), opnd_array(2)->as_Register(ra_,this,idx2)/* newval */);
  
#line 999999
  }
}

void xchgBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// newval
  {
    MacroAssembler _masm(&cbuf);

#line 7642 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ xchgb(opnd_array(2)->as_Register(ra_,this,idx2)/* newval */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void xchgSNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// newval
  {
    MacroAssembler _masm(&cbuf);

#line 7651 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ xchgw(opnd_array(2)->as_Register(ra_,this,idx2)/* newval */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void xchgINode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// newval
  {
    MacroAssembler _masm(&cbuf);

#line 7660 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ xchgl(opnd_array(2)->as_Register(ra_,this,idx2)/* newval */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void xchgLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// newval
  {
    MacroAssembler _masm(&cbuf);

#line 7669 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ xchgq(opnd_array(2)->as_Register(ra_,this,idx2)/* newval */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void xchgPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// newval
  {
    MacroAssembler _masm(&cbuf);

#line 7678 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ xchgq(opnd_array(2)->as_Register(ra_,this,idx2)/* newval */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void xchgNNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// newval
  {
    MacroAssembler _masm(&cbuf);

#line 7687 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ xchgl(opnd_array(2)->as_Register(ra_,this,idx2)/* newval */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void subI_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x2B /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7, opnd_array(2)->reg(ra_,this,idx2)/* src */ & 7);
  
#line 999999
  }
}

void subI_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 1997 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // OpcSEr/m
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    if (dstenc >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
      dstenc -= 8;
    }
    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_opcode(cbuf, (0x81 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x81 /*primary()*/));
    }
    // Emit r/m byte with secondary opcode, after primary opcode.
    emit_rm(cbuf, 0x3, (0x05 /*secondary()*/), dstenc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constant());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constant());
    }
  
#line 999999
  }
}

void subI_rReg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x2B /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    int base = opnd_array(2)->base(ra_,this,idx2);
    int index = opnd_array(2)->index(ra_,this,idx2);
    int scale = opnd_array(2)->scale();
    int disp = opnd_array(2)->disp(ra_,this,idx2);
    relocInfo::relocType disp_reloc = opnd_array(2)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void subI_mem_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x29 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* src */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void subI_mem_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2329 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      } else {
        emit_opcode(cbuf, Assembler::REX_XB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
        emit_opcode(cbuf, Assembler::REX_X);
      }
    }
  
#line 999999
  }
  {

#line 1985 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_opcode(cbuf, (0x81 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x81 /*primary()*/));
    }
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x05);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constant());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constant());
    }
  
#line 999999
  }
}

void subL_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x2B /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7, opnd_array(2)->reg(ra_,this,idx2)/* src */ & 7);
  
#line 999999
  }
}

void subL_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2017 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // OpcSEr/m
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    if (dstenc < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
      dstenc -= 8;
    }
    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_opcode(cbuf, (0x81 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x81 /*primary()*/));
    }
    // Emit r/m byte with secondary opcode, after primary opcode.
    emit_rm(cbuf, 0x3, (0x05 /*secondary()*/), dstenc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constantL());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constantL());
    }
  
#line 999999
  }
}

void subL_rReg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x2B /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    int base = opnd_array(2)->base(ra_,this,idx2);
    int index = opnd_array(2)->index(ra_,this,idx2);
    int scale = opnd_array(2)->scale();
    int disp = opnd_array(2)->disp(ra_,this,idx2);
    relocInfo::relocType disp_reloc = opnd_array(2)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void subL_mem_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x29 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* src */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void subL_mem_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2344 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_WB);
      } else {
        emit_opcode(cbuf, Assembler::REX_WXB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WX);
      }
    }
  
#line 999999
  }
  {

#line 1985 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_opcode(cbuf, (0x81 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x81 /*primary()*/));
    }
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x05);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constantL());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constantL());
    }
  
#line 999999
  }
}

void subP_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(3)->reg(ra_,this,idx3)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(3)->reg(ra_,this,idx3)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x2B /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7, opnd_array(3)->reg(ra_,this,idx3)/* src */ & 7);
  
#line 999999
  }
}

void negI_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  {

#line 2419 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* dst */ >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF7 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x03 /*secondary()*/), opnd_array(2)->reg(ra_,this,idx2)/* dst */ & 7);
  
#line 999999
  }
}

void negI_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {

#line 2329 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      } else {
        emit_opcode(cbuf, Assembler::REX_XB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
        emit_opcode(cbuf, Assembler::REX_X);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF7 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x03 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
}

void negL_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  {

#line 2426 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* dst */ < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF7 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x03 /*secondary()*/), opnd_array(2)->reg(ra_,this,idx2)/* dst */ & 7);
  
#line 999999
  }
}

void negL_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {

#line 2344 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_WB);
      } else {
        emit_opcode(cbuf, Assembler::REX_WXB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WX);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF7 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x03 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
}

void mulI_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xAF /*secondary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7, opnd_array(2)->reg(ra_,this,idx2)/* src */ & 7);
  
#line 999999
  }
}

void mulI_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// imm
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1985 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_opcode(cbuf, (0x69 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x69 /*primary()*/));
    }
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(0)->reg(ra_,this)/* dst */ & 7, opnd_array(1)->reg(ra_,this,idx1)/* src */ & 7);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constant());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constant());
    }
  
#line 999999
  }
}

void mulI_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xAF /*secondary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    int base = opnd_array(2)->base(ra_,this,idx2);
    int index = opnd_array(2)->index(ra_,this,idx2);
    int scale = opnd_array(2)->scale();
    int disp = opnd_array(2)->disp(ra_,this,idx2);
    relocInfo::relocType disp_reloc = opnd_array(2)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void mulI_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xAF /*secondary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void mulI_mem_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// imm
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1985 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_opcode(cbuf, (0x69 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x69 /*primary()*/));
    }
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(0)->reg(ra_,this)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constant());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constant());
    }
  
#line 999999
  }
}

void mulL_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xAF /*secondary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7, opnd_array(2)->reg(ra_,this,idx2)/* src */ & 7);
  
#line 999999
  }
}

void mulL_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// imm
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 1985 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_opcode(cbuf, (0x69 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x69 /*primary()*/));
    }
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(0)->reg(ra_,this)/* dst */ & 7, opnd_array(1)->reg(ra_,this,idx1)/* src */ & 7);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constantL());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constantL());
    }
  
#line 999999
  }
}

void mulL_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xAF /*secondary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    int base = opnd_array(2)->base(ra_,this,idx2);
    int index = opnd_array(2)->index(ra_,this,idx2);
    int scale = opnd_array(2)->scale();
    int disp = opnd_array(2)->disp(ra_,this,idx2);
    relocInfo::relocType disp_reloc = opnd_array(2)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void mulL_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xAF /*secondary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void mulL_mem_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// imm
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1985 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_opcode(cbuf, (0x69 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x69 /*primary()*/));
    }
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(0)->reg(ra_,this)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constantL());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constantL());
    }
  
#line 999999
  }
}

void mulHiL_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// rax
  {

#line 2426 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF7 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x5 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* src */ & 7);
  
#line 999999
  }
}

void divI_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// rax
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// div
  {

#line 1849 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Full implementation of Java idiv and irem; checks for
    // special case as described in JVM spec., p.243 & p.271.
    //
    //         normal case                           special case
    //
    // input : rax: dividend                         min_int
    //         reg: divisor                          -1
    //
    // output: rax: quotient  (= rax idiv reg)       min_int
    //         rdx: remainder (= rax irem reg)       0
    //
    //  Code sequnce:
    //
    //    0:   3d 00 00 00 80          cmp    $0x80000000,%eax
    //    5:   75 07/08                jne    e <normal>
    //    7:   33 d2                   xor    %edx,%edx
    //  [div >= 8 -> offset + 1]
    //  [REX_B]
    //    9:   83 f9 ff                cmp    $0xffffffffffffffff,$div
    //    c:   74 03/04                je     11 <done>
    // 000000000000000e <normal>:
    //    e:   99                      cltd
    //  [div >= 8 -> offset + 1]
    //  [REX_B]
    //    f:   f7 f9                   idiv   $div
    // 0000000000000011 <done>:

    // cmp    $0x80000000,%eax
    emit_opcode(cbuf, 0x3d);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x80);

    // jne    e <normal>
    emit_opcode(cbuf, 0x75);
    emit_d8(cbuf, opnd_array(2)->reg(ra_,this,idx2)/* div */ < 8 ? 0x07 : 0x08);

    // xor    %edx,%edx
    emit_opcode(cbuf, 0x33);
    emit_d8(cbuf, 0xD2);

    // cmp    $0xffffffffffffffff,%ecx
    if (opnd_array(2)->reg(ra_,this,idx2)/* div */ >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
    }
    emit_opcode(cbuf, 0x83);
    emit_rm(cbuf, 0x3, 0x7, opnd_array(2)->reg(ra_,this,idx2)/* div */ & 7);
    emit_d8(cbuf, 0xFF);

    // je     11 <done>
    emit_opcode(cbuf, 0x74);
    emit_d8(cbuf, opnd_array(2)->reg(ra_,this,idx2)/* div */ < 8 ? 0x03 : 0x04);

    // <normal>
    // cltd
    emit_opcode(cbuf, 0x99);

    // idivl (note: must be emitted by the user of this rule)
    // <done>
  
#line 999999
  }
  {

#line 2419 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* div */ >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF7 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x7 /*secondary()*/), opnd_array(2)->reg(ra_,this,idx2)/* div */ & 7);
  
#line 999999
  }
}

void divL_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// rax
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// div
  {

#line 1913 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Full implementation of Java ldiv and lrem; checks for
    // special case as described in JVM spec., p.243 & p.271.
    //
    //         normal case                           special case
    //
    // input : rax: dividend                         min_long
    //         reg: divisor                          -1
    //
    // output: rax: quotient  (= rax idiv reg)       min_long
    //         rdx: remainder (= rax irem reg)       0
    //
    //  Code sequnce:
    //
    //    0:   48 ba 00 00 00 00 00    mov    $0x8000000000000000,%rdx
    //    7:   00 00 80
    //    a:   48 39 d0                cmp    %rdx,%rax
    //    d:   75 08                   jne    17 <normal>
    //    f:   33 d2                   xor    %edx,%edx
    //   11:   48 83 f9 ff             cmp    $0xffffffffffffffff,$div
    //   15:   74 05                   je     1c <done>
    // 0000000000000017 <normal>:
    //   17:   48 99                   cqto
    //   19:   48 f7 f9                idiv   $div
    // 000000000000001c <done>:

    // mov    $0x8000000000000000,%rdx
    emit_opcode(cbuf, Assembler::REX_W);
    emit_opcode(cbuf, 0xBA);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x80);

    // cmp    %rdx,%rax
    emit_opcode(cbuf, Assembler::REX_W);
    emit_opcode(cbuf, 0x39);
    emit_d8(cbuf, 0xD0);

    // jne    17 <normal>
    emit_opcode(cbuf, 0x75);
    emit_d8(cbuf, 0x08);

    // xor    %edx,%edx
    emit_opcode(cbuf, 0x33);
    emit_d8(cbuf, 0xD2);

    // cmp    $0xffffffffffffffff,$div
    emit_opcode(cbuf, opnd_array(2)->reg(ra_,this,idx2)/* div */ < 8 ? Assembler::REX_W : Assembler::REX_WB);
    emit_opcode(cbuf, 0x83);
    emit_rm(cbuf, 0x3, 0x7, opnd_array(2)->reg(ra_,this,idx2)/* div */ & 7);
    emit_d8(cbuf, 0xFF);

    // je     1e <done>
    emit_opcode(cbuf, 0x74);
    emit_d8(cbuf, 0x05);

    // <normal>
    // cqto
    emit_opcode(cbuf, Assembler::REX_W);
    emit_opcode(cbuf, 0x99);

    // idivq (note: must be emitted by the user of this rule)
    // <done>
  
#line 999999
  }
  {

#line 2426 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* div */ < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF7 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x7 /*secondary()*/), opnd_array(2)->reg(ra_,this,idx2)/* div */ & 7);
  
#line 999999
  }
}

void divModI_rReg_divmodNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// div
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// rdx
  {

#line 1849 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Full implementation of Java idiv and irem; checks for
    // special case as described in JVM spec., p.243 & p.271.
    //
    //         normal case                           special case
    //
    // input : rax: dividend                         min_int
    //         reg: divisor                          -1
    //
    // output: rax: quotient  (= rax idiv reg)       min_int
    //         rdx: remainder (= rax irem reg)       0
    //
    //  Code sequnce:
    //
    //    0:   3d 00 00 00 80          cmp    $0x80000000,%eax
    //    5:   75 07/08                jne    e <normal>
    //    7:   33 d2                   xor    %edx,%edx
    //  [div >= 8 -> offset + 1]
    //  [REX_B]
    //    9:   83 f9 ff                cmp    $0xffffffffffffffff,$div
    //    c:   74 03/04                je     11 <done>
    // 000000000000000e <normal>:
    //    e:   99                      cltd
    //  [div >= 8 -> offset + 1]
    //  [REX_B]
    //    f:   f7 f9                   idiv   $div
    // 0000000000000011 <done>:

    // cmp    $0x80000000,%eax
    emit_opcode(cbuf, 0x3d);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x80);

    // jne    e <normal>
    emit_opcode(cbuf, 0x75);
    emit_d8(cbuf, opnd_array(2)->reg(ra_,this,idx2)/* div */ < 8 ? 0x07 : 0x08);

    // xor    %edx,%edx
    emit_opcode(cbuf, 0x33);
    emit_d8(cbuf, 0xD2);

    // cmp    $0xffffffffffffffff,%ecx
    if (opnd_array(2)->reg(ra_,this,idx2)/* div */ >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
    }
    emit_opcode(cbuf, 0x83);
    emit_rm(cbuf, 0x3, 0x7, opnd_array(2)->reg(ra_,this,idx2)/* div */ & 7);
    emit_d8(cbuf, 0xFF);

    // je     11 <done>
    emit_opcode(cbuf, 0x74);
    emit_d8(cbuf, opnd_array(2)->reg(ra_,this,idx2)/* div */ < 8 ? 0x03 : 0x04);

    // <normal>
    // cltd
    emit_opcode(cbuf, 0x99);

    // idivl (note: must be emitted by the user of this rule)
    // <done>
  
#line 999999
  }
  {

#line 2419 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* div */ >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF7 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x7 /*secondary()*/), opnd_array(2)->reg(ra_,this,idx2)/* div */ & 7);
  
#line 999999
  }
}

void divModL_rReg_divmodNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// div
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// rdx
  {

#line 1913 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Full implementation of Java ldiv and lrem; checks for
    // special case as described in JVM spec., p.243 & p.271.
    //
    //         normal case                           special case
    //
    // input : rax: dividend                         min_long
    //         reg: divisor                          -1
    //
    // output: rax: quotient  (= rax idiv reg)       min_long
    //         rdx: remainder (= rax irem reg)       0
    //
    //  Code sequnce:
    //
    //    0:   48 ba 00 00 00 00 00    mov    $0x8000000000000000,%rdx
    //    7:   00 00 80
    //    a:   48 39 d0                cmp    %rdx,%rax
    //    d:   75 08                   jne    17 <normal>
    //    f:   33 d2                   xor    %edx,%edx
    //   11:   48 83 f9 ff             cmp    $0xffffffffffffffff,$div
    //   15:   74 05                   je     1c <done>
    // 0000000000000017 <normal>:
    //   17:   48 99                   cqto
    //   19:   48 f7 f9                idiv   $div
    // 000000000000001c <done>:

    // mov    $0x8000000000000000,%rdx
    emit_opcode(cbuf, Assembler::REX_W);
    emit_opcode(cbuf, 0xBA);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x80);

    // cmp    %rdx,%rax
    emit_opcode(cbuf, Assembler::REX_W);
    emit_opcode(cbuf, 0x39);
    emit_d8(cbuf, 0xD0);

    // jne    17 <normal>
    emit_opcode(cbuf, 0x75);
    emit_d8(cbuf, 0x08);

    // xor    %edx,%edx
    emit_opcode(cbuf, 0x33);
    emit_d8(cbuf, 0xD2);

    // cmp    $0xffffffffffffffff,$div
    emit_opcode(cbuf, opnd_array(2)->reg(ra_,this,idx2)/* div */ < 8 ? Assembler::REX_W : Assembler::REX_WB);
    emit_opcode(cbuf, 0x83);
    emit_rm(cbuf, 0x3, 0x7, opnd_array(2)->reg(ra_,this,idx2)/* div */ & 7);
    emit_d8(cbuf, 0xFF);

    // je     1e <done>
    emit_opcode(cbuf, 0x74);
    emit_d8(cbuf, 0x05);

    // <normal>
    // cqto
    emit_opcode(cbuf, Assembler::REX_W);
    emit_opcode(cbuf, 0x99);

    // idivq (note: must be emitted by the user of this rule)
    // <done>
  
#line 999999
  }
  {

#line 2426 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* div */ < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF7 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x7 /*secondary()*/), opnd_array(2)->reg(ra_,this,idx2)/* div */ & 7);
  
#line 999999
  }
}

void loadConL_0x6666666666666667Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {

#line 2221 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int dstenc = opnd_array(0)->reg(ra_,this)/* dst */;
    if (dstenc < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
      dstenc -= 8;
    }
    emit_opcode(cbuf, 0xB8 | dstenc);
    emit_d64(cbuf, (0x6666666666666667));
  
#line 999999
  }
}

void mul_hiNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// rax
  {

#line 2426 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF7 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x5 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* src */ & 7);
  
#line 999999
  }
}

void sarL_rReg_63Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cr
  {

#line 2195 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // SAL, SAR, SHR
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    if (dstenc < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
      dstenc -= 8;
    }
    emit_d8(cbuf, (0xC1 /*primary()*/));
    emit_rm(cbuf, 0x3, (0x7 /*secondary()*/), dstenc);
    emit_d8(cbuf, (0x3F));
  
#line 999999
  }
}

void sarL_rReg_2Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cr
  {

#line 2195 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // SAL, SAR, SHR
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    if (dstenc < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
      dstenc -= 8;
    }
    emit_d8(cbuf, (0xC1 /*primary()*/));
    emit_rm(cbuf, 0x3, (0x7 /*secondary()*/), dstenc);
    emit_d8(cbuf, (0x2));
  
#line 999999
  }
}

void modI_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// rax
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// div
  {

#line 1849 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Full implementation of Java idiv and irem; checks for
    // special case as described in JVM spec., p.243 & p.271.
    //
    //         normal case                           special case
    //
    // input : rax: dividend                         min_int
    //         reg: divisor                          -1
    //
    // output: rax: quotient  (= rax idiv reg)       min_int
    //         rdx: remainder (= rax irem reg)       0
    //
    //  Code sequnce:
    //
    //    0:   3d 00 00 00 80          cmp    $0x80000000,%eax
    //    5:   75 07/08                jne    e <normal>
    //    7:   33 d2                   xor    %edx,%edx
    //  [div >= 8 -> offset + 1]
    //  [REX_B]
    //    9:   83 f9 ff                cmp    $0xffffffffffffffff,$div
    //    c:   74 03/04                je     11 <done>
    // 000000000000000e <normal>:
    //    e:   99                      cltd
    //  [div >= 8 -> offset + 1]
    //  [REX_B]
    //    f:   f7 f9                   idiv   $div
    // 0000000000000011 <done>:

    // cmp    $0x80000000,%eax
    emit_opcode(cbuf, 0x3d);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x80);

    // jne    e <normal>
    emit_opcode(cbuf, 0x75);
    emit_d8(cbuf, opnd_array(2)->reg(ra_,this,idx2)/* div */ < 8 ? 0x07 : 0x08);

    // xor    %edx,%edx
    emit_opcode(cbuf, 0x33);
    emit_d8(cbuf, 0xD2);

    // cmp    $0xffffffffffffffff,%ecx
    if (opnd_array(2)->reg(ra_,this,idx2)/* div */ >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
    }
    emit_opcode(cbuf, 0x83);
    emit_rm(cbuf, 0x3, 0x7, opnd_array(2)->reg(ra_,this,idx2)/* div */ & 7);
    emit_d8(cbuf, 0xFF);

    // je     11 <done>
    emit_opcode(cbuf, 0x74);
    emit_d8(cbuf, opnd_array(2)->reg(ra_,this,idx2)/* div */ < 8 ? 0x03 : 0x04);

    // <normal>
    // cltd
    emit_opcode(cbuf, 0x99);

    // idivl (note: must be emitted by the user of this rule)
    // <done>
  
#line 999999
  }
  {

#line 2419 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* div */ >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF7 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x7 /*secondary()*/), opnd_array(2)->reg(ra_,this,idx2)/* div */ & 7);
  
#line 999999
  }
}

void modL_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// rax
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// div
  {

#line 1913 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Full implementation of Java ldiv and lrem; checks for
    // special case as described in JVM spec., p.243 & p.271.
    //
    //         normal case                           special case
    //
    // input : rax: dividend                         min_long
    //         reg: divisor                          -1
    //
    // output: rax: quotient  (= rax idiv reg)       min_long
    //         rdx: remainder (= rax irem reg)       0
    //
    //  Code sequnce:
    //
    //    0:   48 ba 00 00 00 00 00    mov    $0x8000000000000000,%rdx
    //    7:   00 00 80
    //    a:   48 39 d0                cmp    %rdx,%rax
    //    d:   75 08                   jne    17 <normal>
    //    f:   33 d2                   xor    %edx,%edx
    //   11:   48 83 f9 ff             cmp    $0xffffffffffffffff,$div
    //   15:   74 05                   je     1c <done>
    // 0000000000000017 <normal>:
    //   17:   48 99                   cqto
    //   19:   48 f7 f9                idiv   $div
    // 000000000000001c <done>:

    // mov    $0x8000000000000000,%rdx
    emit_opcode(cbuf, Assembler::REX_W);
    emit_opcode(cbuf, 0xBA);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x00);
    emit_d8(cbuf, 0x80);

    // cmp    %rdx,%rax
    emit_opcode(cbuf, Assembler::REX_W);
    emit_opcode(cbuf, 0x39);
    emit_d8(cbuf, 0xD0);

    // jne    17 <normal>
    emit_opcode(cbuf, 0x75);
    emit_d8(cbuf, 0x08);

    // xor    %edx,%edx
    emit_opcode(cbuf, 0x33);
    emit_d8(cbuf, 0xD2);

    // cmp    $0xffffffffffffffff,$div
    emit_opcode(cbuf, opnd_array(2)->reg(ra_,this,idx2)/* div */ < 8 ? Assembler::REX_W : Assembler::REX_WB);
    emit_opcode(cbuf, 0x83);
    emit_rm(cbuf, 0x3, 0x7, opnd_array(2)->reg(ra_,this,idx2)/* div */ & 7);
    emit_d8(cbuf, 0xFF);

    // je     1e <done>
    emit_opcode(cbuf, 0x74);
    emit_d8(cbuf, 0x05);

    // <normal>
    // cqto
    emit_opcode(cbuf, Assembler::REX_W);
    emit_opcode(cbuf, 0x99);

    // idivq (note: must be emitted by the user of this rule)
    // <done>
  
#line 999999
  }
  {

#line 2426 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* div */ < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF7 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x7 /*secondary()*/), opnd_array(2)->reg(ra_,this,idx2)/* div */ & 7);
  
#line 999999
  }
}

void salI_rReg_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2419 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD1 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x4 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void salI_mem_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2329 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      } else {
        emit_opcode(cbuf, Assembler::REX_XB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
        emit_opcode(cbuf, Assembler::REX_X);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD1 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x4 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
}

void salI_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2182 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // SAL, SAR, SHR
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    if (dstenc >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
      dstenc -= 8;
    }
    emit_d8(cbuf, (0xC1 /*primary()*/));
    emit_rm(cbuf, 0x3, (0x4 /*secondary()*/), dstenc);
    emit_d8(cbuf, opnd_array(2)->constant());
  
#line 999999
  }
}

void salI_mem_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2329 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      } else {
        emit_opcode(cbuf, Assembler::REX_XB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
        emit_opcode(cbuf, Assembler::REX_X);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xC1 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x4 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constant());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constant());
    }
  
#line 999999
  }
}

void salI_rReg_CLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2419 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD3 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x4 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void salI_mem_CLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2329 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      } else {
        emit_opcode(cbuf, Assembler::REX_XB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
        emit_opcode(cbuf, Assembler::REX_X);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD3 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x4 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
}

void sarI_rReg_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2419 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD1 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x7 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void sarI_mem_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2329 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      } else {
        emit_opcode(cbuf, Assembler::REX_XB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
        emit_opcode(cbuf, Assembler::REX_X);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD1 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x7 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
}

void sarI_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2182 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // SAL, SAR, SHR
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    if (dstenc >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
      dstenc -= 8;
    }
    emit_d8(cbuf, (0xC1 /*primary()*/));
    emit_rm(cbuf, 0x3, (0x7 /*secondary()*/), dstenc);
    emit_d8(cbuf, opnd_array(2)->constant());
  
#line 999999
  }
}

void sarI_mem_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2329 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      } else {
        emit_opcode(cbuf, Assembler::REX_XB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
        emit_opcode(cbuf, Assembler::REX_X);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xC1 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x7 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constant());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constant());
    }
  
#line 999999
  }
}

void sarI_rReg_CLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2419 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD3 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x7 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void sarI_mem_CLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2329 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      } else {
        emit_opcode(cbuf, Assembler::REX_XB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
        emit_opcode(cbuf, Assembler::REX_X);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD3 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x7 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
}

void shrI_rReg_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2419 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD1 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x5 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void shrI_mem_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2329 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      } else {
        emit_opcode(cbuf, Assembler::REX_XB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
        emit_opcode(cbuf, Assembler::REX_X);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD1 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x5 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
}

void shrI_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2182 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // SAL, SAR, SHR
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    if (dstenc >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
      dstenc -= 8;
    }
    emit_d8(cbuf, (0xC1 /*primary()*/));
    emit_rm(cbuf, 0x3, (0x5 /*secondary()*/), dstenc);
    emit_d8(cbuf, opnd_array(2)->constant());
  
#line 999999
  }
}

void shrI_mem_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2329 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      } else {
        emit_opcode(cbuf, Assembler::REX_XB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
        emit_opcode(cbuf, Assembler::REX_X);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xC1 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x5 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constant());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constant());
    }
  
#line 999999
  }
}

void shrI_rReg_CLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2419 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD3 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x5 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void shrI_mem_CLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2329 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      } else {
        emit_opcode(cbuf, Assembler::REX_XB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
        emit_opcode(cbuf, Assembler::REX_X);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD3 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x5 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
}

void salL_rReg_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2426 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD1 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x4 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void salL_mem_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2344 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_WB);
      } else {
        emit_opcode(cbuf, Assembler::REX_WXB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WX);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD1 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x4 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
}

void salL_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2195 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // SAL, SAR, SHR
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    if (dstenc < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
      dstenc -= 8;
    }
    emit_d8(cbuf, (0xC1 /*primary()*/));
    emit_rm(cbuf, 0x3, (0x4 /*secondary()*/), dstenc);
    emit_d8(cbuf, opnd_array(2)->constant());
  
#line 999999
  }
}

void salL_mem_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2344 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_WB);
      } else {
        emit_opcode(cbuf, Assembler::REX_WXB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WX);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xC1 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x4 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constant());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constant());
    }
  
#line 999999
  }
}

void salL_rReg_CLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2426 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD3 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x4 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void salL_mem_CLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2344 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_WB);
      } else {
        emit_opcode(cbuf, Assembler::REX_WXB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WX);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD3 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x4 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
}

void sarL_rReg_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2426 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD1 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x7 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void sarL_mem_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2344 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_WB);
      } else {
        emit_opcode(cbuf, Assembler::REX_WXB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WX);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD1 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x7 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
}

void sarL_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2195 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // SAL, SAR, SHR
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    if (dstenc < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
      dstenc -= 8;
    }
    emit_d8(cbuf, (0xC1 /*primary()*/));
    emit_rm(cbuf, 0x3, (0x7 /*secondary()*/), dstenc);
    emit_d8(cbuf, opnd_array(2)->constant());
  
#line 999999
  }
}

void sarL_mem_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2344 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_WB);
      } else {
        emit_opcode(cbuf, Assembler::REX_WXB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WX);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xC1 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x7 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constant());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constant());
    }
  
#line 999999
  }
}

void sarL_rReg_CLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2426 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD3 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x7 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void sarL_mem_CLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2344 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_WB);
      } else {
        emit_opcode(cbuf, Assembler::REX_WXB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WX);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD3 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x7 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
}

void shrL_rReg_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2426 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD1 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x5 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void shrL_mem_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2344 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_WB);
      } else {
        emit_opcode(cbuf, Assembler::REX_WXB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WX);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD1 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x5 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
}

void shrL_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2195 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // SAL, SAR, SHR
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    if (dstenc < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
      dstenc -= 8;
    }
    emit_d8(cbuf, (0xC1 /*primary()*/));
    emit_rm(cbuf, 0x3, (0x5 /*secondary()*/), dstenc);
    emit_d8(cbuf, opnd_array(2)->constant());
  
#line 999999
  }
}

void shrL_mem_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2344 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_WB);
      } else {
        emit_opcode(cbuf, Assembler::REX_WXB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WX);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xC1 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x5 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constant());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constant());
    }
  
#line 999999
  }
}

void shrL_rReg_CLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2426 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD3 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x5 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void shrL_mem_CLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {

#line 2344 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_WB);
      } else {
        emit_opcode(cbuf, Assembler::REX_WXB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WX);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD3 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x5 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
}

void i2bNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// twentyfour
  {

#line 2370 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ >= 4) {
        emit_opcode(cbuf, opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8 ? Assembler::REX : Assembler::REX_B);
      }
    } else {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xBE /*secondary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(0)->reg(ra_,this)/* dst */ & 7, opnd_array(1)->reg(ra_,this,idx1)/* src */ & 7);
  
#line 999999
  }
}

void i2sNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// sixteen
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xBF /*secondary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(0)->reg(ra_,this)/* dst */ & 7, opnd_array(1)->reg(ra_,this,idx1)/* src */ & 7);
  
#line 999999
  }
}

void rolI_rReg_imm1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cr
  {

#line 2419 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD1 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x0 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void rolI_rReg_imm8Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// shift
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  {

#line 2182 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // SAL, SAR, SHR
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    if (dstenc >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
      dstenc -= 8;
    }
    emit_d8(cbuf, (0xC1 /*primary()*/));
    emit_rm(cbuf, 0x3, (0x0 /*secondary()*/), dstenc);
    emit_d8(cbuf, opnd_array(2)->constant());
  
#line 999999
  }
}

void rolI_rReg_CLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// shift
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  {

#line 2419 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD3 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x0 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void rorI_rReg_imm1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cr
  {

#line 2419 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD1 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x1 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void rorI_rReg_imm8Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// shift
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  {

#line 2182 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // SAL, SAR, SHR
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    if (dstenc >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
      dstenc -= 8;
    }
    emit_d8(cbuf, (0xC1 /*primary()*/));
    emit_rm(cbuf, 0x3, (0x1 /*secondary()*/), dstenc);
    emit_d8(cbuf, opnd_array(2)->constant());
  
#line 999999
  }
}

void rorI_rReg_CLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// shift
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  {

#line 2419 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD3 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x1 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void rolL_rReg_imm1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cr
  {

#line 2426 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD1 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x0 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void rolL_rReg_imm8Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// shift
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  {

#line 2195 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // SAL, SAR, SHR
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    if (dstenc < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
      dstenc -= 8;
    }
    emit_d8(cbuf, (0xC1 /*primary()*/));
    emit_rm(cbuf, 0x3, (0x0 /*secondary()*/), dstenc);
    emit_d8(cbuf, opnd_array(2)->constant());
  
#line 999999
  }
}

void rolL_rReg_CLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// shift
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  {

#line 2426 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD3 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x0 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void rorL_rReg_imm1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cr
  {

#line 2426 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD1 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x1 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void rorL_rReg_imm8Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// shift
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  {

#line 2195 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // SAL, SAR, SHR
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    if (dstenc < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
      dstenc -= 8;
    }
    emit_d8(cbuf, (0xC1 /*primary()*/));
    emit_rm(cbuf, 0x3, (0x1 /*secondary()*/), dstenc);
    emit_d8(cbuf, opnd_array(2)->constant());
  
#line 999999
  }
}

void rorL_rReg_CLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// shift
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  {

#line 2426 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xD3 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x1 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void andI_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x23 /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7, opnd_array(2)->reg(ra_,this,idx2)/* src */ & 7);
  
#line 999999
  }
}

void andI_rReg_imm255Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2370 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ >= 4) {
        emit_opcode(cbuf, opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8 ? Assembler::REX : Assembler::REX_B);
      }
    } else {
      if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB6 /*secondary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7, opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void andI2L_rReg_imm255Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  {

#line 2370 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ >= 4) {
        emit_opcode(cbuf, opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8 ? Assembler::REX : Assembler::REX_B);
      }
    } else {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB6 /*secondary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(0)->reg(ra_,this)/* dst */ & 7, opnd_array(1)->reg(ra_,this,idx1)/* src */ & 7);
  
#line 999999
  }
}

void andI_rReg_imm65535Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB7 /*secondary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7, opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void andI2L_rReg_imm65535Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB7 /*secondary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(0)->reg(ra_,this)/* dst */ & 7, opnd_array(1)->reg(ra_,this,idx1)/* src */ & 7);
  
#line 999999
  }
}

void andI_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 1997 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // OpcSEr/m
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    if (dstenc >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
      dstenc -= 8;
    }
    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_opcode(cbuf, (0x81 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x81 /*primary()*/));
    }
    // Emit r/m byte with secondary opcode, after primary opcode.
    emit_rm(cbuf, 0x3, (0x04 /*secondary()*/), dstenc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constant());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constant());
    }
  
#line 999999
  }
}

void andI_rReg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x23 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    int base = opnd_array(2)->base(ra_,this,idx2);
    int index = opnd_array(2)->index(ra_,this,idx2);
    int scale = opnd_array(2)->scale();
    int disp = opnd_array(2)->disp(ra_,this,idx2);
    relocInfo::relocType disp_reloc = opnd_array(2)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void andI_rReg_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x23 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void andI_mem_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x21 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* src */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void andI_mem_rReg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x21 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* src */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void andI_mem_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2329 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      } else {
        emit_opcode(cbuf, Assembler::REX_XB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
        emit_opcode(cbuf, Assembler::REX_X);
      }
    }
  
#line 999999
  }
  {

#line 1985 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_opcode(cbuf, (0x81 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x81 /*primary()*/));
    }
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x4 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constant());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constant());
    }
  
#line 999999
  }
}

void andnI_rReg_rReg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// minus_1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 9047 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ andnl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, Address::make_raw(opnd_array(3)->base(ra_,this,idx3), opnd_array(3)->index(ra_,this,idx3), opnd_array(3)->scale(), opnd_array(3)->disp(ra_,this,idx3), opnd_array(3)->disp_reloc()));
  
#line 999999
  }
}

void andnI_rReg_rReg_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// minus_1
  {
    MacroAssembler _masm(&cbuf);

#line 9047 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ andnl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(2)->as_Register(ra_,this,idx2)/* src1 */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void andnI_rReg_rReg_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// minus_1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 9060 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ andnl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* src2 */);
  
#line 999999
  }
}

void andnI_rReg_rReg_rReg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// minus_1
  {
    MacroAssembler _masm(&cbuf);

#line 9060 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ andnl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(2)->as_Register(ra_,this,idx2)/* src1 */, opnd_array(1)->as_Register(ra_,this,idx1)/* src2 */);
  
#line 999999
  }
}

void blsiI_rReg_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// imm_zero
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 9073 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ blsil(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(2)->as_Register(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void blsiI_rReg_rReg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// imm_zero
  {
    MacroAssembler _masm(&cbuf);

#line 9073 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ blsil(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void blsiI_rReg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// imm_zero
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 9087 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ blsil(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()));
  
#line 999999
  }
}

void blsiI_rReg_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// imm_zero
  {
    MacroAssembler _masm(&cbuf);

#line 9087 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ blsil(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void blsmskI_rReg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// minus_1
  {
    MacroAssembler _masm(&cbuf);

#line 9102 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ blsmskl(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void blsmskI_rReg_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// minus_1
  {
    MacroAssembler _masm(&cbuf);

#line 9102 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ blsmskl(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void blsmskI_rReg_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// minus_1
  {
    MacroAssembler _masm(&cbuf);

#line 9116 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ blsmskl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void blsmskI_rReg_rReg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// minus_1
  {
    MacroAssembler _masm(&cbuf);

#line 9116 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ blsmskl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void blsrI_rReg_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// minus_1
  {
    MacroAssembler _masm(&cbuf);

#line 9131 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ blsrl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void blsrI_rReg_rReg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// minus_1
  {
    MacroAssembler _masm(&cbuf);

#line 9131 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ blsrl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void blsrI_rReg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// minus_1
  {
    MacroAssembler _masm(&cbuf);

#line 9147 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ blsrl(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void blsrI_rReg_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// minus_1
  {
    MacroAssembler _masm(&cbuf);

#line 9147 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ blsrl(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void orI_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0B /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7, opnd_array(2)->reg(ra_,this,idx2)/* src */ & 7);
  
#line 999999
  }
}

void orI_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 1997 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // OpcSEr/m
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    if (dstenc >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
      dstenc -= 8;
    }
    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_opcode(cbuf, (0x81 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x81 /*primary()*/));
    }
    // Emit r/m byte with secondary opcode, after primary opcode.
    emit_rm(cbuf, 0x3, (0x01 /*secondary()*/), dstenc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constant());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constant());
    }
  
#line 999999
  }
}

void orI_rReg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0B /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    int base = opnd_array(2)->base(ra_,this,idx2);
    int index = opnd_array(2)->index(ra_,this,idx2);
    int scale = opnd_array(2)->scale();
    int disp = opnd_array(2)->disp(ra_,this,idx2);
    relocInfo::relocType disp_reloc = opnd_array(2)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void orI_rReg_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0B /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void orI_mem_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x09 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* src */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void orI_mem_rReg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x09 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* src */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void orI_mem_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2329 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      } else {
        emit_opcode(cbuf, Assembler::REX_XB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
        emit_opcode(cbuf, Assembler::REX_X);
      }
    }
  
#line 999999
  }
  {

#line 1985 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_opcode(cbuf, (0x81 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x81 /*primary()*/));
    }
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x1 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constant());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constant());
    }
  
#line 999999
  }
}

void xorI_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x33 /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7, opnd_array(2)->reg(ra_,this,idx2)/* src */ & 7);
  
#line 999999
  }
}

void xorI_rReg_im1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// imm
  {
    MacroAssembler _masm(&cbuf);

#line 9237 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

     __ notl(opnd_array(1)->as_Register(ra_,this,idx1)/* dst */);
  
#line 999999
  }
}

void xorI_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 1997 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // OpcSEr/m
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    if (dstenc >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
      dstenc -= 8;
    }
    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_opcode(cbuf, (0x81 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x81 /*primary()*/));
    }
    // Emit r/m byte with secondary opcode, after primary opcode.
    emit_rm(cbuf, 0x3, (0x06 /*secondary()*/), dstenc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constant());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constant());
    }
  
#line 999999
  }
}

void xorI_rReg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x33 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    int base = opnd_array(2)->base(ra_,this,idx2);
    int index = opnd_array(2)->index(ra_,this,idx2);
    int scale = opnd_array(2)->scale();
    int disp = opnd_array(2)->disp(ra_,this,idx2);
    relocInfo::relocType disp_reloc = opnd_array(2)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void xorI_rReg_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x33 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void xorI_mem_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x31 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* src */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void xorI_mem_rReg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x31 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* src */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void xorI_mem_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2329 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      } else {
        emit_opcode(cbuf, Assembler::REX_XB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
        emit_opcode(cbuf, Assembler::REX_X);
      }
    }
  
#line 999999
  }
  {

#line 1985 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_opcode(cbuf, (0x81 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x81 /*primary()*/));
    }
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x6 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constant());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constant());
    }
  
#line 999999
  }
}

void andL_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x23 /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7, opnd_array(2)->reg(ra_,this,idx2)/* src */ & 7);
  
#line 999999
  }
}

void andL_rReg_imm255Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB6 /*secondary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7, opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void andL_rReg_imm65535Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB7 /*secondary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7, opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7);
  
#line 999999
  }
}

void andL_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2017 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // OpcSEr/m
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    if (dstenc < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
      dstenc -= 8;
    }
    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_opcode(cbuf, (0x81 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x81 /*primary()*/));
    }
    // Emit r/m byte with secondary opcode, after primary opcode.
    emit_rm(cbuf, 0x3, (0x04 /*secondary()*/), dstenc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constantL());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constantL());
    }
  
#line 999999
  }
}

void andL_rReg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x23 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    int base = opnd_array(2)->base(ra_,this,idx2);
    int index = opnd_array(2)->index(ra_,this,idx2);
    int scale = opnd_array(2)->scale();
    int disp = opnd_array(2)->disp(ra_,this,idx2);
    relocInfo::relocType disp_reloc = opnd_array(2)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void andL_rReg_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x23 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void andL_mem_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x21 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* src */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void andL_mem_rReg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x21 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* src */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void andL_mem_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2344 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_WB);
      } else {
        emit_opcode(cbuf, Assembler::REX_WXB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WX);
      }
    }
  
#line 999999
  }
  {

#line 1985 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_opcode(cbuf, (0x81 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x81 /*primary()*/));
    }
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x4 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constantL());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constantL());
    }
  
#line 999999
  }
}

void andnL_rReg_rReg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// minus_1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 9394 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ andnq(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, Address::make_raw(opnd_array(3)->base(ra_,this,idx3), opnd_array(3)->index(ra_,this,idx3), opnd_array(3)->scale(), opnd_array(3)->disp(ra_,this,idx3), opnd_array(3)->disp_reloc()));
  
#line 999999
  }
}

void andnL_rReg_rReg_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// minus_1
  {
    MacroAssembler _masm(&cbuf);

#line 9394 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ andnq(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(2)->as_Register(ra_,this,idx2)/* src1 */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void andnL_rReg_rReg_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// minus_1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 9407 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

  __ andnq(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* src2 */);
  
#line 999999
  }
}

void andnL_rReg_rReg_rReg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// minus_1
  {
    MacroAssembler _masm(&cbuf);

#line 9407 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

  __ andnq(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(2)->as_Register(ra_,this,idx2)/* src1 */, opnd_array(1)->as_Register(ra_,this,idx1)/* src2 */);
  
#line 999999
  }
}

void blsiL_rReg_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// imm_zero
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 9420 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ blsiq(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(2)->as_Register(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void blsiL_rReg_rReg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// imm_zero
  {
    MacroAssembler _masm(&cbuf);

#line 9420 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ blsiq(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void blsiL_rReg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// imm_zero
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 9434 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ blsiq(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()));
  
#line 999999
  }
}

void blsiL_rReg_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// imm_zero
  {
    MacroAssembler _masm(&cbuf);

#line 9434 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ blsiq(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void blsmskL_rReg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// minus_1
  {
    MacroAssembler _masm(&cbuf);

#line 9449 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ blsmskq(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void blsmskL_rReg_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// minus_1
  {
    MacroAssembler _masm(&cbuf);

#line 9449 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ blsmskq(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void blsmskL_rReg_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// minus_1
  {
    MacroAssembler _masm(&cbuf);

#line 9463 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ blsmskq(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void blsmskL_rReg_rReg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// minus_1
  {
    MacroAssembler _masm(&cbuf);

#line 9463 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ blsmskq(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void blsrL_rReg_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// minus_1
  {
    MacroAssembler _masm(&cbuf);

#line 9478 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ blsrq(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void blsrL_rReg_rReg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// minus_1
  {
    MacroAssembler _masm(&cbuf);

#line 9478 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ blsrq(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void blsrL_rReg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// minus_1
  {
    MacroAssembler _masm(&cbuf);

#line 9494 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ blsrq(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void blsrL_rReg_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// minus_1
  {
    MacroAssembler _masm(&cbuf);

#line 9494 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ blsrq(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void orL_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0B /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7, opnd_array(2)->reg(ra_,this,idx2)/* src */ & 7);
  
#line 999999
  }
}

void orL_rReg_castP2XNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0B /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7, opnd_array(2)->reg(ra_,this,idx2)/* src */ & 7);
  
#line 999999
  }
}

void orL_rReg_castP2X_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* dst */ < 8) {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0B /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(2)->reg(ra_,this,idx2)/* dst */ & 7, opnd_array(1)->reg(ra_,this,idx1)/* src */ & 7);
  
#line 999999
  }
}

void orL_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2017 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // OpcSEr/m
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    if (dstenc < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
      dstenc -= 8;
    }
    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_opcode(cbuf, (0x81 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x81 /*primary()*/));
    }
    // Emit r/m byte with secondary opcode, after primary opcode.
    emit_rm(cbuf, 0x3, (0x01 /*secondary()*/), dstenc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constantL());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constantL());
    }
  
#line 999999
  }
}

void orL_rReg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0B /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    int base = opnd_array(2)->base(ra_,this,idx2);
    int index = opnd_array(2)->index(ra_,this,idx2);
    int scale = opnd_array(2)->scale();
    int disp = opnd_array(2)->disp(ra_,this,idx2);
    relocInfo::relocType disp_reloc = opnd_array(2)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void orL_rReg_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0B /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void orL_mem_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x09 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* src */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void orL_mem_rReg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x09 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* src */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void orL_mem_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2344 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_WB);
      } else {
        emit_opcode(cbuf, Assembler::REX_WXB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WX);
      }
    }
  
#line 999999
  }
  {

#line 1985 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_opcode(cbuf, (0x81 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x81 /*primary()*/));
    }
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x1 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constantL());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constantL());
    }
  
#line 999999
  }
}

void xorL_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x33 /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7, opnd_array(2)->reg(ra_,this,idx2)/* src */ & 7);
  
#line 999999
  }
}

void xorL_rReg_im1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// imm
  {
    MacroAssembler _masm(&cbuf);

#line 9596 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

     __ notq(opnd_array(1)->as_Register(ra_,this,idx1)/* dst */);
  
#line 999999
  }
}

void xorL_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2017 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // OpcSEr/m
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    if (dstenc < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
      dstenc -= 8;
    }
    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_opcode(cbuf, (0x81 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x81 /*primary()*/));
    }
    // Emit r/m byte with secondary opcode, after primary opcode.
    emit_rm(cbuf, 0x3, (0x06 /*secondary()*/), dstenc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constantL());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constantL());
    }
  
#line 999999
  }
}

void xorL_rReg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x33 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(1)->reg(ra_,this,idx1)/* dst */;
    int base = opnd_array(2)->base(ra_,this,idx2);
    int index = opnd_array(2)->index(ra_,this,idx2);
    int scale = opnd_array(2)->scale();
    int disp = opnd_array(2)->disp(ra_,this,idx2);
    relocInfo::relocType disp_reloc = opnd_array(2)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void xorL_rReg_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* dst */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x33 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* dst */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void xorL_mem_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x31 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* src */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void xorL_mem_rReg_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x31 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* src */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void xorL_mem_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {

#line 2344 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_WB);
      } else {
        emit_opcode(cbuf, Assembler::REX_WXB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WX);
      }
    }
  
#line 999999
  }
  {

#line 1985 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_opcode(cbuf, (0x81 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x81 /*primary()*/));
    }
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x6 /*secondary()*/);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constantL());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constantL());
    }
  
#line 999999
  }
}

void convI2BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1843 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x85));
    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* src */ & 7, opnd_array(1)->reg(ra_,this,idx1)/* src */ & 7);
  
#line 999999
  }
  {

#line 2614 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int dstenc = opnd_array(0)->reg(ra_,this)/* dst */;
    if (dstenc >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
      dstenc -= 8;
    } else if (dstenc >= 4) {
      emit_opcode(cbuf, Assembler::REX);
    }
    // SETNZ $dst
    emit_opcode(cbuf, 0x0F);
    emit_opcode(cbuf, 0x95);
    emit_rm(cbuf, 0x3, 0x0, dstenc);
  
#line 999999
  }
  {

#line 2370 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(0)->reg(ra_,this)/* dst */ >= 4) {
        emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* dst */ < 8 ? Assembler::REX : Assembler::REX_B);
      }
    } else {
      if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB6));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(0)->reg(ra_,this)/* dst */ & 7, opnd_array(0)->reg(ra_,this)/* dst */ & 7);
  
#line 999999
  }
}

void convP2BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 1843 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x85));
    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* src */ & 7, opnd_array(1)->reg(ra_,this,idx1)/* src */ & 7);
  
#line 999999
  }
  {

#line 2614 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int dstenc = opnd_array(0)->reg(ra_,this)/* dst */;
    if (dstenc >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
      dstenc -= 8;
    } else if (dstenc >= 4) {
      emit_opcode(cbuf, Assembler::REX);
    }
    // SETNZ $dst
    emit_opcode(cbuf, 0x0F);
    emit_opcode(cbuf, 0x95);
    emit_rm(cbuf, 0x3, 0x0, dstenc);
  
#line 999999
  }
  {

#line 2370 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(0)->reg(ra_,this)/* dst */ >= 4) {
        emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* dst */ < 8 ? Assembler::REX : Assembler::REX_B);
      }
    } else {
      if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB6));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(0)->reg(ra_,this)/* dst */ & 7, opnd_array(0)->reg(ra_,this)/* dst */ & 7);
  
#line 999999
  }
}

void cmpLTMaskNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// p
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// q
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* p */ < 8) {
      if (opnd_array(2)->reg(ra_,this,idx2)/* q */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(2)->reg(ra_,this,idx2)/* q */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1843 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x3B));
    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* p */ & 7, opnd_array(2)->reg(ra_,this,idx2)/* q */ & 7);
  
#line 999999
  }
  {

#line 2599 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int dstenc = opnd_array(0)->reg(ra_,this)/* dst */;
    if (dstenc >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
      dstenc -= 8;
    } else if (dstenc >= 4) {
      emit_opcode(cbuf, Assembler::REX);
    }
    // SETLT $dst
    emit_opcode(cbuf, 0x0F);
    emit_opcode(cbuf, 0x9C);
    emit_rm(cbuf, 0x3, 0x0, dstenc);
  
#line 999999
  }
  {

#line 2370 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
      if (opnd_array(0)->reg(ra_,this)/* dst */ >= 4) {
        emit_opcode(cbuf, opnd_array(0)->reg(ra_,this)/* dst */ < 8 ? Assembler::REX : Assembler::REX_B);
      }
    } else {
      if (opnd_array(0)->reg(ra_,this)/* dst */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F));
  
#line 999999
  }
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xB6));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(0)->reg(ra_,this)/* dst */ & 7, opnd_array(0)->reg(ra_,this)/* dst */ & 7);
  
#line 999999
  }
  {

#line 2573 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int dstenc = opnd_array(0)->reg(ra_,this)/* dst */;
    if (dstenc >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
      dstenc -= 8;
    }
    // NEG $dst
    emit_opcode(cbuf, 0xF7);
    emit_rm(cbuf, 0x3, 0x03, dstenc);
  
#line 999999
  }
}

void cmpLTMask0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 9711 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

  __ sarl(opnd_array(1)->as_Register(ra_,this,idx1)/* dst */, 31);
  
#line 999999
  }
}

void cadd_cmpLTMaskNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// p
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// q
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// y
  {
    MacroAssembler _masm(&cbuf);

#line 9727 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Register Rp = opnd_array(1)->as_Register(ra_,this,idx1)/* p */;
    Register Rq = opnd_array(2)->as_Register(ra_,this,idx2)/* q */;
    Register Ry = opnd_array(3)->as_Register(ra_,this,idx3)/* y */;
    Label done;
    __ subl(Rp, Rq);
    __ jccb(Assembler::greaterEqual, done);
    __ addl(Rp, Ry);
    __ bind(done);
  
#line 999999
  }
}

void cadd_cmpLTMask_1Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// p
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// q
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// y
  {
    MacroAssembler _masm(&cbuf);

#line 9727 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Register Rp = opnd_array(1)->as_Register(ra_,this,idx1)/* p */;
    Register Rq = opnd_array(2)->as_Register(ra_,this,idx2)/* q */;
    Register Ry = opnd_array(3)->as_Register(ra_,this,idx3)/* y */;
    Label done;
    __ subl(Rp, Rq);
    __ jccb(Assembler::greaterEqual, done);
    __ addl(Rp, Ry);
    __ bind(done);
  
#line 999999
  }
}

void cadd_cmpLTMask_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// y
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// p
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// q
  {
    MacroAssembler _masm(&cbuf);

#line 9727 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Register Rp = opnd_array(2)->as_Register(ra_,this,idx2)/* p */;
    Register Rq = opnd_array(3)->as_Register(ra_,this,idx3)/* q */;
    Register Ry = opnd_array(1)->as_Register(ra_,this,idx1)/* y */;
    Label done;
    __ subl(Rp, Rq);
    __ jccb(Assembler::greaterEqual, done);
    __ addl(Rp, Ry);
    __ bind(done);
  
#line 999999
  }
}

void cadd_cmpLTMask_2Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// p
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// q
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// y
  {
    MacroAssembler _masm(&cbuf);

#line 9727 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Register Rp = opnd_array(1)->as_Register(ra_,this,idx1)/* p */;
    Register Rq = opnd_array(2)->as_Register(ra_,this,idx2)/* q */;
    Register Ry = opnd_array(3)->as_Register(ra_,this,idx3)/* y */;
    Label done;
    __ subl(Rp, Rq);
    __ jccb(Assembler::greaterEqual, done);
    __ addl(Rp, Ry);
    __ bind(done);
  
#line 999999
  }
}

void and_cmpLTMaskNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// p
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// q
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// y
  {
    MacroAssembler _masm(&cbuf);

#line 9752 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Register Rp = opnd_array(1)->as_Register(ra_,this,idx1)/* p */;
    Register Rq = opnd_array(2)->as_Register(ra_,this,idx2)/* q */;
    Register Ry = opnd_array(3)->as_Register(ra_,this,idx3)/* y */;
    Label done;
    __ cmpl(Rp, Rq);
    __ jccb(Assembler::less, done);
    __ xorl(Ry, Ry);
    __ bind(done);
  
#line 999999
  }
}

void and_cmpLTMask_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// y
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// p
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// q
  {
    MacroAssembler _masm(&cbuf);

#line 9752 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Register Rp = opnd_array(2)->as_Register(ra_,this,idx2)/* p */;
    Register Rq = opnd_array(3)->as_Register(ra_,this,idx3)/* q */;
    Register Ry = opnd_array(1)->as_Register(ra_,this,idx1)/* y */;
    Label done;
    __ cmpl(Rp, Rq);
    __ jccb(Assembler::less, done);
    __ xorl(Ry, Ry);
    __ bind(done);
  
#line 999999
  }
}

void cmpF_cc_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 9779 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ ucomiss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    emit_cmpfp_fixup(_masm);
  
#line 999999
  }
}

void cmpF_cc_reg_CFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 9791 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ ucomiss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
  
#line 999999
  }
}

void cmpF_cc_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 9808 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ ucomiss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()));
    emit_cmpfp_fixup(_masm);
  
#line 999999
  }
}

void cmpF_cc_memCFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 9820 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ ucomiss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()));
  
#line 999999
  }
}

void cmpF_cc_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 9836 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ ucomiss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    emit_cmpfp_fixup(_masm);
  
#line 999999
  }
}

void cmpF_cc_immNode::eval_constant(Compile* C) {
  {

#line 9837 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"
    _constant = C->constant_table().add(this, opnd_array(2));
#line 999999
  }
}
void cmpF_cc_immCFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 9847 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ ucomiss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void cmpF_cc_immCFNode::eval_constant(Compile* C) {
  {

#line 9848 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"
    _constant = C->constant_table().add(this, opnd_array(2));
#line 999999
  }
}
void cmpD_cc_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 9864 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ ucomisd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    emit_cmpfp_fixup(_masm);
  
#line 999999
  }
}

void cmpD_cc_reg_CFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 9876 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ ucomisd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
  
#line 999999
  }
}

void cmpD_cc_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 9893 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ ucomisd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()));
    emit_cmpfp_fixup(_masm);
  
#line 999999
  }
}

void cmpD_cc_memCFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 9905 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ ucomisd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()));
  
#line 999999
  }
}

void cmpD_cc_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 9921 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ ucomisd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    emit_cmpfp_fixup(_masm);
  
#line 999999
  }
}

void cmpD_cc_immNode::eval_constant(Compile* C) {
  {

#line 9922 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"
    _constant = C->constant_table().add(this, opnd_array(2));
#line 999999
  }
}
void cmpD_cc_immCFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 9932 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ ucomisd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void cmpD_cc_immCFNode::eval_constant(Compile* C) {
  {

#line 9933 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"
    _constant = C->constant_table().add(this, opnd_array(2));
#line 999999
  }
}
void cmpF_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 9952 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ ucomiss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    emit_cmpfp3(_masm, opnd_array(0)->as_Register(ra_,this)/* dst */);
  
#line 999999
  }
}

void cmpF_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 9973 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ ucomiss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()));
    emit_cmpfp3(_masm, opnd_array(0)->as_Register(ra_,this)/* dst */);
  
#line 999999
  }
}

void cmpF_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 9993 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ ucomiss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    emit_cmpfp3(_masm, opnd_array(0)->as_Register(ra_,this)/* dst */);
  
#line 999999
  }
}

void cmpF_immNode::eval_constant(Compile* C) {
  {

#line 9994 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"
    _constant = C->constant_table().add(this, opnd_array(2));
#line 999999
  }
}
void cmpD_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 10014 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ ucomisd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    emit_cmpfp3(_masm, opnd_array(0)->as_Register(ra_,this)/* dst */);
  
#line 999999
  }
}

void cmpD_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 10035 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ ucomisd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()));
    emit_cmpfp3(_masm, opnd_array(0)->as_Register(ra_,this)/* dst */);
  
#line 999999
  }
}

void cmpD_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 10055 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ ucomisd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    emit_cmpfp3(_masm, opnd_array(0)->as_Register(ra_,this)/* dst */);
  
#line 999999
  }
}

void cmpD_immNode::eval_constant(Compile* C) {
  {

#line 10056 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"
    _constant = C->constant_table().add(this, opnd_array(2));
#line 999999
  }
}
void roundFloat_nopNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  // User did not define which encode class to use.
}

void roundDouble_nopNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  // User did not define which encode class to use.
}

void convF2D_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10087 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ cvtss2sd (opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void convF2D_reg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10098 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ cvtss2sd (opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void convD2F_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10109 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ cvtsd2ss (opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void convD2F_reg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10120 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ cvtsd2ss (opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void convF2I_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10140 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label done;
    __ cvttss2sil(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */);
    __ cmpl(opnd_array(0)->as_Register(ra_,this)/* dst */, 0x80000000);
    __ jccb(Assembler::notEqual, done);
    __ subptr(rsp, 8);
    __ movflt(Address(rsp, 0), opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */);
    __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, StubRoutines::x86::f2i_fixup())));
    __ pop(opnd_array(0)->as_Register(ra_,this)/* dst */);
    __ bind(done);
  
#line 999999
  }
}

void convF2L_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10167 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label done;
    __ cvttss2siq(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */);
    __ cmp64(opnd_array(0)->as_Register(ra_,this)/* dst */,
             ExternalAddress((address) StubRoutines::x86::double_sign_flip()));
    __ jccb(Assembler::notEqual, done);
    __ subptr(rsp, 8);
    __ movflt(Address(rsp, 0), opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */);
    __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, StubRoutines::x86::f2l_fixup())));
    __ pop(opnd_array(0)->as_Register(ra_,this)/* dst */);
    __ bind(done);
  
#line 999999
  }
}

void convD2I_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10195 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label done;
    __ cvttsd2sil(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */);
    __ cmpl(opnd_array(0)->as_Register(ra_,this)/* dst */, 0x80000000);
    __ jccb(Assembler::notEqual, done);
    __ subptr(rsp, 8);
    __ movdbl(Address(rsp, 0), opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */);
    __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, StubRoutines::x86::d2i_fixup())));
    __ pop(opnd_array(0)->as_Register(ra_,this)/* dst */);
    __ bind(done);
  
#line 999999
  }
}

void convD2L_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10222 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label done;
    __ cvttsd2siq(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */);
    __ cmp64(opnd_array(0)->as_Register(ra_,this)/* dst */,
             ExternalAddress((address) StubRoutines::x86::double_sign_flip()));
    __ jccb(Assembler::notEqual, done);
    __ subptr(rsp, 8);
    __ movdbl(Address(rsp, 0), opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */);
    __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, StubRoutines::x86::d2l_fixup())));
    __ pop(opnd_array(0)->as_Register(ra_,this)/* dst */);
    __ bind(done);
  
#line 999999
  }
}

void convI2F_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10243 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ cvtsi2ssl (opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void convI2F_reg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10254 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ cvtsi2ssl (opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void convI2D_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10266 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ cvtsi2sdl (opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void convI2D_reg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10277 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ cvtsi2sdl (opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void convXI2F_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10290 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movdl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
    __ cvtdq2ps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void convXI2D_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10304 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movdl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
    __ cvtdq2pd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void convL2F_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10316 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ cvtsi2ssq (opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void convL2F_reg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10327 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ cvtsi2ssq (opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void convL2D_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10338 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ cvtsi2sdq (opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void convL2D_reg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10349 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ cvtsi2sdq (opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void convI2L_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10361 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movslq(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void convI2L_reg_reg_zexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  {
    MacroAssembler _masm(&cbuf);

#line 10390 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(0)->reg(ra_,this)/* dst */!= opnd_array(1)->reg(ra_,this,idx1)/* src */) {
      __ movl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
    }
  
#line 999999
  }
}

void convI2L_reg_mem_zexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  {
    MacroAssembler _masm(&cbuf);

#line 10404 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movl(opnd_array(0)->as_Register(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void zerox_long_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mask
  {
    MacroAssembler _masm(&cbuf);

#line 10415 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void convL2I_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10426 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void MoveF2I_stack_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10439 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movl(opnd_array(0)->as_Register(ra_,this)/* dst */, Address(rsp, opnd_array(1)->disp(ra_,this,idx1)));
  
#line 999999
  }
}

void MoveI2F_stack_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10451 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movflt(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address(rsp, opnd_array(1)->disp(ra_,this,idx1)));
  
#line 999999
  }
}

void MoveD2L_stack_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10463 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movq(opnd_array(0)->as_Register(ra_,this)/* dst */, Address(rsp, opnd_array(1)->disp(ra_,this,idx1)));
  
#line 999999
  }
}

void MoveL2D_stack_reg_partialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10476 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movdbl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address(rsp, opnd_array(1)->disp(ra_,this,idx1)));
  
#line 999999
  }
}

void MoveL2D_stack_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10489 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movdbl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address(rsp, opnd_array(1)->disp(ra_,this,idx1)));
  
#line 999999
  }
}

void MoveF2I_reg_stackNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10502 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movflt(Address(rsp, opnd_array(0)->disp(ra_,this,0)), opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void MoveI2F_reg_stackNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10514 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movl(Address(rsp, opnd_array(0)->disp(ra_,this,0)), opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void MoveD2L_reg_stackNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10526 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movdbl(Address(rsp, opnd_array(0)->disp(ra_,this,0)), opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void MoveL2D_reg_stackNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10538 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movq(Address(rsp, opnd_array(0)->disp(ra_,this,0)), opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void MoveF2I_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10549 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movdl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void MoveD2L_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10560 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movdq(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void MoveI2F_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10571 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ movdl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void MoveL2D_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10582 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

     __ movdq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void rep_stosNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// cnt
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// base
  {
    MacroAssembler _masm(&cbuf);

#line 10617 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ clear_mem(opnd_array(2)->as_Register(ra_,this,idx2)/* base */, opnd_array(1)->as_Register(ra_,this,idx1)/* cnt */, as_Register(RAX_enc), false);
  
#line 999999
  }
}

void rep_stos_largeNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// cnt
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// base
  {
    MacroAssembler _masm(&cbuf);

#line 10639 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ clear_mem(opnd_array(2)->as_Register(ra_,this,idx2)/* base */, opnd_array(1)->as_Register(ra_,this,idx1)/* cnt */, as_Register(RAX_enc), true);
  
#line 999999
  }
}

void string_compareLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// str2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cnt2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp1
  {
    MacroAssembler _masm(&cbuf);

#line 10653 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ string_compare(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                      opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, opnd_array(4)->as_Register(ra_,this,idx4)/* cnt2 */, opnd_array(0)->as_Register(ra_,this)/* result */,
                      opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* tmp1 */, StrIntrinsicNode::LL);
  
#line 999999
  }
}

void string_compareUNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// str2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cnt2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp1
  {
    MacroAssembler _masm(&cbuf);

#line 10669 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ string_compare(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                      opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, opnd_array(4)->as_Register(ra_,this,idx4)/* cnt2 */, opnd_array(0)->as_Register(ra_,this)/* result */,
                      opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* tmp1 */, StrIntrinsicNode::UU);
  
#line 999999
  }
}

void string_compareLUNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// str2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cnt2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp1
  {
    MacroAssembler _masm(&cbuf);

#line 10685 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ string_compare(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                      opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, opnd_array(4)->as_Register(ra_,this,idx4)/* cnt2 */, opnd_array(0)->as_Register(ra_,this)/* result */,
                      opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* tmp1 */, StrIntrinsicNode::LU);
  
#line 999999
  }
}

void string_compareULNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// str2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cnt2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp1
  {
    MacroAssembler _masm(&cbuf);

#line 10701 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ string_compare(opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */, opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */,
                      opnd_array(4)->as_Register(ra_,this,idx4)/* cnt2 */, opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, opnd_array(0)->as_Register(ra_,this)/* result */,
                      opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* tmp1 */, StrIntrinsicNode::UL);
  
#line 999999
  }
}

void string_indexof_conLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// str2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// int_cnt2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// vec
  {
    MacroAssembler _masm(&cbuf);

#line 10718 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int icnt2 = (int)opnd_array(4)->constant();
    if (icnt2 >= 16) {
      // IndexOf for constant substrings with size >= 16 elements
      // which don't need to be loaded through stack.
      __ string_indexofC8(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                          opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, as_Register(RAX_enc),
                          icnt2, opnd_array(0)->as_Register(ra_,this)/* result */,
                          opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* vec */, as_Register(RCX_enc), StrIntrinsicNode::LL);
    } else {
      // Small strings are loaded through stack if they cross page boundary.
      __ string_indexof(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                        opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, as_Register(RAX_enc),
                        icnt2, opnd_array(0)->as_Register(ra_,this)/* result */,
                        opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* vec */, as_Register(RCX_enc), StrIntrinsicNode::LL);
    }
  
#line 999999
  }
}

void string_indexof_conUNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// str2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// int_cnt2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// vec
  {
    MacroAssembler _masm(&cbuf);

#line 10747 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int icnt2 = (int)opnd_array(4)->constant();
    if (icnt2 >= 8) {
      // IndexOf for constant substrings with size >= 8 elements
      // which don't need to be loaded through stack.
      __ string_indexofC8(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                          opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, as_Register(RAX_enc),
                          icnt2, opnd_array(0)->as_Register(ra_,this)/* result */,
                          opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* vec */, as_Register(RCX_enc), StrIntrinsicNode::UU);
    } else {
      // Small strings are loaded through stack if they cross page boundary.
      __ string_indexof(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                        opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, as_Register(RAX_enc),
                        icnt2, opnd_array(0)->as_Register(ra_,this)/* result */,
                        opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* vec */, as_Register(RCX_enc), StrIntrinsicNode::UU);
    }
  
#line 999999
  }
}

void string_indexof_conULNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// str2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// int_cnt2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// vec
  {
    MacroAssembler _masm(&cbuf);

#line 10776 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int icnt2 = (int)opnd_array(4)->constant();
    if (icnt2 >= 8) {
      // IndexOf for constant substrings with size >= 8 elements
      // which don't need to be loaded through stack.
      __ string_indexofC8(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                          opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, as_Register(RAX_enc),
                          icnt2, opnd_array(0)->as_Register(ra_,this)/* result */,
                          opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* vec */, as_Register(RCX_enc), StrIntrinsicNode::UL);
    } else {
      // Small strings are loaded through stack if they cross page boundary.
      __ string_indexof(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                        opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, as_Register(RAX_enc),
                        icnt2, opnd_array(0)->as_Register(ra_,this)/* result */,
                        opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* vec */, as_Register(RCX_enc), StrIntrinsicNode::UL);
    }
  
#line 999999
  }
}

void string_indexofLNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// str2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cnt2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// vec
  {
    MacroAssembler _masm(&cbuf);

#line 10804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ string_indexof(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                      opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, opnd_array(4)->as_Register(ra_,this,idx4)/* cnt2 */,
                      (-1), opnd_array(0)->as_Register(ra_,this)/* result */,
                      opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* vec */, as_Register(RCX_enc), StrIntrinsicNode::LL);
  
#line 999999
  }
}

void string_indexofUNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// str2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cnt2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// vec
  {
    MacroAssembler _masm(&cbuf);

#line 10821 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ string_indexof(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                      opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, opnd_array(4)->as_Register(ra_,this,idx4)/* cnt2 */,
                      (-1), opnd_array(0)->as_Register(ra_,this)/* result */,
                      opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* vec */, as_Register(RCX_enc), StrIntrinsicNode::UU);
  
#line 999999
  }
}

void string_indexofULNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// str2
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// cnt2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// vec
  {
    MacroAssembler _masm(&cbuf);

#line 10838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ string_indexof(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* str2 */,
                      opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, opnd_array(4)->as_Register(ra_,this,idx4)/* cnt2 */,
                      (-1), opnd_array(0)->as_Register(ra_,this)/* result */,
                      opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* vec */, as_Register(RCX_enc), StrIntrinsicNode::UL);
  
#line 999999
  }
}

void string_indexofU_charNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cnt1
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// ch
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// vec1
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// vec2
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// vec3
  unsigned idx7 = idx6 + opnd_array(6)->num_edges(); 	// tmp
  {
    MacroAssembler _masm(&cbuf);

#line 10854 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ string_indexof_char(opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* cnt1 */, opnd_array(3)->as_Register(ra_,this,idx3)/* ch */, opnd_array(0)->as_Register(ra_,this)/* result */,
                           opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* vec1 */, opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* vec2 */, opnd_array(6)->as_XMMRegister(ra_,this,idx6)/* vec3 */, opnd_array(7)->as_Register(ra_,this,idx7)/* tmp */);
  
#line 999999
  }
}

void string_equalsNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// str1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// str2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// cnt
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp1
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 10869 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ arrays_equals(false, opnd_array(1)->as_Register(ra_,this,idx1)/* str1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* str2 */,
                     opnd_array(3)->as_Register(ra_,this,idx3)/* cnt */, opnd_array(0)->as_Register(ra_,this)/* result */, as_Register(RBX_enc),
                     opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp1 */, opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* tmp2 */, false /* char */);
  
#line 999999
  }
}

void array_equalsBNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// ary1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// ary2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 10886 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ arrays_equals(true, opnd_array(1)->as_Register(ra_,this,idx1)/* ary1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* ary2 */,
                     as_Register(RCX_enc), opnd_array(0)->as_Register(ra_,this)/* result */, as_Register(RBX_enc),
                     opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp1 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, false /* char */);
  
#line 999999
  }
}

void array_equalsCNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// ary1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// ary2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 10902 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ arrays_equals(true, opnd_array(1)->as_Register(ra_,this,idx1)/* ary1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* ary2 */,
                     as_Register(RCX_enc), opnd_array(0)->as_Register(ra_,this)/* result */, as_Register(RBX_enc),
                     opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp1 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, true /* char */);
  
#line 999999
  }
}

void has_negativesNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// ary1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// len
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 10917 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ has_negatives(opnd_array(1)->as_Register(ra_,this,idx1)/* ary1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* len */,
                     opnd_array(0)->as_Register(ra_,this)/* result */, as_Register(RBX_enc),
                     opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp1 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
  
#line 999999
  }
}

void string_compressNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// len
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp1
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp2
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// tmp3
  unsigned idx7 = idx6 + opnd_array(6)->num_edges(); 	// tmp4
  {
    MacroAssembler _masm(&cbuf);

#line 10932 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ char_array_compress(opnd_array(1)->as_Register(ra_,this,idx1)/* src */, opnd_array(2)->as_Register(ra_,this,idx2)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* len */,
                           opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp1 */, opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* tmp2 */, opnd_array(6)->as_XMMRegister(ra_,this,idx6)/* tmp3 */,
                           opnd_array(7)->as_XMMRegister(ra_,this,idx7)/* tmp4 */, as_Register(RCX_enc), opnd_array(0)->as_Register(ra_,this)/* result */);
  
#line 999999
  }
}

void string_inflateNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// len
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp1
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 10947 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ byte_array_inflate(opnd_array(1)->as_Register(ra_,this,idx1)/* src */, opnd_array(2)->as_Register(ra_,this,idx2)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* len */,
                          opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp1 */, opnd_array(5)->as_Register(ra_,this,idx5)/* tmp2 */);
  
#line 999999
  }
}

void encode_iso_arrayNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// len
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp1
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp2
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// tmp3
  unsigned idx7 = idx6 + opnd_array(6)->num_edges(); 	// tmp4
  {
    MacroAssembler _masm(&cbuf);

#line 10962 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ encode_iso_array(opnd_array(1)->as_Register(ra_,this,idx1)/* src */, opnd_array(2)->as_Register(ra_,this,idx2)/* dst */, opnd_array(3)->as_Register(ra_,this,idx3)/* len */,
                        opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp1 */, opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* tmp2 */, opnd_array(6)->as_XMMRegister(ra_,this,idx6)/* tmp3 */,
                        opnd_array(7)->as_XMMRegister(ra_,this,idx7)/* tmp4 */, as_Register(RCX_enc), opnd_array(0)->as_Register(ra_,this)/* result */);
  
#line 999999
  }
}

void overflowAddI_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {
    MacroAssembler _masm(&cbuf);

#line 10979 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ addl(opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* op2 */);
  
#line 999999
  }
}

void overflowAddI_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {
    MacroAssembler _masm(&cbuf);

#line 10992 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ addl(opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->constant());
  
#line 999999
  }
}

void overflowAddL_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {
    MacroAssembler _masm(&cbuf);

#line 11004 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ addq(opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* op2 */);
  
#line 999999
  }
}

void overflowAddL_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {
    MacroAssembler _masm(&cbuf);

#line 11016 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ addq(opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->constantL());
  
#line 999999
  }
}

void overflowSubI_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {
    MacroAssembler _masm(&cbuf);

#line 11027 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ cmpl(opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* op2 */);
  
#line 999999
  }
}

void overflowSubI_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {
    MacroAssembler _masm(&cbuf);

#line 11038 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ cmpl(opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->constant());
  
#line 999999
  }
}

void overflowSubL_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {
    MacroAssembler _masm(&cbuf);

#line 11049 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ cmpq(opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* op2 */);
  
#line 999999
  }
}

void overflowSubL_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {
    MacroAssembler _masm(&cbuf);

#line 11060 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ cmpq(opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->constantL());
  
#line 999999
  }
}

void overflowNegI_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {
    MacroAssembler _masm(&cbuf);

#line 11072 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ negl(opnd_array(2)->as_Register(ra_,this,idx2)/* op2 */);
  
#line 999999
  }
}

void overflowNegL_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {
    MacroAssembler _masm(&cbuf);

#line 11084 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ negq(opnd_array(2)->as_Register(ra_,this,idx2)/* op2 */);
  
#line 999999
  }
}

void overflowMulI_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {
    MacroAssembler _masm(&cbuf);

#line 11096 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ imull(opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* op2 */);
  
#line 999999
  }
}

void overflowMulI_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    MacroAssembler _masm(&cbuf);

#line 11108 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ imull(opnd_array(3)->as_Register(ra_,this,idx3)/* tmp */, opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->constant());
  
#line 999999
  }
}

void overflowMulL_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {
    MacroAssembler _masm(&cbuf);

#line 11120 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ imulq(opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* op2 */);
  
#line 999999
  }
}

void overflowMulL_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    MacroAssembler _masm(&cbuf);

#line 11132 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ imulq(opnd_array(3)->as_Register(ra_,this,idx3)/* tmp */, opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->constantL());
  
#line 999999
  }
}

void compI_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* op1 */ < 8) {
      if (opnd_array(2)->reg(ra_,this,idx2)/* op2 */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(2)->reg(ra_,this,idx2)/* op2 */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x3B /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* op1 */ & 7, opnd_array(2)->reg(ra_,this,idx2)/* op2 */ & 7);
  
#line 999999
  }
}

void compI_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 1997 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // OpcSEr/m
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* op1 */;
    if (dstenc >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
      dstenc -= 8;
    }
    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_opcode(cbuf, (0x81 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x81 /*primary()*/));
    }
    // Emit r/m byte with secondary opcode, after primary opcode.
    emit_rm(cbuf, 0x3, (0x07 /*secondary()*/), dstenc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constant());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constant());
    }
  
#line 999999
  }
}

void compI_rReg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* op1 */ < 8) {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x3B /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(1)->reg(ra_,this,idx1)/* op1 */;
    int base = opnd_array(2)->base(ra_,this,idx2);
    int index = opnd_array(2)->index(ra_,this,idx2);
    int scale = opnd_array(2)->scale();
    int disp = opnd_array(2)->disp(ra_,this,idx2);
    relocInfo::relocType disp_reloc = opnd_array(2)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void testI_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x85 /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* src */ & 7, opnd_array(1)->reg(ra_,this,idx1)/* src */ & 7);
  
#line 999999
  }
}

void testI_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// zero
  {

#line 2419 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* src */ >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF7 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x00 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* src */ & 7);
  
#line 999999
  }
  {

#line 2290 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Output immediate
    emit_d32(cbuf, opnd_array(2)->constant());
  
#line 999999
  }
}

void testI_reg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// zero
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x85 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(1)->reg(ra_,this,idx1)/* src */;
    int base = opnd_array(2)->base(ra_,this,idx2);
    int index = opnd_array(2)->index(ra_,this,idx2);
    int scale = opnd_array(2)->scale();
    int disp = opnd_array(2)->disp(ra_,this,idx2);
    relocInfo::relocType disp_reloc = opnd_array(2)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void testI_reg_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// zero
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x85 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* src */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void compU_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* op1 */ < 8) {
      if (opnd_array(2)->reg(ra_,this,idx2)/* op2 */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(2)->reg(ra_,this,idx2)/* op2 */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x3B /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* op1 */ & 7, opnd_array(2)->reg(ra_,this,idx2)/* op2 */ & 7);
  
#line 999999
  }
}

void compU_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 1997 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // OpcSEr/m
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* op1 */;
    if (dstenc >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
      dstenc -= 8;
    }
    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_opcode(cbuf, (0x81 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x81 /*primary()*/));
    }
    // Emit r/m byte with secondary opcode, after primary opcode.
    emit_rm(cbuf, 0x3, (0x07 /*secondary()*/), dstenc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constant() && opnd_array(2)->constant() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constant());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constant());
    }
  
#line 999999
  }
}

void compU_rReg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 2467 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* op1 */ < 8) {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) >= 8) {
          emit_opcode(cbuf, Assembler::REX_X);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_B);
        } else {
          emit_opcode(cbuf, Assembler::REX_XB);
        }
      }
    } else {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_R);
        } else {
          emit_opcode(cbuf, Assembler::REX_RX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_RB);
        } else {
          emit_opcode(cbuf, Assembler::REX_RXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x3B /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(1)->reg(ra_,this,idx1)/* op1 */;
    int base = opnd_array(2)->base(ra_,this,idx2);
    int index = opnd_array(2)->index(ra_,this,idx2);
    int scale = opnd_array(2)->scale();
    int disp = opnd_array(2)->disp(ra_,this,idx2);
    relocInfo::relocType disp_reloc = opnd_array(2)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void testU_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x85 /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* src */ & 7, opnd_array(1)->reg(ra_,this,idx1)/* src */ & 7);
  
#line 999999
  }
}

void compP_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* op1 */ < 8) {
      if (opnd_array(2)->reg(ra_,this,idx2)/* op2 */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(2)->reg(ra_,this,idx2)/* op2 */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x3B /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* op1 */ & 7, opnd_array(2)->reg(ra_,this,idx2)/* op2 */ & 7);
  
#line 999999
  }
}

void compP_rReg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* op1 */ < 8) {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x3B /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(1)->reg(ra_,this,idx1)/* op1 */;
    int base = opnd_array(2)->base(ra_,this,idx2);
    int index = opnd_array(2)->index(ra_,this,idx2);
    int scale = opnd_array(2)->scale();
    int disp = opnd_array(2)->disp(ra_,this,idx2);
    relocInfo::relocType disp_reloc = opnd_array(2)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void compP_mem_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* op1 */ < 8) {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x3B /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(1)->reg(ra_,this,idx1)/* op1 */;
    int base = opnd_array(2)->base(ra_,this,idx2);
    int index = opnd_array(2)->index(ra_,this,idx2);
    int scale = opnd_array(2)->scale();
    int disp = opnd_array(2)->disp(ra_,this,idx2);
    relocInfo::relocType disp_reloc = opnd_array(2)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void testP_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x85 /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* src */ & 7, opnd_array(1)->reg(ra_,this,idx1)/* src */ & 7);
  
#line 999999
  }
}

void testP_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// op
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {

#line 2344 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->base(ra_,this,idx1) >= 8) {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_WB);
      } else {
        emit_opcode(cbuf, Assembler::REX_WXB);
      }
    } else {
      if (opnd_array(1)->index(ra_,this,idx1) < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WX);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF7 /*primary()*/));
  
#line 999999
  }
  {

#line 2544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int rm_byte_opcode = (0x00);

    // High registers handle in encode_RegMem
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int displace = opnd_array(1)->disp(ra_,this,idx1);

    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();       // disp-as-oop when
                                            // working with static
                                            // globals
    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,
                  disp_reloc);
  
#line 999999
  }
  {

#line 2311 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_d32(cbuf,(0xFFFFFFFF));
  
#line 999999
  }
}

void testP_mem_reg0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 11339 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ cmpq(r12, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void compN_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {
    MacroAssembler _masm(&cbuf);

#line 11350 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"
__ cmpl(opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, opnd_array(2)->as_Register(ra_,this,idx2)/* op2 */); 
#line 999999
  }
}

void compN_rReg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 11359 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ cmpl(opnd_array(1)->as_Register(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()));
  
#line 999999
  }
}

void compN_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {
    MacroAssembler _masm(&cbuf);

#line 11369 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ cmp_narrow_oop(opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, (jobject)opnd_array(2)->constant());
  
#line 999999
  }
}

void compN_mem_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 11380 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ cmp_narrow_oop(Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), (jobject)opnd_array(1)->constant());
  
#line 999999
  }
}

void compN_rReg_imm_klassNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {
    MacroAssembler _masm(&cbuf);

#line 11390 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ cmp_narrow_klass(opnd_array(1)->as_Register(ra_,this,idx1)/* op1 */, (Klass*)opnd_array(2)->constant());
  
#line 999999
  }
}

void compN_mem_imm_klassNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 11401 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ cmp_narrow_klass(Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), (Klass*)opnd_array(1)->constant());
  
#line 999999
  }
}

void testN_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 11411 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"
__ testl(opnd_array(1)->as_Register(ra_,this,idx1)/* src */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */); 
#line 999999
  }
}

void testN_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 11422 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ cmpl(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), (int)0xFFFFFFFF);
  
#line 999999
  }
}

void testN_mem_reg0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 11434 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ cmpl(r12, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void compL_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* op1 */ < 8) {
      if (opnd_array(2)->reg(ra_,this,idx2)/* op2 */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(2)->reg(ra_,this,idx2)/* op2 */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x3B /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* op1 */ & 7, opnd_array(2)->reg(ra_,this,idx2)/* op2 */ & 7);
  
#line 999999
  }
}

void compL_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 2017 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // OpcSEr/m
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* op1 */;
    if (dstenc < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
      dstenc -= 8;
    }
    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_opcode(cbuf, (0x81 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x81 /*primary()*/));
    }
    // Emit r/m byte with secondary opcode, after primary opcode.
    emit_rm(cbuf, 0x3, (0x07 /*secondary()*/), dstenc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constantL());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constantL());
    }
  
#line 999999
  }
}

void compL_rReg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* op1 */ < 8) {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x3B /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(1)->reg(ra_,this,idx1)/* op1 */;
    int base = opnd_array(2)->base(ra_,this,idx2);
    int index = opnd_array(2)->index(ra_,this,idx2);
    int scale = opnd_array(2)->scale();
    int disp = opnd_array(2)->disp(ra_,this,idx2);
    relocInfo::relocType disp_reloc = opnd_array(2)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void testL_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x85 /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* src */ & 7, opnd_array(1)->reg(ra_,this,idx1)/* src */ & 7);
  
#line 999999
  }
}

void testL_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// zero
  {

#line 2426 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xF7 /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x00 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* src */ & 7);
  
#line 999999
  }
  {

#line 2290 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Output immediate
    emit_d32(cbuf, opnd_array(2)->constantL());
  
#line 999999
  }
}

void testL_reg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// zero
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x85 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(1)->reg(ra_,this,idx1)/* src */;
    int base = opnd_array(2)->base(ra_,this,idx2);
    int index = opnd_array(2)->index(ra_,this,idx2);
    int scale = opnd_array(2)->scale();
    int disp = opnd_array(2)->disp(ra_,this,idx2);
    relocInfo::relocType disp_reloc = opnd_array(2)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void testL_reg_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// zero
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(1)->base(ra_,this,idx1) < 8) {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(1)->index(ra_,this,idx1) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x85 /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(2)->reg(ra_,this,idx2)/* src */;
    int base = opnd_array(1)->base(ra_,this,idx1);
    int index = opnd_array(1)->index(ra_,this,idx1);
    int scale = opnd_array(1)->scale();
    int disp = opnd_array(1)->disp(ra_,this,idx1);
    relocInfo::relocType disp_reloc = opnd_array(1)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void cmpL3_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {

#line 2631 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    int src1enc = opnd_array(1)->reg(ra_,this,idx1)/* src1 */;
    int src2enc = opnd_array(2)->reg(ra_,this,idx2)/* src2 */;
    int dstenc = opnd_array(0)->reg(ra_,this)/* dst */;

    // cmpq $src1, $src2
    if (src1enc < 8) {
      if (src2enc < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (src2enc < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
    emit_opcode(cbuf, 0x3B);
    emit_rm(cbuf, 0x3, src1enc & 7, src2enc & 7);

    // movl $dst, -1
    if (dstenc >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
    }
    emit_opcode(cbuf, 0xB8 | (dstenc & 7));
    emit_d32(cbuf, -1);

    // jl,s done
    emit_opcode(cbuf, 0x7C);
    emit_d8(cbuf, dstenc < 4 ? 0x06 : 0x08);

    // setne $dst
    if (dstenc >= 4) {
      emit_opcode(cbuf, dstenc < 8 ? Assembler::REX : Assembler::REX_B);
    }
    emit_opcode(cbuf, 0x0F);
    emit_opcode(cbuf, 0x95);
    emit_opcode(cbuf, 0xC0 | (dstenc & 7));

    // movzbl $dst, $dst
    if (dstenc >= 4) {
      emit_opcode(cbuf, dstenc < 8 ? Assembler::REX : Assembler::REX_RB);
    }
    emit_opcode(cbuf, 0x0F);
    emit_opcode(cbuf, 0xB6);
    emit_rm(cbuf, 0x3, dstenc & 7, dstenc & 7);
  
#line 999999
  }
}

void compUL_rRegNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* op1 */ < 8) {
      if (opnd_array(2)->reg(ra_,this,idx2)/* op2 */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(2)->reg(ra_,this,idx2)/* op2 */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x3B /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* op1 */ & 7, opnd_array(2)->reg(ra_,this,idx2)/* op2 */ & 7);
  
#line 999999
  }
}

void compUL_rReg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 2017 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // OpcSEr/m
    int dstenc = opnd_array(1)->reg(ra_,this,idx1)/* op1 */;
    if (dstenc < 8) {
      emit_opcode(cbuf, Assembler::REX_W);
    } else {
      emit_opcode(cbuf, Assembler::REX_WB);
      dstenc -= 8;
    }
    // Emit primary opcode and set sign-extend bit
    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_opcode(cbuf, (0x81 /*primary()*/) | 0x02);
    } else {
      // 32-bit immediate
      emit_opcode(cbuf, (0x81 /*primary()*/));
    }
    // Emit r/m byte with secondary opcode, after primary opcode.
    emit_rm(cbuf, 0x3, (0x07 /*secondary()*/), dstenc);
  
#line 999999
  }
  {

#line 2039 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // Check for 8-bit immediate, and set sign extend bit in opcode
    if (-0x80 <= opnd_array(2)->constantL() && opnd_array(2)->constantL() < 0x80) {
      emit_d8(cbuf, opnd_array(2)->constantL());
    } else {
      // 32-bit immediate
      emit_d32(cbuf, opnd_array(2)->constantL());
    }
  
#line 999999
  }
}

void compUL_rReg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// op1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// op2
  {

#line 2498 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* op1 */ < 8) {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_W);
        } else {
          emit_opcode(cbuf, Assembler::REX_WX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WXB);
        }
      }
    } else {
      if (opnd_array(2)->base(ra_,this,idx2) < 8) {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WR);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRX);
        }
      } else {
        if (opnd_array(2)->index(ra_,this,idx2) < 8) {
          emit_opcode(cbuf, Assembler::REX_WRB);
        } else {
          emit_opcode(cbuf, Assembler::REX_WRXB);
        }
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x3B /*primary()*/));
  
#line 999999
  }
  {

#line 2531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // High registers handle in encode_RegMem
    int reg = opnd_array(1)->reg(ra_,this,idx1)/* op1 */;
    int base = opnd_array(2)->base(ra_,this,idx2);
    int index = opnd_array(2)->index(ra_,this,idx2);
    int scale = opnd_array(2)->scale();
    int disp = opnd_array(2)->disp(ra_,this,idx2);
    relocInfo::relocType disp_reloc = opnd_array(2)->disp_reloc();

    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);
  
#line 999999
  }
}

void testUL_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// zero
  {

#line 2450 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_W);
      } else {
        emit_opcode(cbuf, Assembler::REX_WB);
      }
    } else {
      if (opnd_array(1)->reg(ra_,this,idx1)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_WR);
      } else {
        emit_opcode(cbuf, Assembler::REX_WRB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x85 /*primary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* src */ & 7, opnd_array(1)->reg(ra_,this,idx1)/* src */ & 7);
  
#line 999999
  }
}

void cmovI_reg_gNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// 
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x4F /*secondary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7, opnd_array(2)->reg(ra_,this,idx2)/* src */ & 7);
  
#line 999999
  }
}

void cmovI_reg_lNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cr
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// 
  {

#line 2435 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* dst */ < 8) {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ >= 8) {
        emit_opcode(cbuf, Assembler::REX_B);
      }
    } else {
      if (opnd_array(2)->reg(ra_,this,idx2)/* src */ < 8) {
        emit_opcode(cbuf, Assembler::REX_R);
      } else {
        emit_opcode(cbuf, Assembler::REX_RB);
      }
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x0F /*primary()*/));
  
#line 999999
  }
  {

#line 1810 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x4C /*secondary()*/));
  
#line 999999
  }
  {

#line 1838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_rm(cbuf, 0x3, opnd_array(1)->reg(ra_,this,idx1)/* dst */ & 7, opnd_array(2)->reg(ra_,this,idx2)/* src */ & 7);
  
#line 999999
  }
}

void jmpDirNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 11624 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label* L = opnd_array(1)->label();
    __ jmp(*L, false); // Always long jump
  
#line 999999
  }
}

uint jmpDirNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 5, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 5);
}

void jmpConNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// labl
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 11640 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label* L = opnd_array(3)->label();
    __ jcc((Assembler::Condition)(opnd_array(1)->ccode()), *L, false); // Always long jump
  
#line 999999
  }
}

uint jmpConNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 6, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 6);
}

void jmpLoopEndNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// labl
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 11657 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label* L = opnd_array(3)->label();
    __ jcc((Assembler::Condition)(opnd_array(1)->ccode()), *L, false); // Always long jump
  
#line 999999
  }
}

uint jmpLoopEndNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 6, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 6);
}

void jmpLoopEndUNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// labl
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 11673 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label* L = opnd_array(3)->label();
    __ jcc((Assembler::Condition)(opnd_array(1)->ccode()), *L, false); // Always long jump
  
#line 999999
  }
}

uint jmpLoopEndUNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 6, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 6);
}

void jmpLoopEndUCFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// labl
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 11688 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label* L = opnd_array(3)->label();
    __ jcc((Assembler::Condition)(opnd_array(1)->ccode()), *L, false); // Always long jump
  
#line 999999
  }
}

uint jmpLoopEndUCFNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 6, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 6);
}

void jmpLoopEnd_and_restoreMaskNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// labl
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 11707 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label* L = opnd_array(3)->label();
    __ jcc((Assembler::Condition)(opnd_array(1)->ccode()), *L, false); // Always long jump
    __ restorevectmask();
  
#line 999999
  }
}

uint jmpLoopEnd_and_restoreMaskNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 10, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 10);
}

void jmpLoopEndU_and_restoreMaskNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// labl
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 11725 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label* L = opnd_array(3)->label();
    __ jcc((Assembler::Condition)(opnd_array(1)->ccode()), *L, false); // Always long jump
    __ restorevectmask();
  
#line 999999
  }
}

uint jmpLoopEndU_and_restoreMaskNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 10, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 10);
}

void jmpLoopEndUCF_and_restoreMaskNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// labl
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 11742 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label* L = opnd_array(3)->label();
    __ jcc((Assembler::Condition)(opnd_array(1)->ccode()), *L, false); // Always long jump
    __ restorevectmask();
  
#line 999999
  }
}

uint jmpLoopEndUCF_and_restoreMaskNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 10, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 10);
}

void jmpConUNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// labl
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 11758 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label* L = opnd_array(3)->label();
    __ jcc((Assembler::Condition)(opnd_array(1)->ccode()), *L, false); // Always long jump
  
#line 999999
  }
}

uint jmpConUNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 6, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 6);
}

void jmpConUCFNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// labl
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 11772 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label* L = opnd_array(3)->label();
    __ jcc((Assembler::Condition)(opnd_array(1)->ccode()), *L, false); // Always long jump
  
#line 999999
  }
}

uint jmpConUCFNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 6, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 6);
}

void jmpConUCF2Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// labl
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 11794 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label* l = opnd_array(3)->label();
    if (opnd_array(1)->ccode()== Assembler::notEqual) {
      __ jcc(Assembler::parity, *l, false);
      __ jcc(Assembler::notEqual, *l, false);
    } else if (opnd_array(1)->ccode()== Assembler::equal) {
      Label done;
      __ jccb(Assembler::parity, done);
      __ jcc(Assembler::equal, *l, false);
      __ bind(done);
    } else {
       ShouldNotReachHere();
    }
  
#line 999999
  }
}

void partialSubtypeCheckNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// sub
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// super
  {

#line 2075 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Register Rrdi = as_Register(RDI_enc); // result register
    Register Rrax = as_Register(RAX_enc); // super class
    Register Rrcx = as_Register(RCX_enc); // killed
    Register Rrsi = as_Register(RSI_enc); // sub class
    Label miss;
    const bool set_cond_codes = true;

    MacroAssembler _masm(&cbuf);
    __ check_klass_subtype_slow_path(Rrsi, Rrax, Rrcx, Rrdi,
                                     NULL, &miss,
                                     /*set_cond_codes:*/ true);
    if ((0x1 /*primary()*/)) {
      __ xorptr(Rrdi, Rrdi);
    }
    __ bind(miss);
  
#line 999999
  }
}

void partialSubtypeCheck_vs_ZeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// sub
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// super
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// zero
  {

#line 2075 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Register Rrdi = as_Register(RDI_enc); // result register
    Register Rrax = as_Register(RAX_enc); // super class
    Register Rrcx = as_Register(RCX_enc); // killed
    Register Rrsi = as_Register(RSI_enc); // sub class
    Label miss;
    const bool set_cond_codes = true;

    MacroAssembler _masm(&cbuf);
    __ check_klass_subtype_slow_path(Rrsi, Rrax, Rrcx, Rrdi,
                                     NULL, &miss,
                                     /*set_cond_codes:*/ true);
    if ((0x0 /*primary()*/)) {
      __ xorptr(Rrdi, Rrdi);
    }
    __ bind(miss);
  
#line 999999
  }
}

void jmpDir_shortNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 11882 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label* L = opnd_array(1)->label();
    __ jmpb(*L);
  
#line 999999
  }
}

uint jmpDir_shortNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 2, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 2);
}

void jmpCon_shortNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// labl
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 11898 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label* L = opnd_array(3)->label();
    __ jccb((Assembler::Condition)(opnd_array(1)->ccode()), *L);
  
#line 999999
  }
}

uint jmpCon_shortNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 2, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 2);
}

void jmpLoopEnd_shortNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cr
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// labl
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 11914 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label* L = opnd_array(3)->label();
    __ jccb((Assembler::Condition)(opnd_array(1)->ccode()), *L);
  
#line 999999
  }
}

uint jmpLoopEnd_shortNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 2, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 2);
}

void jmpLoopEndU_shortNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// labl
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 11930 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label* L = opnd_array(3)->label();
    __ jccb((Assembler::Condition)(opnd_array(1)->ccode()), *L);
  
#line 999999
  }
}

uint jmpLoopEndU_shortNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 2, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 2);
}

void jmpLoopEndUCF_shortNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// labl
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 11945 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label* L = opnd_array(3)->label();
    __ jccb((Assembler::Condition)(opnd_array(1)->ccode()), *L);
  
#line 999999
  }
}

uint jmpLoopEndUCF_shortNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 2, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 2);
}

void jmpConU_shortNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// labl
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 11961 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label* L = opnd_array(3)->label();
    __ jccb((Assembler::Condition)(opnd_array(1)->ccode()), *L);
  
#line 999999
  }
}

uint jmpConU_shortNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 2, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 2);
}

void jmpConUCF_shortNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// labl
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 11976 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label* L = opnd_array(3)->label();
    __ jccb((Assembler::Condition)(opnd_array(1)->ccode()), *L);
  
#line 999999
  }
}

uint jmpConUCF_shortNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 2, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 2);
}

void jmpConUCF2_shortNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cmp
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// labl
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 12000 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    Label* l = opnd_array(3)->label();
    if (opnd_array(1)->ccode()== Assembler::notEqual) {
      __ jccb(Assembler::parity, *l);
      __ jccb(Assembler::notEqual, *l);
    } else if (opnd_array(1)->ccode()== Assembler::equal) {
      Label done;
      __ jccb(Assembler::parity, done);
      __ jccb(Assembler::equal, *l);
      __ bind(done);
    } else {
       ShouldNotReachHere();
    }
  
#line 999999
  }
}

uint jmpConUCF2_shortNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 4, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 4);
}

void cmpFastLockRTMNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// object
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// box
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// scr
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// cx1
  unsigned idx6 = idx5 + opnd_array(5)->num_edges(); 	// cx2
  {
    MacroAssembler _masm(&cbuf);

#line 12027 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ fast_lock(opnd_array(1)->as_Register(ra_,this,idx1)/* object */, opnd_array(2)->as_Register(ra_,this,idx2)/* box */, opnd_array(3)->as_Register(ra_,this,idx3)/* tmp */,
                 opnd_array(4)->as_Register(ra_,this,idx4)/* scr */, opnd_array(5)->as_Register(ra_,this,idx5)/* cx1 */, opnd_array(6)->as_Register(ra_,this,idx6)/* cx2 */,
                 _counters, _rtm_counters, _stack_rtm_counters,
                 ((Method*)(ra_->C->method()->constant_encoding()))->method_data(),
                 true, ra_->C->profile_rtm());
  
#line 999999
  }
}

void cmpFastLockNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// object
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// box
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// scr
  {
    MacroAssembler _masm(&cbuf);

#line 12043 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ fast_lock(opnd_array(1)->as_Register(ra_,this,idx1)/* object */, opnd_array(2)->as_Register(ra_,this,idx2)/* box */, opnd_array(3)->as_Register(ra_,this,idx3)/* tmp */,
                 opnd_array(4)->as_Register(ra_,this,idx4)/* scr */, noreg, noreg, _counters, NULL, NULL, NULL, false, false);
  
#line 999999
  }
}

void cmpFastUnlockNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// object
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// box
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    MacroAssembler _masm(&cbuf);

#line 12055 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ fast_unlock(opnd_array(1)->as_Register(ra_,this,idx1)/* object */, opnd_array(2)->as_Register(ra_,this,idx2)/* box */, opnd_array(3)->as_Register(ra_,this,idx3)/* tmp */, ra_->C->use_rtm());
  
#line 999999
  }
}

void safePoint_pollNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 5;
  unsigned idx1 = 5; 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 12073 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    AddressLiteral addr(os::get_polling_page(), relocInfo::poll_type);
    __ testl(rax, addr);
  
#line 999999
  }
}

void safePoint_poll_farNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 5;
  unsigned idx1 = 5; 	// cr
  {
    MacroAssembler _masm(&cbuf);

#line 12089 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    __ relocate(relocInfo::poll_type);
    __ testl(rax, Address(opnd_array(1)->as_Register(ra_,this,idx1)/* poll */, 0));
  
#line 999999
  }
}

void CallStaticJavaDirectNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {

#line 2093 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    debug_only(int off0 = cbuf.insts_size());
    if (ra_->C->max_vector_size() > 16) {
      // Clear upper bits of YMM registers when current compiled code uses
      // wide vectors to avoid AVX <-> SSE transition penalty during call.
      MacroAssembler _masm(&cbuf);
      __ vzeroupper();
    }
    debug_only(int off1 = cbuf.insts_size());
    assert(off1 - off0 == clear_avx_size(), "correct size prediction");
  
#line 999999
  }
  {

#line 2126 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // JAVA STATIC CALL
    // CALL to fixup routine.  Fixup routine uses ScopeDesc info to
    // determine who we intended to call.
    cbuf.set_insts_mark();
    emit_d8(cbuf, (0xE8 /*primary()*/));

    if (!_method) {
      emit_d32_reloc(cbuf, (int) (opnd_array(1)->method() - ((intptr_t) cbuf.insts_end()) - 4),
                     runtime_call_Relocation::spec(),
                     RELOC_DISP32);
    } else {
      int method_index = resolved_method_index(cbuf);
      RelocationHolder rspec = _optimized_virtual ? opt_virtual_call_Relocation::spec(method_index)
                                                  : static_call_Relocation::spec(method_index);
      emit_d32_reloc(cbuf, (int) (opnd_array(1)->method() - ((intptr_t) cbuf.insts_end()) - 4),
                     rspec, RELOC_DISP32);
      // Emit stubs for static call.
      address mark = cbuf.insts_mark();
      address stub = CompiledStaticCall::emit_to_interp_stub(cbuf, mark);
      if (stub == NULL) {
        ciEnv::current()->record_failure("CodeCache is full");
        return;
      }
#if INCLUDE_AOT
      CompiledStaticCall::emit_to_aot_stub(cbuf, mark);
#endif
    }
  
#line 999999
  }
  {

#line 1747 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    if (VerifyStackAtCalls) {
      // Check that stack depth is unchanged: find majik cookie on stack
      int framesize = ra_->reg2offset_unchecked(OptoReg::add(ra_->_matcher._old_SP, -3*VMRegImpl::slots_per_word));
      MacroAssembler _masm(&cbuf);
      Label L;
      __ cmpptr(Address(rsp, framesize), (int32_t)0xbadb100d);
      __ jccb(Assembler::equal, L);
      // Die if stack mismatch
      __ int3();
      __ bind(L);
    }
  
#line 999999
  }
}

void CallDynamicJavaDirectNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {

#line 2093 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    debug_only(int off0 = cbuf.insts_size());
    if (ra_->C->max_vector_size() > 16) {
      // Clear upper bits of YMM registers when current compiled code uses
      // wide vectors to avoid AVX <-> SSE transition penalty during call.
      MacroAssembler _masm(&cbuf);
      __ vzeroupper();
    }
    debug_only(int off1 = cbuf.insts_size());
    assert(off1 - off0 == clear_avx_size(), "correct size prediction");
  
#line 999999
  }
  {

#line 2156 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    MacroAssembler _masm(&cbuf);
    __ ic_call((address)opnd_array(1)->method(), resolved_method_index(cbuf));
  
#line 999999
  }
  {

#line 1747 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    if (VerifyStackAtCalls) {
      // Check that stack depth is unchanged: find majik cookie on stack
      int framesize = ra_->reg2offset_unchecked(OptoReg::add(ra_->_matcher._old_SP, -3*VMRegImpl::slots_per_word));
      MacroAssembler _masm(&cbuf);
      Label L;
      __ cmpptr(Address(rsp, framesize), (int32_t)0xbadb100d);
      __ jccb(Assembler::equal, L);
      // Die if stack mismatch
      __ int3();
      __ bind(L);
    }
  
#line 999999
  }
}

void CallRuntimeDirectNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {

#line 2093 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    debug_only(int off0 = cbuf.insts_size());
    if (ra_->C->max_vector_size() > 16) {
      // Clear upper bits of YMM registers when current compiled code uses
      // wide vectors to avoid AVX <-> SSE transition penalty during call.
      MacroAssembler _masm(&cbuf);
      __ vzeroupper();
    }
    debug_only(int off1 = cbuf.insts_size());
    assert(off1 - off0 == clear_avx_size(), "correct size prediction");
  
#line 999999
  }
  {

#line 2105 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // No relocation needed
    MacroAssembler _masm(&cbuf);
    __ mov64(r10, (int64_t) opnd_array(1)->method());
    __ call(r10);
  
#line 999999
  }
}

void CallLeafDirectNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {

#line 2093 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    debug_only(int off0 = cbuf.insts_size());
    if (ra_->C->max_vector_size() > 16) {
      // Clear upper bits of YMM registers when current compiled code uses
      // wide vectors to avoid AVX <-> SSE transition penalty during call.
      MacroAssembler _masm(&cbuf);
      __ vzeroupper();
    }
    debug_only(int off1 = cbuf.insts_size());
    assert(off1 - off0 == clear_avx_size(), "correct size prediction");
  
#line 999999
  }
  {

#line 2105 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // No relocation needed
    MacroAssembler _masm(&cbuf);
    __ mov64(r10, (int64_t) opnd_array(1)->method());
    __ call(r10);
  
#line 999999
  }
}

void CallLeafNoFPDirectNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {

#line 2105 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // No relocation needed
    MacroAssembler _masm(&cbuf);
    __ mov64(r10, (int64_t) opnd_array(1)->method());
    __ call(r10);
  
#line 999999
  }
}

void RetNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 5;
  unsigned idx1 = 5; 	// 
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xC3 /*primary()*/));
  
#line 999999
  }
}

void TailCalljmpIndNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 5;
  unsigned idx1 = 5; 	// method_oop
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// 
  {

#line 2419 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* jump_target */ >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xFF /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x4 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* jump_target */ & 7);
  
#line 999999
  }
}

void tailjmpIndNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 5;
  unsigned idx1 = 5; 	// ex_oop
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// 
  {

#line 1822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0x5a));
  
#line 999999
  }
  {

#line 2419 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    if (opnd_array(1)->reg(ra_,this,idx1)/* jump_target */ >= 8) {
      emit_opcode(cbuf, Assembler::REX_B);
    }
  
#line 999999
  }
  {

#line 1804 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    emit_opcode(cbuf, (0xFF /*primary()*/));
  
#line 999999
  }
  {

#line 2062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // INC, DEC, IDIV, IMOD, JMP indirect, ...
    emit_rm(cbuf, 0x3, (0x4 /*secondary()*/), opnd_array(1)->reg(ra_,this,idx1)/* jump_target */ & 7);
  
#line 999999
  }
}

void CreateExceptionNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  // User did not define which encode class to use.
}

uint CreateExceptionNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 0, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 0);
}

void RethrowExceptionNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 5;
  unsigned idx1 = 5; 	// 
  {

#line 2697 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    cbuf.set_insts_mark();
    emit_opcode(cbuf, 0xE9); // jmp entry
    emit_d32_reloc(cbuf,
                   (int) (OptoRuntime::rethrow_stub() - cbuf.insts_end() - 4),
                   runtime_call_Relocation::spec(),
                   RELOC_DISP32);
  
#line 999999
  }
}

void tlsLoadPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  // User did not define which encode class to use.
}

uint tlsLoadPNode::size(PhaseRegAlloc *ra_) const {
  assert(VerifyOops || MachNode::size(ra_) <= 0, "bad fixed size");
  return (VerifyOops ? MachNode::size(ra_) : 0);
}

void ShouldNotReachHereNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 5;
  unsigned idx1 = 5; 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 1808 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ int3();
  
#line 999999
  }
}

void setMaskNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  {
    MacroAssembler _masm(&cbuf);

#line 1821 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ setvectmask(opnd_array(2)->as_Register(ra_,this,idx2)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void addF_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 1835 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ addss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void addF_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 1847 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ addss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()));
  
#line 999999
  }
}

void addF_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  {
    MacroAssembler _masm(&cbuf);

#line 1847 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ addss(opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void addF_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 1858 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ addss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void addF_immNode::eval_constant(Compile* C) {
  {

#line 1859 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, opnd_array(2));
#line 999999
  }
}
void addF_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 1870 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vaddss(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
  
#line 999999
  }
}

void addF_reg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 1882 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vaddss(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()));
  
#line 999999
  }
}

void addF_reg_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  {
    MacroAssembler _masm(&cbuf);

#line 1882 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vaddss(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src1 */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void addF_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 1894 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vaddss(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void addF_reg_immNode::eval_constant(Compile* C) {
  {

#line 1895 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, opnd_array(2));
#line 999999
  }
}
void addD_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 1906 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ addsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void addD_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 1918 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ addsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()));
  
#line 999999
  }
}

void addD_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  {
    MacroAssembler _masm(&cbuf);

#line 1918 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ addsd(opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void addD_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 1929 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ addsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void addD_immNode::eval_constant(Compile* C) {
  {

#line 1930 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, opnd_array(2));
#line 999999
  }
}
void addD_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 1941 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vaddsd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
  
#line 999999
  }
}

void addD_reg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 1953 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vaddsd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()));
  
#line 999999
  }
}

void addD_reg_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  {
    MacroAssembler _masm(&cbuf);

#line 1953 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vaddsd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src1 */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void addD_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 1965 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vaddsd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void addD_reg_immNode::eval_constant(Compile* C) {
  {

#line 1966 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, opnd_array(2));
#line 999999
  }
}
void subF_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 1977 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ subss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void subF_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 1989 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ subss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()));
  
#line 999999
  }
}

void subF_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 2000 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ subss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void subF_immNode::eval_constant(Compile* C) {
  {

#line 2001 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, opnd_array(2));
#line 999999
  }
}
void subF_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 2012 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vsubss(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
  
#line 999999
  }
}

void subF_reg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 2024 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vsubss(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()));
  
#line 999999
  }
}

void subF_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 2036 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vsubss(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void subF_reg_immNode::eval_constant(Compile* C) {
  {

#line 2037 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, opnd_array(2));
#line 999999
  }
}
void subD_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2048 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ subsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void subD_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2060 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ subsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()));
  
#line 999999
  }
}

void subD_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 2071 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ subsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void subD_immNode::eval_constant(Compile* C) {
  {

#line 2072 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, opnd_array(2));
#line 999999
  }
}
void subD_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 2083 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vsubsd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
  
#line 999999
  }
}

void subD_reg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 2095 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vsubsd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()));
  
#line 999999
  }
}

void subD_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 2107 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vsubsd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void subD_reg_immNode::eval_constant(Compile* C) {
  {

#line 2108 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, opnd_array(2));
#line 999999
  }
}
void mulF_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2119 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ mulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void mulF_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2131 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ mulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()));
  
#line 999999
  }
}

void mulF_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  {
    MacroAssembler _masm(&cbuf);

#line 2131 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ mulss(opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void mulF_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 2142 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ mulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void mulF_immNode::eval_constant(Compile* C) {
  {

#line 2143 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, opnd_array(2));
#line 999999
  }
}
void mulF_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 2154 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vmulss(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
  
#line 999999
  }
}

void mulF_reg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 2166 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vmulss(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()));
  
#line 999999
  }
}

void mulF_reg_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  {
    MacroAssembler _masm(&cbuf);

#line 2166 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vmulss(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src1 */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void mulF_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 2178 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vmulss(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void mulF_reg_immNode::eval_constant(Compile* C) {
  {

#line 2179 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, opnd_array(2));
#line 999999
  }
}
void mulD_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2190 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ mulsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void mulD_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2202 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ mulsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()));
  
#line 999999
  }
}

void mulD_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// dst
  {
    MacroAssembler _masm(&cbuf);

#line 2202 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ mulsd(opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void mulD_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 2213 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ mulsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void mulD_immNode::eval_constant(Compile* C) {
  {

#line 2214 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, opnd_array(2));
#line 999999
  }
}
void mulD_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 2225 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vmulsd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
  
#line 999999
  }
}

void mulD_reg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 2237 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vmulsd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()));
  
#line 999999
  }
}

void mulD_reg_mem_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src2
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src1
  {
    MacroAssembler _masm(&cbuf);

#line 2237 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vmulsd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src1 */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void mulD_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 2249 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vmulsd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void mulD_reg_immNode::eval_constant(Compile* C) {
  {

#line 2250 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, opnd_array(2));
#line 999999
  }
}
void divF_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2261 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ divss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void divF_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2273 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ divss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()));
  
#line 999999
  }
}

void divF_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 2284 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ divss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void divF_immNode::eval_constant(Compile* C) {
  {

#line 2285 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, opnd_array(2));
#line 999999
  }
}
void divF_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 2296 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vdivss(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
  
#line 999999
  }
}

void divF_reg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 2308 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vdivss(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()));
  
#line 999999
  }
}

void divF_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 2320 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vdivss(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void divF_reg_immNode::eval_constant(Compile* C) {
  {

#line 2321 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, opnd_array(2));
#line 999999
  }
}
void divD_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2332 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ divsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void divD_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2344 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ divsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()));
  
#line 999999
  }
}

void divD_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 2355 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ divsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void divD_immNode::eval_constant(Compile* C) {
  {

#line 2356 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, opnd_array(2));
#line 999999
  }
}
void divD_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 2367 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vdivsd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
  
#line 999999
  }
}

void divD_reg_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 2379 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vdivsd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()));
  
#line 999999
  }
}

void divD_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 2391 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vdivsd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void divD_reg_immNode::eval_constant(Compile* C) {
  {

#line 2392 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, opnd_array(2));
#line 999999
  }
}
void absF_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  {
    MacroAssembler _masm(&cbuf);

#line 2402 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ andps(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, ExternalAddress(float_signmask()));
  
#line 999999
  }
}

void absF_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2413 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vandps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */,
              ExternalAddress(float_signmask()), vector_len);
  
#line 999999
  }
}

void absF_reg_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2427 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vandps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */,
              ExternalAddress(float_signmask()), vector_len);
  
#line 999999
  }
}

void absF_reg_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 2441 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vabsss(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */,
              ExternalAddress(float_signmask()), vector_len);
  
#line 999999
  }
}

void absD_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  {
    MacroAssembler _masm(&cbuf);

#line 2469 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ andpd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, ExternalAddress(double_signmask()));
  
#line 999999
  }
}

void absD_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2481 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vandpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */,
              ExternalAddress(double_signmask()), vector_len);
  
#line 999999
  }
}

void absD_reg_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2496 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vandpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */,
              ExternalAddress(double_signmask()), vector_len);
  
#line 999999
  }
}

void absD_reg_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 2510 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vabssd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */,
              ExternalAddress(double_signmask()), vector_len);
  
#line 999999
  }
}

void negF_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  {
    MacroAssembler _masm(&cbuf);

#line 2538 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ xorps(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, ExternalAddress(float_signflip()));
  
#line 999999
  }
}

void negF_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2549 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vnegatess(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */,
                 ExternalAddress(float_signflip()));
  
#line 999999
  }
}

void negD_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  {
    MacroAssembler _masm(&cbuf);

#line 2562 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ xorpd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, ExternalAddress(double_signflip()));
  
#line 999999
  }
}

void negD_reg_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2574 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vnegatesd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */,
                 ExternalAddress(double_signflip()));
  
#line 999999
  }
}

void sqrtF_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2587 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ sqrtss(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void sqrtF_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2599 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ sqrtss(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void sqrtF_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 2610 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ sqrtss(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void sqrtF_immNode::eval_constant(Compile* C) {
  {

#line 2611 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, opnd_array(1));
#line 999999
  }
}
void sqrtD_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2622 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ sqrtsd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */);
  
#line 999999
  }
}

void sqrtD_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2634 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ sqrtsd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void sqrtD_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 2645 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ sqrtsd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void sqrtD_immNode::eval_constant(Compile* C) {
  {

#line 2646 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, opnd_array(1));
#line 999999
  }
}
void onspinwaitNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// 
  {
    MacroAssembler _masm(&cbuf);

#line 2663 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pause();
  
#line 999999
  }
}

void fmaD_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// c
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// a
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// b
  {
    MacroAssembler _masm(&cbuf);

#line 2675 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ fmad(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* c */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* a */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* b */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* c */);
  
#line 999999
  }
}

void fmaF_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// c
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// a
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// b
  {
    MacroAssembler _masm(&cbuf);

#line 2687 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ fmaf(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* c */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* a */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* b */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* c */);
  
#line 999999
  }
}

void loadV4Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 2701 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movdl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadV8Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 2713 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadV16Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 2725 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movdqu(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadV32Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 2737 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vmovdqu(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
  
#line 999999
  }
}

void loadV64_dwordNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 2749 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ evmovdqul(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void loadV64_qwordNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 2762 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ evmovdquq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void storeV4Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2775 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movdl(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void storeV8Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2786 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movq(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void storeV16Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2797 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movdqu(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void storeV32Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2808 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vmovdqu(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void storeV64_dwordNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2819 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ evmovdqul(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */, vector_len);
  
#line 999999
  }
}

void storeV64_qwordNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2831 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ evmovdquq(Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */, vector_len);
  
#line 999999
  }
}

void Repl4B_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 2845 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ punpcklbw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
    __ pshuflw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, 0x00);
  
#line 999999
  }
}

void Repl8B_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 2857 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ punpcklbw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
    __ pshuflw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, 0x00);
  
#line 999999
  }
}

void Repl16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2871 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movdl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
    __ punpcklbw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
    __ pshuflw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, 0x00);
    __ punpcklqdq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl16B_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 2886 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ punpcklbw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
    __ pshuflw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, 0x00);
    __ punpcklqdq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl32BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2902 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movdl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
    __ punpcklbw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
    __ pshuflw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, 0x00);
    __ punpcklqdq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
    __ vinserti128_high(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl32B_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 2919 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ punpcklbw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
    __ pshuflw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, 0x00);
    __ punpcklqdq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
    __ vinserti128_high(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl16B_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 2933 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    __ punpcklqdq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl16B_immNode::eval_constant(Compile* C) {
  {

#line 2934 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, replicate8_imm(opnd_array(1)->constant(), 1));
#line 999999
  }
}
void Repl32B_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 2946 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    __ punpcklqdq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
    __ vinserti128_high(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl32B_immNode::eval_constant(Compile* C) {
  {

#line 2947 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, replicate8_imm(opnd_array(1)->constant(), 1));
#line 999999
  }
}
void Repl4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2959 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movdl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
    __ pshuflw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, 0x00);
  
#line 999999
  }
}

void Repl4S_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 2970 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pshuflw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), 0x00);
  
#line 999999
  }
}

void Repl8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 2982 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movdl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
    __ pshuflw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, 0x00);
    __ punpcklqdq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl8S_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 2995 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pshuflw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), 0x00);
    __ punpcklqdq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl8S_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 3007 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    __ punpcklqdq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl8S_immNode::eval_constant(Compile* C) {
  {

#line 3008 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, replicate8_imm(opnd_array(1)->constant(), 2));
#line 999999
  }
}
void Repl16SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 3021 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movdl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
    __ pshuflw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, 0x00);
    __ punpcklqdq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
    __ vinserti128_high(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl16S_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 3036 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pshuflw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), 0x00);
    __ punpcklqdq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
    __ vinserti128_high(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl16S_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 3050 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    __ punpcklqdq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
    __ vinserti128_high(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl16S_immNode::eval_constant(Compile* C) {
  {

#line 3051 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, replicate8_imm(opnd_array(1)->constant(), 2));
#line 999999
  }
}
void Repl4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 3063 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movdl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
    __ pshufd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, 0x00);
  
#line 999999
  }
}

void Repl4I_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 3074 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pshufd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), 0x00);
  
#line 999999
  }
}

void Repl8INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 3086 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movdl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
    __ pshufd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, 0x00);
    __ vinserti128_high(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl8I_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 3099 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pshufd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), 0x00);
    __ vinserti128_high(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl4I_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 3111 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    __ punpcklqdq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl4I_immNode::eval_constant(Compile* C) {
  {

#line 3112 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, replicate8_imm(opnd_array(1)->constant(), 4));
#line 999999
  }
}
void Repl8I_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 3124 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    __ punpcklqdq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
    __ vinserti128_high(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl8I_immNode::eval_constant(Compile* C) {
  {

#line 3125 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, replicate8_imm(opnd_array(1)->constant(), 4));
#line 999999
  }
}
void Repl2L_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 3138 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
    __ punpcklqdq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl4LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 3153 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movdq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
    __ punpcklqdq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
    __ vinserti128_high(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl4L_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 3187 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    __ punpcklqdq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
    __ vinserti128_high(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl4L_immNode::eval_constant(Compile* C) {
  {

#line 3188 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, opnd_array(1));
#line 999999
  }
}
void Repl4L_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 3201 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
    __ punpcklqdq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
    __ vinserti128_high(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl2F_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 3213 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pshufd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), 0x00);
  
#line 999999
  }
}

void Repl4F_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 3223 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pshufd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), 0x00);
  
#line 999999
  }
}

void Repl8FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 3234 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pshufd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, 0x00);
    __ vinsertf128_high(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl8F_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 3246 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pshufd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), 0x00);
    __ vinsertf128_high(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl2F_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 3257 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ xorps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl4F_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 3267 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ xorps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl8F_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 3277 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vxorps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl2D_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 3288 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pshufd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), 0x44);
  
#line 999999
  }
}

void Repl4DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 3299 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pshufd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, 0x44);
    __ vinsertf128_high(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl4D_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 3311 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pshufd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), 0x44);
    __ vinsertf128_high(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl2D_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 3323 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ xorpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl4D_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 3333 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vxorpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl4BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 3349 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movdl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
    __ punpcklbw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
    __ pshuflw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, 0x00);
  
#line 999999
  }
}

void Repl8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 3363 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movdl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
    __ punpcklbw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
    __ pshuflw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, 0x00);
  
#line 999999
  }
}

void Repl4B_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 3376 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movdl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void Repl4B_immNode::eval_constant(Compile* C) {
  {

#line 3377 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, replicate4_imm(opnd_array(1)->constant(), 1));
#line 999999
  }
}
void Repl8B_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 3386 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void Repl8B_immNode::eval_constant(Compile* C) {
  {

#line 3387 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, replicate8_imm(opnd_array(1)->constant(), 1));
#line 999999
  }
}
void Repl4B_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 3397 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl8B_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 3407 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl16B_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 3417 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl32B_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 3427 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    // Use vxorpd since AVX does not have vpxor for 256-bit (AVX2 will have it).
    int vector_len = 1;
    __ vpxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl2SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 3441 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movdl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
    __ pshuflw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, 0x00);
  
#line 999999
  }
}

void Repl2S_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 3453 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movdl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void Repl2S_immNode::eval_constant(Compile* C) {
  {

#line 3454 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, replicate4_imm(opnd_array(1)->constant(), 2));
#line 999999
  }
}
void Repl4S_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 3463 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void Repl4S_immNode::eval_constant(Compile* C) {
  {

#line 3464 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, replicate8_imm(opnd_array(1)->constant(), 2));
#line 999999
  }
}
void Repl2S_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 3474 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl4S_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 3484 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl8S_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 3494 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl16S_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 3504 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    // Use vxorpd since AVX does not have vpxor for 256-bit (AVX2 will have it).
    int vector_len = 1;
    __ vpxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 3518 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movdl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
    __ pshufd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, 0x00);
  
#line 999999
  }
}

void Repl2I_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 3531 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movdl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()));
    __ pshufd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, 0x00);
  
#line 999999
  }
}

void Repl2I_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 3543 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
  
#line 999999
  }
}

void Repl2I_immNode::eval_constant(Compile* C) {
  {

#line 3544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, replicate8_imm(opnd_array(1)->constant(), 4));
#line 999999
  }
}
void Repl2I_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 3554 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl4I_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 3564 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl8I_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 3574 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    // Use vxorpd since AVX does not have vpxor for 256-bit (AVX2 will have it).
    int vector_len = 1;
    __ vpxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 3589 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movdq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */);
    __ punpcklqdq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl2L_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 3620 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    __ punpcklqdq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl2L_immNode::eval_constant(Compile* C) {
  {

#line 3621 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, opnd_array(1));
#line 999999
  }
}
void Repl2L_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 3632 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */);
  
#line 999999
  }
}

void Repl4L_zeroNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 3642 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    // Use vxorpd since AVX does not have vpxor for 256-bit (AVX2 will have it).
    int vector_len = 1;
    __ vpxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 3655 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pshufd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, 0x00);
  
#line 999999
  }
}

void Repl4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 3665 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pshufd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, 0x00);
  
#line 999999
  }
}

void Repl2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 3676 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pshufd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, 0x44);
  
#line 999999
  }
}

void Repl4B_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 3688 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ evpbroadcastb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void Repl8B_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 3699 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ evpbroadcastb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void Repl16B_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 3710 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

   int vector_len = 0;
    __ evpbroadcastb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */, vector_len);
  
#line 999999
  }
}

void Repl16B_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 3721 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ evpbroadcastb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void Repl32B_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 3732 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

   int vector_len = 1;
    __ evpbroadcastb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */, vector_len);
  
#line 999999
  }
}

void Repl32B_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 3743 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ evpbroadcastb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void Repl64B_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 3754 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

   int vector_len = 2;
    __ evpbroadcastb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */, vector_len);
  
#line 999999
  }
}

void Repl64B_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 3765 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ evpbroadcastb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void Repl16B_imm_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 3777 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

   int vector_len = 0;
    __ movq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    __ evpbroadcastb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl16B_imm_evexNode::eval_constant(Compile* C) {
  {

#line 3779 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, replicate8_imm(opnd_array(1)->constant(), 1));
#line 999999
  }
}
void Repl32B_imm_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 3790 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

   int vector_len = 1;
    __ movq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    __ evpbroadcastb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl32B_imm_evexNode::eval_constant(Compile* C) {
  {

#line 3792 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, replicate8_imm(opnd_array(1)->constant(), 1));
#line 999999
  }
}
void Repl64B_imm_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 3803 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

   int vector_len = 2;
    __ movq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    __ evpbroadcastb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl64B_imm_evexNode::eval_constant(Compile* C) {
  {

#line 3805 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, replicate8_imm(opnd_array(1)->constant(), 1));
#line 999999
  }
}
void Repl64B_zero_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 3815 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    // Use vxorpd since AVX does not have vpxor for 512-bit (EVEX will have it).
    int vector_len = 2;
    __ vpxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */,opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl4S_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 3827 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

   int vector_len = 0;
    __ evpbroadcastw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */, vector_len);
  
#line 999999
  }
}

void Repl4S_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 3838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ evpbroadcastw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void Repl8S_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 3849 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

   int vector_len = 0;
    __ evpbroadcastw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */, vector_len);
  
#line 999999
  }
}

void Repl8S_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 3860 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ evpbroadcastw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void Repl16S_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 3871 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

   int vector_len = 1;
    __ evpbroadcastw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */, vector_len);
  
#line 999999
  }
}

void Repl16S_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 3882 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ evpbroadcastw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void Repl32S_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 3893 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

   int vector_len = 2;
    __ evpbroadcastw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */, vector_len);
  
#line 999999
  }
}

void Repl32S_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 3904 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ evpbroadcastw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void Repl8S_imm_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 3916 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

   int vector_len = 0;
    __ movq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    __ evpbroadcastw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl8S_imm_evexNode::eval_constant(Compile* C) {
  {

#line 3918 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, replicate8_imm(opnd_array(1)->constant(), 2));
#line 999999
  }
}
void Repl16S_imm_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 3929 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

   int vector_len = 1;
    __ movq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    __ evpbroadcastw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl16S_imm_evexNode::eval_constant(Compile* C) {
  {

#line 3931 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, replicate8_imm(opnd_array(1)->constant(), 2));
#line 999999
  }
}
void Repl32S_imm_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 3942 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

   int vector_len = 2;
    __ movq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    __ evpbroadcastw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl32S_imm_evexNode::eval_constant(Compile* C) {
  {

#line 3944 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, replicate8_imm(opnd_array(1)->constant(), 2));
#line 999999
  }
}
void Repl32S_zero_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 3954 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    // Use vxorpd since AVX does not have vpxor for 512-bit (EVEX will have it).
    int vector_len = 2;
    __ vpxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl4I_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 3966 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ evpbroadcastd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */, vector_len);
  
#line 999999
  }
}

void Repl4I_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 3977 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ evpbroadcastd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void Repl8I_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 3988 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ evpbroadcastd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */, vector_len);
  
#line 999999
  }
}

void Repl8I_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 3999 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ evpbroadcastd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void Repl16I_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 4010 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ evpbroadcastd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */, vector_len);
  
#line 999999
  }
}

void Repl16I_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 4021 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ evpbroadcastd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void Repl4I_imm_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 4033 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ movq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    __ evpbroadcastd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl4I_imm_evexNode::eval_constant(Compile* C) {
  {

#line 4035 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, replicate8_imm(opnd_array(1)->constant(), 4));
#line 999999
  }
}
void Repl8I_imm_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 4046 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ movq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    __ evpbroadcastd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl8I_imm_evexNode::eval_constant(Compile* C) {
  {

#line 4048 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, replicate8_imm(opnd_array(1)->constant(), 4));
#line 999999
  }
}
void Repl16I_imm_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 4059 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ movq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    __ evpbroadcastd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl16I_imm_evexNode::eval_constant(Compile* C) {
  {

#line 4061 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, replicate8_imm(opnd_array(1)->constant(), 4));
#line 999999
  }
}
void Repl16I_zero_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 4071 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    // Use vxorpd since AVX does not have vpxor for 512-bit (AVX2 will have it).
    int vector_len = 2;
    __ vpxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl4L_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 4085 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ evpbroadcastq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */, vector_len);
  
#line 999999
  }
}

void Repl8L_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 4096 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ evpbroadcastq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* src */, vector_len);
  
#line 999999
  }
}

void Repl4L_imm_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 4145 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ movq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    __ evpbroadcastq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl4L_imm_evexNode::eval_constant(Compile* C) {
  {

#line 4147 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, opnd_array(1));
#line 999999
  }
}
void Repl8L_imm_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// con
  {
    MacroAssembler _masm(&cbuf);

#line 4158 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ movq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, InternalAddress(__ code()->consts()->start() + constant_offset()));
    __ evpbroadcastq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl8L_imm_evexNode::eval_constant(Compile* C) {
  {

#line 4160 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"
    _constant = C->constant_table().add(this, opnd_array(1));
#line 999999
  }
}
void Repl2L_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 4170 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ evpbroadcastq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void Repl4L_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 4181 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ evpbroadcastq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void Repl8L_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 4192 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ evpbroadcastq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void Repl8L_zero_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 4203 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    // Use vxorpd since AVX does not have vpxor for 512-bit (EVEX will have it).
    int vector_len = 2;
    __ vpxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */,opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl8F_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 4215 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ evpbroadcastss(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, vector_len);
  
#line 999999
  }
}

void Repl8F_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 4226 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ evpbroadcastss(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void Repl16F_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 4237 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ evpbroadcastss(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, vector_len);
  
#line 999999
  }
}

void Repl16F_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 4248 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ evpbroadcastss(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void Repl2F_zero_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 4259 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    // Use vpxor in place of vxorps since EVEX has a constriant on dq for vxorps: this is a 512-bit operation
    int vector_len = 2;
    __ vpxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */,opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl4F_zero_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 4271 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    // Use vpxor in place of vxorps since EVEX has a constriant on dq for vxorps: this is a 512-bit operation
    int vector_len = 2;
    __ vpxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */,opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl8F_zero_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 4283 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    // Use vpxor in place of vxorps since EVEX has a constriant on dq for vxorps: this is a 512-bit operation
    int vector_len = 2;
    __ vpxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */,opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl16F_zero_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 4295 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    // Use vpxor in place of vxorps since EVEX has a constriant on dq for vxorps: this is a 512-bit operation
    int vector_len = 2;
    __ vpxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */,opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl4D_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 4307 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ evpbroadcastsd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, vector_len);
  
#line 999999
  }
}

void Repl4D_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 4318 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ evpbroadcastsd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void Repl8D_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 4329 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ evpbroadcastsd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, vector_len);
  
#line 999999
  }
}

void Repl8D_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 4340 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ evpbroadcastsd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void Repl2D_zero_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 4351 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    // Use vpxor in place of vxorpd since EVEX has a constriant on dq for vxorpd: this is a 512-bit operation
    int vector_len = 2;
    __ vpxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */,opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl4D_zero_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 4363 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    // Use vpxor in place of vxorpd since EVEX has a constriant on dq for vxorpd: this is a 512-bit operation
    int vector_len = 2;
    __ vpxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */,opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void Repl8D_zero_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// zero
  {
    MacroAssembler _masm(&cbuf);

#line 4375 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    // Use vpxor in place of vxorpd since EVEX has a constriant on dq for vxorpd: this is a 512-bit operation
    int vector_len = 2;
    __ vpxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */,opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, vector_len);
  
#line 999999
  }
}

void rsadd2I_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 4394 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movdqu(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ phaddd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
    __ movdl(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */);
    __ paddd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
    __ movdl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
  
#line 999999
  }
}

void rvadd2I_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 4412 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vphaddd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
    __ movdl(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */);
    __ vpaddd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, vector_len);
    __ movdl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
  
#line 999999
  }
}

void rvadd2I_reduction_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 4431 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ pshufd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x1);
    __ vpaddd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, vector_len);
    __ movdl(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */);
    __ vpaddd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, vector_len);
    __ movdl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
  
#line 999999
  }
}

void rsadd4I_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 4452 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movdqu(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ phaddd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ phaddd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ movdl(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */);
    __ paddd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ movdl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
  
#line 999999
  }
}

void rvadd4I_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 4472 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vphaddd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
    __ vphaddd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, vector_len);
    __ movdl(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */);
    __ vpaddd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, vector_len);
    __ movdl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
  
#line 999999
  }
}

void rvadd4I_reduction_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 4494 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ pshufd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0xE);
    __ vpaddd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, vector_len);
    __ pshufd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, 0x1);
    __ vpaddd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, vector_len);
    __ movdl(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */);
    __ vpaddd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, vector_len);
    __ movdl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
  
#line 999999
  }
}

void rvadd8I_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 4518 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vphaddd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
    __ vphaddd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, vector_len);
    __ vextracti128_high(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ vpaddd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0);
    __ movdl(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */);
    __ vpaddd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, 0);
    __ movdl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
  
#line 999999
  }
}

void rvadd8I_reduction_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 4544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vextracti128_high(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ vpaddd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
    __ pshufd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, 0xE);
    __ vpaddd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, vector_len);
    __ pshufd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, 0x1);
    __ vpaddd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, vector_len);
    __ movdl(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */);
    __ vpaddd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, vector_len);
    __ movdl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
  
#line 999999
  }
}

void rvadd16I_reduction_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp3
  {
    MacroAssembler _masm(&cbuf);

#line 4574 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vextracti64x4_high(opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* tmp3 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ vpaddd(opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* tmp3 */, opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* tmp3 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 1);
    __ vextracti128_high(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* tmp3 */);
    __ vpaddd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* tmp3 */, 0);
    __ pshufd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, 0xE);
    __ vpaddd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0);
    __ pshufd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, 0x1);
    __ vpaddd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0);
    __ movdl(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */);
    __ vpaddd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0);
    __ movdl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
  
#line 999999
  }
}

void rvadd2L_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 4600 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pshufd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0xE);
    __ vpaddq(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0);
    __ movdq(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */);
    __ vpaddq(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0);
    __ movdq(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
  
#line 999999
  }
}

void rvadd4L_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 4621 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vextracti128_high(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ vpaddq(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0xE);
    __ vpaddq(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, 0);
    __ movdq(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */);
    __ vpaddq(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, 0);
    __ movdq(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
  
#line 999999
  }
}

void rvadd8L_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 4646 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vextracti64x4_high(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ vpaddq(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 1);
    __ vextracti128_high(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
    __ vpaddq(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, 0);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0xE);
    __ vpaddq(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, 0);
    __ movdq(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */);
    __ vpaddq(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, 0);
    __ movdq(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
  
#line 999999
  }
}

void rsadd2F_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    MacroAssembler _masm(&cbuf);

#line 4668 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ addss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x01);
    __ addss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
  
#line 999999
  }
}

void rvadd2F_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    MacroAssembler _masm(&cbuf);

#line 4683 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x01);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
  
#line 999999
  }
}

void rsadd4F_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    MacroAssembler _masm(&cbuf);

#line 4702 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ addss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x01);
    __ addss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x02);
    __ addss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x03);
    __ addss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
  
#line 999999
  }
}

void rvadd4F_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    MacroAssembler _masm(&cbuf);

#line 4725 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x01);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x02);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x03);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
  
#line 999999
  }
}

void radd8F_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 4756 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x01);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x02);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x03);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ vextractf128_high(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0x01);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0x02);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0x03);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
  
#line 999999
  }
}

void radd16F_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 4811 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x01);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x02);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x03);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ vextractf32x4(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x1);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0x01);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0x02);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0x03);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ vextractf32x4(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x2);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0x01);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0x02);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0x03);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ vextractf32x4(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x3);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0x01);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0x02);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0x03);
    __ vaddss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
  
#line 999999
  }
}

void rsadd2D_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    MacroAssembler _masm(&cbuf);

#line 4854 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ addsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0xE);
    __ addsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
  
#line 999999
  }
}

void rvadd2D_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    MacroAssembler _masm(&cbuf);

#line 4869 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vaddsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0xE);
    __ vaddsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
  
#line 999999
  }
}

void rvadd4D_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 4888 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vaddsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0xE);
    __ vaddsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ vextractf32x4(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x1);
    __ vaddsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0xE);
    __ vaddsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
  
#line 999999
  }
}

void rvadd8D_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 4919 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vaddsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0xE);
    __ vaddsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ vextractf32x4(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x1);
    __ vaddsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0xE);
    __ vaddsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ vextractf32x4(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x2);
    __ vaddsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0xE);
    __ vaddsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ vextractf32x4(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x3);
    __ vaddsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0xE);
    __ vaddsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
  
#line 999999
  }
}

void rsmul2I_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 4948 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pshufd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x1);
    __ pmulld(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ movdl(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */);
    __ pmulld(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ movdl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
  
#line 999999
  }
}

void rvmul2I_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 4967 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ pshufd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x1);
    __ vpmulld(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, vector_len);
    __ movdl(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */);
    __ vpmulld(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, vector_len);
    __ movdl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
  
#line 999999
  }
}

void rsmul4I_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 4989 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pshufd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0xE);
    __ pmulld(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0x1);
    __ pmulld(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ movdl(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */);
    __ pmulld(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ movdl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
  
#line 999999
  }
}

void rvmul4I_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 5012 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ pshufd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0xE);
    __ vpmulld(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, vector_len);
    __ pshufd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, 0x1);
    __ vpmulld(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, vector_len);
    __ movdl(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */);
    __ vpmulld(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, vector_len);
    __ movdl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
  
#line 999999
  }
}

void rvmul8I_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 5038 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vextracti128_high(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ vpmulld(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
    __ pshufd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, 0xE);
    __ vpmulld(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, vector_len);
    __ pshufd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, 0x1);
    __ vpmulld(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, vector_len);
    __ movdl(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */);
    __ vpmulld(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, vector_len);
    __ movdl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
  
#line 999999
  }
}

void rvmul16I_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// tmp3
  {
    MacroAssembler _masm(&cbuf);

#line 5068 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vextracti64x4_high(opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* tmp3 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ vpmulld(opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* tmp3 */, opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* tmp3 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 1);
    __ vextracti128_high(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* tmp3 */);
    __ vpmulld(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* tmp3 */, 0);
    __ pshufd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, 0xE);
    __ vpmulld(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0);
    __ pshufd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, 0x1);
    __ vpmulld(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0);
    __ movdl(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */);
    __ vpmulld(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0);
    __ movdl(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
  
#line 999999
  }
}

void rvmul2L_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 5094 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pshufd(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0xE);
    __ vpmullq(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0);
    __ movdq(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */);
    __ vpmullq(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0);
    __ movdq(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
  
#line 999999
  }
}

void rvmul4L_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 5115 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vextracti128_high(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ vpmullq(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0xE);
    __ vpmullq(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, 0);
    __ movdq(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */);
    __ vpmullq(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, 0);
    __ movdq(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
  
#line 999999
  }
}

void rvmul8L_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 5140 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vextracti64x4_high(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ vpmullq(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 1);
    __ vextracti128_high(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
    __ vpmullq(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, 0);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0xE);
    __ vpmullq(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, 0);
    __ movdq(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(1)->as_Register(ra_,this,idx1)/* src1 */);
    __ vpmullq(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, 0);
    __ movdq(opnd_array(0)->as_Register(ra_,this)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
  
#line 999999
  }
}

void rsmul2F_reductionNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    MacroAssembler _masm(&cbuf);

#line 5162 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ mulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x01);
    __ mulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
  
#line 999999
  }
}

void rvmul2F_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    MacroAssembler _masm(&cbuf);

#line 5177 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x01);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
  
#line 999999
  }
}

void rsmul4F_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    MacroAssembler _masm(&cbuf);

#line 5196 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ mulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x01);
    __ mulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x02);
    __ mulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x03);
    __ mulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
  
#line 999999
  }
}

void rvmul4F_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    MacroAssembler _masm(&cbuf);

#line 5219 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x01);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x02);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x03);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
  
#line 999999
  }
}

void rvmul8F_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 5250 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x01);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x02);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x03);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ vextractf128_high(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0x01);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0x02);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0x03);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
  
#line 999999
  }
}

void rvmul16F_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 5305 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x01);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x02);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x03);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ vextractf32x4(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x1);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0x01);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0x02);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0x03);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ vextractf32x4(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x2);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0x01);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0x02);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0x03);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ vextractf32x4(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x3);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0x01);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0x02);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0x03);
    __ vmulss(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
  
#line 999999
  }
}

void rsmul2D_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    MacroAssembler _masm(&cbuf);

#line 5348 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ mulsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0xE);
    __ mulsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
  
#line 999999
  }
}

void rvmul2D_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  {
    MacroAssembler _masm(&cbuf);

#line 5363 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vmulsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0xE);
    __ vmulsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
  
#line 999999
  }
}

void rvmul4D_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 5382 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vmulsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0xE);
    __ vmulsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ vextractf128_high(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ vmulsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0xE);
    __ vmulsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
  
#line 999999
  }
}

void rvmul8D_reduction_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// tmp
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// tmp2
  {
    MacroAssembler _masm(&cbuf);

#line 5413 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ vmulsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0xE);
    __ vmulsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ vextractf32x4(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x1);
    __ vmulsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0xE);
    __ vmulsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ vextractf32x4(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x2);
    __ vmulsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0xE);
    __ vmulsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
    __ vextractf32x4(opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, 0x3);
    __ vmulsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */);
    __ pshufd(opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* tmp2 */, 0xE);
    __ vmulsd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* tmp */);
  
#line 999999
  }
}

void vadd4BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5442 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ paddb(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vadd4B_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 5452 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd4B_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 5463 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd4B_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    MacroAssembler _masm(&cbuf);

#line 5475 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddb(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd4B_mem_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 5486 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd4B_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 5497 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd4B_mem_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5509 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddb(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5520 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ paddb(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vadd8B_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 5530 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd8B_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 5541 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd8B_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    MacroAssembler _masm(&cbuf);

#line 5553 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddb(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd8B_mem_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 5564 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd8B_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 5575 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd8B_mem_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5587 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddb(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5598 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ paddb(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vadd16B_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 5608 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd16B_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 5619 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd16B_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    MacroAssembler _masm(&cbuf);

#line 5631 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddb(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd16B_mem_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 5642 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd16B_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 5653 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd16B_mem_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5665 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddb(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd32B_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 5676 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpaddb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd32B_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 5687 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpaddb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd32B_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    MacroAssembler _masm(&cbuf);

#line 5699 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpaddb(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd32B_mem_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 5710 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpaddb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd32B_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 5721 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpaddb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd32B_mem_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5733 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpaddb(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd64B_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 5744 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpaddb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd64B_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 5755 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpaddb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd2SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5767 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ paddw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vadd2S_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 5777 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd2S_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 5788 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd2S_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    MacroAssembler _masm(&cbuf);

#line 5800 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd2S_mem_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 5811 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd2S_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 5822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd2S_mem_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5834 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5845 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ paddw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vadd4S_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 5855 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd4S_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 5866 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd4S_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    MacroAssembler _masm(&cbuf);

#line 5878 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd4S_mem_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 5889 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd4S_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 5900 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd4S_mem_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5912 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5923 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ paddw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vadd8S_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 5933 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd8S_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 5944 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd8S_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    MacroAssembler _masm(&cbuf);

#line 5956 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd8S_mem_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 5967 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd8S_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 5978 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd8S_mem_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 5990 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd16S_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6001 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpaddw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd16S_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6012 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpaddw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd16S_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    MacroAssembler _masm(&cbuf);

#line 6024 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpaddw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd16S_mem_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6035 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpaddw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd16S_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6046 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpaddw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd16S_mem_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6058 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpaddw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd32S_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6069 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpaddw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd32S_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6080 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpaddw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6092 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ paddd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vadd2I_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6102 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd2I_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6113 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6124 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ paddd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vadd4I_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6134 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd4I_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6145 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd8I_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6156 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpaddd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd8I_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6167 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpaddd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd16I_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6178 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpaddd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd16I_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6189 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpaddd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6201 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ paddq(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vadd2L_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6211 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd2L_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6222 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpaddq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd4L_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6233 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpaddq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd4L_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6244 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpaddq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd8L_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6255 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpaddq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd8L_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6266 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpaddq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6278 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ addps(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vadd2F_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6288 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vaddps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd2F_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6299 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vaddps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6310 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ addps(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vadd4F_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6320 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vaddps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd4F_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6331 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vaddps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd8F_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6342 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vaddps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd8F_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6353 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vaddps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd16F_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6364 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vaddps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd16F_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6375 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vaddps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6387 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ addpd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vadd2D_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6397 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vaddpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd2D_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6408 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vaddpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd4D_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6419 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vaddpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd4D_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6430 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vaddpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vadd8D_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6441 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vaddpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vadd8D_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6452 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vaddpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub4BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6466 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psubb(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vsub4B_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6476 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub4B_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6487 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub4B_reg_exex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    MacroAssembler _masm(&cbuf);

#line 6499 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubb(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub4B_mem_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6510 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub4B_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6521 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub4B_mem_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6533 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubb(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6544 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psubb(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vsub8B_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6554 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub8B_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6565 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub8B_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    MacroAssembler _masm(&cbuf);

#line 6577 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubb(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub8B_mem_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6588 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub8B_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6599 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub8B_mem_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6611 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubb(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6622 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psubb(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vsub16B_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6632 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub16B_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6643 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub16B_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    MacroAssembler _masm(&cbuf);

#line 6655 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubb(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub16B_mem_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6666 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub16B_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6677 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub16B_mem_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6689 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubb(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub32B_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6700 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsubb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub32B_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6711 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsubb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub32B_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    MacroAssembler _masm(&cbuf);

#line 6723 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsubb(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub32B_mem_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6734 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsubb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub32B_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6745 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsubb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub32B_mem_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6757 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsubb(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub64B_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6768 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpsubb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub64B_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6779 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpsubb(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub2SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6791 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psubw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vsub2S_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6801 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub2S_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6812 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub2S_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    MacroAssembler _masm(&cbuf);

#line 6824 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub2S_mem_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6835 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub2S_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6846 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub2S_mem_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6858 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6869 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psubw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vsub4S_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6879 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub4S_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6890 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub4S_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    MacroAssembler _masm(&cbuf);

#line 6902 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub4S_mem_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6913 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub4S_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6924 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub4S_mem_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6936 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 6947 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psubw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vsub8S_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6957 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub8S_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 6968 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub8S_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    MacroAssembler _masm(&cbuf);

#line 6980 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub8S_mem_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 6991 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub8S_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7002 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub8S_mem_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 7014 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub16S_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7025 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsubw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub16S_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7036 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsubw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub16S_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    MacroAssembler _masm(&cbuf);

#line 7048 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsubw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub16S_mem_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7059 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsubw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub16S_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7070 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsubw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub16S_mem_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 7082 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsubw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub32S_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7093 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpsubw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub32S_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7104 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpsubw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 7116 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psubd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vsub2I_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7126 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub2I_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7137 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 7148 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psubd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vsub4I_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7158 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub4I_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7169 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub8I_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7180 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsubd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub8I_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7191 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsubd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub16I_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7202 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpsubd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub16I_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7213 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpsubd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 7225 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psubq(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vsub2L_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7235 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub2L_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7246 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsubq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub4L_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7257 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsubq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub4L_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7268 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsubq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub8L_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7279 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpsubq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub8L_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7290 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpsubq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 7302 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ subps(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vsub2F_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7312 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vsubps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub2F_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7323 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vsubps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 7334 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ subps(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vsub4F_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7344 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vsubps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub4F_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7355 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vsubps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub8F_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7366 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vsubps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub8F_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7377 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vsubps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub16F_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7388 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vsubps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub16F_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7399 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vsubps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 7411 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ subpd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vsub2D_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7421 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vsubpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub2D_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7432 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vsubpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub4D_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7443 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vsubpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub4D_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7454 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vsubpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsub8D_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7465 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vsubpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vsub8D_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7476 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vsubpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul2SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 7490 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pmullw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vmul2S_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7500 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpmullw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul2S_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7511 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpmullw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul2S_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    MacroAssembler _masm(&cbuf);

#line 7523 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpmullw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul2S_mem_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7534 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpmullw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul2S_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7545 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpmullw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul2S_mem_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 7557 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpmullw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 7568 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pmullw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vmul4S_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7578 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpmullw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul4S_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7589 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpmullw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul4S_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    MacroAssembler _masm(&cbuf);

#line 7601 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpmullw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul4S_mem_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7612 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpmullw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul4S_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7623 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpmullw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul4S_mem_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 7635 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpmullw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 7646 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pmullw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vmul8S_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7656 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpmullw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul8S_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7667 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpmullw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul8S_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    MacroAssembler _masm(&cbuf);

#line 7679 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpmullw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul8S_mem_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7690 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpmullw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul8S_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7701 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpmullw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul8S_mem_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 7713 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpmullw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul16S_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7724 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpmullw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul16S_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7735 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpmullw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul16S_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  {
    MacroAssembler _masm(&cbuf);

#line 7747 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpmullw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul16S_mem_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7758 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpmullw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul16S_mem_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7769 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpmullw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul16S_mem_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 7781 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpmullw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul32S_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7792 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpmullw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul32S_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7803 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpmullw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 7815 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pmulld(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vmul2I_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7825 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpmulld(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul2I_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7836 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpmulld(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 7847 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pmulld(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vmul4I_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7857 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpmulld(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul4I_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7868 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpmulld(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul2L_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7879 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpmullq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul2L_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7890 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpmullq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul4L_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7901 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpmullq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul4L_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7912 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpmullq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul8L_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7923 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpmullq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul8L_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7934 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpmullq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul8I_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7945 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpmulld(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul8I_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7956 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpmulld(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul16I_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 7967 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpmulld(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul16I_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 7978 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpmulld(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 7990 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ mulps(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vmul2F_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 8000 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vmulps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul2F_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 8011 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vmulps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 8022 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ mulps(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vmul4F_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 8032 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vmulps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul4F_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 8043 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vmulps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul8F_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 8054 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vmulps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul8F_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 8065 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vmulps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul16F_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 8076 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vmulps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul16F_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 8087 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vmulps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 8099 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ mulpd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vmul2D_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 8109 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vmulpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul2D_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 8120 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vmulpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul4D_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 8131 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vmulpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul4D_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 8142 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vmulpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vmul8D_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 8153 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vmulpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vmul8D_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 8164 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vmulpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vcmov4D_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// copnd
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// cop
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src1
  unsigned idx4 = idx3 + opnd_array(3)->num_edges(); 	// src2
  unsigned idx5 = idx4 + opnd_array(4)->num_edges(); 	// dst
  {
    MacroAssembler _masm(&cbuf);

#line 8178 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    int cond = (Assembler::Condition)(opnd_array(1)->ccode());
    __ cmppd(opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src1 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* src2 */, cond, vector_len);
    __ blendvpd(opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src1 */, opnd_array(4)->as_XMMRegister(ra_,this,idx4)/* src2 */, opnd_array(5)->as_XMMRegister(ra_,this,idx5)/* dst */, vector_len);
  
#line 999999
  }
}

void vdiv2FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 8194 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ divps(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vdiv2F_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 8204 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vdivps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vdiv2F_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 8215 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vdivps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vdiv4FNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 8226 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ divps(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vdiv4F_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 8236 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vdivps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vdiv4F_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 8247 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vdivps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vdiv8F_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 8258 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vdivps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vdiv8F_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 8269 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vdivps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vdiv16F_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 8280 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vdivps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vdiv16F_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 8291 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vdivps(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vdiv2DNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 8303 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ divpd(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vdiv2D_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 8313 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vdivpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vdiv2D_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 8324 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vdivpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vdiv4D_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 8335 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vdivpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vdiv4D_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 8346 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vdivpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vdiv8D_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 8357 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vdivpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vdiv8D_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 8368 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vdivpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vshiftcntNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cnt
  {
    MacroAssembler _masm(&cbuf);

#line 8383 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movdl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* cnt */);
  
#line 999999
  }
}

void vshiftcnt_0Node::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// cnt
  {
    MacroAssembler _masm(&cbuf);

#line 8383 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ movdl(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_Register(ra_,this,idx1)/* cnt */);
  
#line 999999
  }
}

void vsqrt2D_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 8396 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vsqrtpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, vector_len);
  
#line 999999
  }
}

void vsqrt2D_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 8407 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vsqrtpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsqrt4D_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 8418 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vsqrtpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, vector_len);
  
#line 999999
  }
}

void vsqrt4D_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 8429 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vsqrtpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsqrt8D_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 8440 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vsqrtpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, vector_len);
  
#line 999999
  }
}

void vsqrt8D_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 8451 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vsqrtpd(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, Address::make_raw(opnd_array(1)->base(ra_,this,idx1), opnd_array(1)->index(ra_,this,idx1), opnd_array(1)->scale(), opnd_array(1)->disp(ra_,this,idx1), opnd_array(1)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vsll2SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8465 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psllw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */);
  
#line 999999
  }
}

void vsll2S_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8475 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psllw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, (int)opnd_array(2)->constant());
  
#line 999999
  }
}

void vsll2S_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8485 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsllw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsll2S_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8496 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsllw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsll2S_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 8508 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsllw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsll2S_reg_imm_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8519 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsllw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsll2S_reg_imm_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8530 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsllw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsll2S_reg_imm_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 8542 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsllw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsll4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8553 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psllw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */);
  
#line 999999
  }
}

void vsll4S_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8563 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psllw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, (int)opnd_array(2)->constant());
  
#line 999999
  }
}

void vsll4S_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8573 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsllw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsll4S_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8584 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsllw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsll4S_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 8596 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsllw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsll4S_reg_imm_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8607 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsllw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsll4S_reg_imm_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8618 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsllw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsll4S_reg_imm_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 8630 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsllw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsll8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8641 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psllw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */);
  
#line 999999
  }
}

void vsll8S_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8651 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psllw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, (int)opnd_array(2)->constant());
  
#line 999999
  }
}

void vsll8S_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8661 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsllw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsll8S_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8672 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsllw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsll8S_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 8684 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsllw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsll8S_reg_imm_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8695 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsllw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsll8S_reg_imm_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8706 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsllw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsll8S_reg_imm_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 8718 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsllw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsll16S_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8729 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsllw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsll16S_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8740 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsllw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsll16S_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 8752 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsllw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsll16S_reg_imm_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8763 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsllw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsll16S_reg_imm_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8774 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsllw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsll16S_reg_imm_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 8786 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsllw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsll32S_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8797 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpsllw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsll32S_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8808 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpsllw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsll2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8820 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pslld(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */);
  
#line 999999
  }
}

void vsll2I_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8830 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pslld(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, (int)opnd_array(2)->constant());
  
#line 999999
  }
}

void vsll2I_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8840 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpslld(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsll2I_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8851 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpslld(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsll4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8862 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pslld(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */);
  
#line 999999
  }
}

void vsll4I_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8872 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pslld(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, (int)opnd_array(2)->constant());
  
#line 999999
  }
}

void vsll4I_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8882 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpslld(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsll4I_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8893 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpslld(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsll8I_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8904 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpslld(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsll8I_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8915 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpslld(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsll16I_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8926 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpslld(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsll16I_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8937 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpslld(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsll2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8949 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psllq(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */);
  
#line 999999
  }
}

void vsll2L_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8959 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psllq(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, (int)opnd_array(2)->constant());
  
#line 999999
  }
}

void vsll2L_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8969 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsllq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsll2L_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8980 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsllq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsll4L_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 8991 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsllq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsll4L_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9002 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsllq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsll8L_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9013 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpsllq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsll8L_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9024 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpsllq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsrl2SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9042 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psrlw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */);
  
#line 999999
  }
}

void vsrl2S_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9052 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psrlw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, (int)opnd_array(2)->constant());
  
#line 999999
  }
}

void vsrl2S_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9062 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrlw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsrl2S_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9073 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrlw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsrl2S_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 9085 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrlw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsrl2S_reg_imm_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9096 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrlw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsrl2S_reg_imm_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9107 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrlw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsrl2S_reg_imm_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 9119 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrlw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsrl4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9130 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psrlw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */);
  
#line 999999
  }
}

void vsrl4S_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9140 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psrlw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, (int)opnd_array(2)->constant());
  
#line 999999
  }
}

void vsrl4S_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9150 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrlw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsrl4S_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9161 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrlw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsrl4S_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 9173 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrlw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsrl4S_reg_imm_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9184 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrlw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsrl4S_reg_imm_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9195 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrlw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsrl4S_reg_imm_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 9207 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrlw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsrl8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9218 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psrlw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */);
  
#line 999999
  }
}

void vsrl8S_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9228 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psrlw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, (int)opnd_array(2)->constant());
  
#line 999999
  }
}

void vsrl8S_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9238 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrlw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsrl8S_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9249 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrlw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsrl8S_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 9261 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrlw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsrl8S_reg_imm_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9272 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrlw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsrl8S_reg_imm_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9283 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrlw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsrl8S_reg_imm_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 9295 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrlw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsrl16S_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9306 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsrlw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsrl16S_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9317 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsrlw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsrl16S_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 9329 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsrlw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsrl16S_reg_imm_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9340 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsrlw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsrl16S_reg_imm_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9351 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsrlw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsrl16S_reg_imm_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 9363 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsrlw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsrl32S_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9374 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpsrlw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsrl32S_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9385 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpsrlw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsrl2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9397 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psrld(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */);
  
#line 999999
  }
}

void vsrl2I_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9407 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psrld(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, (int)opnd_array(2)->constant());
  
#line 999999
  }
}

void vsrl2I_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9417 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrld(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsrl2I_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9428 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrld(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsrl4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9439 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psrld(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */);
  
#line 999999
  }
}

void vsrl4I_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9449 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psrld(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, (int)opnd_array(2)->constant());
  
#line 999999
  }
}

void vsrl4I_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9459 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrld(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsrl4I_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9470 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrld(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsrl8I_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9481 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsrld(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsrl8I_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9492 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsrld(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsrl16I_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9503 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpsrld(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsrl16I_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9514 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpsrld(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsrl2LNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9526 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psrlq(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */);
  
#line 999999
  }
}

void vsrl2L_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9536 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psrlq(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, (int)opnd_array(2)->constant());
  
#line 999999
  }
}

void vsrl2L_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9546 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrlq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsrl2L_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9557 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrlq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsrl4L_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9568 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsrlq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsrl4L_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9579 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsrlq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsrl8L_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9590 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpsrlq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsrl8L_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9601 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpsrlq(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsra2SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9615 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psraw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */);
  
#line 999999
  }
}

void vsra2S_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9625 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psraw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, (int)opnd_array(2)->constant());
  
#line 999999
  }
}

void vsra2S_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9635 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsraw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsra2S_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9646 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsraw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsra2S_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 9658 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsraw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsra2S_reg_imm_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9669 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsraw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsra2S_reg_imm_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9680 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsraw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsra2S_reg_imm_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 9692 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsraw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsra4SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9703 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psraw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */);
  
#line 999999
  }
}

void vsra4S_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9713 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psraw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, (int)opnd_array(2)->constant());
  
#line 999999
  }
}

void vsra4S_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9723 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsraw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsra4S_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9734 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsraw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsra4S_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 9746 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsraw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsra4S_reg_imm_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9757 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsraw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsra4S_reg_imm_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9768 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsraw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsra4S_reg_imm_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 9780 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsraw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsra8SNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9791 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psraw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */);
  
#line 999999
  }
}

void vsra8S_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9801 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psraw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, (int)opnd_array(2)->constant());
  
#line 999999
  }
}

void vsra8S_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9811 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsraw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsra8S_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9822 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsraw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsra8S_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 9834 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsraw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsra8S_reg_imm_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9845 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsraw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsra8S_reg_imm_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9856 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsraw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsra8S_reg_imm_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 9868 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsraw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsra16S_reg_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9879 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsraw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsra16S_reg_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9890 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsraw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsra16S_reg_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 9902 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsraw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsra16S_reg_imm_avxNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9913 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsraw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsra16S_reg_imm_evexNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9924 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsraw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsra16S_reg_imm_evex_specialNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  unsigned idx3 = idx2 + opnd_array(2)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 9936 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsraw(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(3)->as_XMMRegister(ra_,this,idx3)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsra32S_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9947 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpsraw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsra32S_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9958 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpsraw(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsra2INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9970 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psrad(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */);
  
#line 999999
  }
}

void vsra2I_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9980 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psrad(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, (int)opnd_array(2)->constant());
  
#line 999999
  }
}

void vsra2I_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 9990 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrad(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsra2I_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 10001 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrad(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsra4INode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 10012 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psrad(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */);
  
#line 999999
  }
}

void vsra4I_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 10022 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ psrad(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, (int)opnd_array(2)->constant());
  
#line 999999
  }
}

void vsra4I_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 10032 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrad(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsra4I_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 10043 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpsrad(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsra8I_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 10054 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsrad(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsra8I_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 10065 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpsrad(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vsra16I_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 10076 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpsrad(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* shift */, vector_len);
  
#line 999999
  }
}

void vsra16I_reg_immNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// shift
  {
    MacroAssembler _masm(&cbuf);

#line 10087 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpsrad(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, (int)opnd_array(2)->constant(), vector_len);
  
#line 999999
  }
}

void vand4BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10103 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pand(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vand4B_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 10113 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpand(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vand4B_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 10124 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpand(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vand8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10135 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pand(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vand8B_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 10145 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpand(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vand8B_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 10156 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpand(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vand16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10167 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pand(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vand16B_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 10177 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpand(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vand16B_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 10188 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpand(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vand32B_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 10199 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpand(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vand32B_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 10210 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpand(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vand64B_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 10221 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpand(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vand64B_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 10232 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpand(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vor4BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10245 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ por(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vor4B_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 10255 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vor4B_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 10266 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vor8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10277 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ por(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vor8B_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 10287 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vor8B_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 10298 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vor16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10309 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ por(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vor16B_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 10319 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vor16B_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 10330 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vor32B_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 10341 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vor32B_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 10352 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vor64B_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 10363 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vor64B_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 10374 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vxor4BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10387 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pxor(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vxor4B_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 10397 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vxor4B_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 10408 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vxor8BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10419 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pxor(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vxor8B_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 10429 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vxor8B_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 10440 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vxor16BNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// dst
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src
  {
    MacroAssembler _masm(&cbuf);

#line 10451 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    __ pxor(opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* dst */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src */);
  
#line 999999
  }
}

void vxor16B_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 10461 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vxor16B_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 10472 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 0;
    __ vpxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vxor32B_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 10483 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vxor32B_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 10494 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 1;
    __ vpxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

void vxor64B_regNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 1;
  unsigned idx1 = 1; 	// src1
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// src2
  {
    MacroAssembler _masm(&cbuf);

#line 10505 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src1 */, opnd_array(2)->as_XMMRegister(ra_,this,idx2)/* src2 */, vector_len);
  
#line 999999
  }
}

void vxor64B_memNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
  cbuf.set_insts_mark();
  // Start at oper_input_base() and count operands
  unsigned idx0 = 2;
  unsigned idx1 = 2; 	// src
  unsigned idx2 = idx1 + opnd_array(1)->num_edges(); 	// mem
  {
    MacroAssembler _masm(&cbuf);

#line 10516 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86.ad"

    int vector_len = 2;
    __ vpxor(opnd_array(0)->as_XMMRegister(ra_,this)/* dst */, opnd_array(1)->as_XMMRegister(ra_,this,idx1)/* src */, Address::make_raw(opnd_array(2)->base(ra_,this,idx2), opnd_array(2)->index(ra_,this,idx2), opnd_array(2)->scale(), opnd_array(2)->disp(ra_,this,idx2), opnd_array(2)->disp_reloc()), vector_len);
  
#line 999999
  }
}

const MachOper* loadBNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadB2LNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadUBNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadUB2LNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadUB2L_immINode::memory_operand() const { return _opnds[1]; }
const MachOper* loadSNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadS2BNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadS2LNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadUSNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadUS2BNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadUS2LNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadUS2L_immI_255Node::memory_operand() const { return _opnds[1]; }
const MachOper* loadUS2L_immINode::memory_operand() const { return _opnds[1]; }
const MachOper* loadINode::memory_operand() const { return _opnds[1]; }
const MachOper* loadI2BNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadI2UBNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadI2SNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadI2USNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadI2LNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadI2L_immI_255Node::memory_operand() const { return _opnds[1]; }
const MachOper* loadI2L_immI_65535Node::memory_operand() const { return _opnds[1]; }
const MachOper* loadI2L_immU31Node::memory_operand() const { return _opnds[1]; }
const MachOper* loadUI2LNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadLNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadRangeNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadPNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadNNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadKlassNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadNKlassNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadFNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadD_partialNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadDNode::memory_operand() const { return _opnds[1]; }
const MachOper* prefetchAllocNode::memory_operand() const { return _opnds[1]; }
const MachOper* prefetchAllocNTANode::memory_operand() const { return _opnds[1]; }
const MachOper* prefetchAllocT0Node::memory_operand() const { return _opnds[1]; }
const MachOper* prefetchAllocT2Node::memory_operand() const { return _opnds[1]; }
const MachOper* storeBNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeCNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeINode::memory_operand() const { return _opnds[1]; }
const MachOper* storeLNode::memory_operand() const { return _opnds[1]; }
const MachOper* storePNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeImmP0Node::memory_operand() const { return _opnds[1]; }
const MachOper* storeImmPNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeNNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeNKlassNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeImmN0Node::memory_operand() const { return _opnds[1]; }
const MachOper* storeImmNNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeImmNKlassNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeImmI0Node::memory_operand() const { return _opnds[1]; }
const MachOper* storeImmINode::memory_operand() const { return _opnds[1]; }
const MachOper* storeImmL0Node::memory_operand() const { return _opnds[1]; }
const MachOper* storeImmLNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeImmC0Node::memory_operand() const { return _opnds[1]; }
const MachOper* storeImmI16Node::memory_operand() const { return _opnds[1]; }
const MachOper* storeImmB0Node::memory_operand() const { return _opnds[1]; }
const MachOper* storeImmBNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeImmCM0_regNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeImmCM0Node::memory_operand() const { return _opnds[1]; }
const MachOper* storeFNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeF0Node::memory_operand() const { return _opnds[1]; }
const MachOper* storeF_immNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeDNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeD0_immNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeD0Node::memory_operand() const { return _opnds[1]; }
const MachOper* popCountI_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* popCountL_memNode::memory_operand() const { return _opnds[1]; }
const TypePtr *membar_acquireNode::adr_type() const { return TypePtr::BOTTOM; }
const MachOper* membar_acquireNode::memory_operand() const { return (MachOper*)-1; }
const TypePtr *membar_acquire_0Node::adr_type() const { return TypePtr::BOTTOM; }
const MachOper* membar_acquire_0Node::memory_operand() const { return (MachOper*)-1; }
const TypePtr *membar_acquire_lockNode::adr_type() const { return TypePtr::BOTTOM; }
const MachOper* membar_acquire_lockNode::memory_operand() const { return (MachOper*)-1; }
const TypePtr *membar_releaseNode::adr_type() const { return TypePtr::BOTTOM; }
const MachOper* membar_releaseNode::memory_operand() const { return (MachOper*)-1; }
const TypePtr *membar_release_0Node::adr_type() const { return TypePtr::BOTTOM; }
const MachOper* membar_release_0Node::memory_operand() const { return (MachOper*)-1; }
const TypePtr *membar_release_lockNode::adr_type() const { return TypePtr::BOTTOM; }
const MachOper* membar_release_lockNode::memory_operand() const { return (MachOper*)-1; }
const TypePtr *membar_volatileNode::adr_type() const { return TypePtr::BOTTOM; }
const MachOper* membar_volatileNode::memory_operand() const { return (MachOper*)-1; }
const TypePtr *unnecessary_membar_volatileNode::adr_type() const { return TypePtr::BOTTOM; }
const MachOper* unnecessary_membar_volatileNode::memory_operand() const { return (MachOper*)-1; }
const TypePtr *membar_storestoreNode::adr_type() const { return TypePtr::BOTTOM; }
const MachOper* membar_storestoreNode::memory_operand() const { return (MachOper*)-1; }
const MachOper* cmovI_memNode::memory_operand() const { return _opnds[4]; }
const MachOper* cmovI_memUNode::memory_operand() const { return _opnds[4]; }
const MachOper* cmovI_memUCFNode::memory_operand() const { return _opnds[4]; }
const MachOper* cmovL_memNode::memory_operand() const { return _opnds[4]; }
const MachOper* cmovL_memUNode::memory_operand() const { return _opnds[4]; }
const MachOper* cmovL_memUCFNode::memory_operand() const { return _opnds[4]; }
const MachOper* addI_rReg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* addI_rReg_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* addI_mem_rRegNode::memory_operand() const { return _opnds[1]; }
const MachOper* addI_mem_rReg_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* addI_mem_immNode::memory_operand() const { return _opnds[1]; }
const MachOper* incI_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* decI_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* addL_rReg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* addL_rReg_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* addL_mem_rRegNode::memory_operand() const { return _opnds[1]; }
const MachOper* addL_mem_rReg_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* addL_mem_immNode::memory_operand() const { return _opnds[1]; }
const MachOper* incL_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* decL_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadPLockedNode::memory_operand() const { return _opnds[1]; }
const MachOper* storePConditionalNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeIConditionalNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeLConditionalNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapPNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapP_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapLNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapL_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapINode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapI_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapBNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapB_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapSNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapS_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapNNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndSwapN_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndExchangeBNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndExchangeSNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndExchangeINode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndExchangeLNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndExchangeNNode::memory_operand() const { return _opnds[1]; }
const MachOper* compareAndExchangePNode::memory_operand() const { return _opnds[1]; }
const MachOper* xaddB_no_resNode::memory_operand() const { return _opnds[1]; }
const MachOper* xaddBNode::memory_operand() const { return _opnds[1]; }
const MachOper* xaddS_no_resNode::memory_operand() const { return _opnds[1]; }
const MachOper* xaddSNode::memory_operand() const { return _opnds[1]; }
const MachOper* xaddI_no_resNode::memory_operand() const { return _opnds[1]; }
const MachOper* xaddINode::memory_operand() const { return _opnds[1]; }
const MachOper* xaddL_no_resNode::memory_operand() const { return _opnds[1]; }
const MachOper* xaddLNode::memory_operand() const { return _opnds[1]; }
const MachOper* xchgBNode::memory_operand() const { return _opnds[1]; }
const MachOper* xchgSNode::memory_operand() const { return _opnds[1]; }
const MachOper* xchgINode::memory_operand() const { return _opnds[1]; }
const MachOper* xchgLNode::memory_operand() const { return _opnds[1]; }
const MachOper* xchgPNode::memory_operand() const { return _opnds[1]; }
const MachOper* xchgNNode::memory_operand() const { return _opnds[1]; }
const MachOper* subI_rReg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* subI_mem_rRegNode::memory_operand() const { return _opnds[1]; }
const MachOper* subI_mem_immNode::memory_operand() const { return _opnds[1]; }
const MachOper* subL_rReg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* subL_mem_rRegNode::memory_operand() const { return _opnds[1]; }
const MachOper* subL_mem_immNode::memory_operand() const { return _opnds[1]; }
const MachOper* negI_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* negL_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* mulI_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* mulI_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* mulI_mem_immNode::memory_operand() const { return _opnds[1]; }
const MachOper* mulL_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* mulL_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* mulL_mem_immNode::memory_operand() const { return _opnds[1]; }
const MachOper* salI_mem_1Node::memory_operand() const { return _opnds[1]; }
const MachOper* salI_mem_immNode::memory_operand() const { return _opnds[1]; }
const MachOper* salI_mem_CLNode::memory_operand() const { return _opnds[1]; }
const MachOper* sarI_mem_1Node::memory_operand() const { return _opnds[1]; }
const MachOper* sarI_mem_immNode::memory_operand() const { return _opnds[1]; }
const MachOper* sarI_mem_CLNode::memory_operand() const { return _opnds[1]; }
const MachOper* shrI_mem_1Node::memory_operand() const { return _opnds[1]; }
const MachOper* shrI_mem_immNode::memory_operand() const { return _opnds[1]; }
const MachOper* shrI_mem_CLNode::memory_operand() const { return _opnds[1]; }
const MachOper* salL_mem_1Node::memory_operand() const { return _opnds[1]; }
const MachOper* salL_mem_immNode::memory_operand() const { return _opnds[1]; }
const MachOper* salL_mem_CLNode::memory_operand() const { return _opnds[1]; }
const MachOper* sarL_mem_1Node::memory_operand() const { return _opnds[1]; }
const MachOper* sarL_mem_immNode::memory_operand() const { return _opnds[1]; }
const MachOper* sarL_mem_CLNode::memory_operand() const { return _opnds[1]; }
const MachOper* shrL_mem_1Node::memory_operand() const { return _opnds[1]; }
const MachOper* shrL_mem_immNode::memory_operand() const { return _opnds[1]; }
const MachOper* shrL_mem_CLNode::memory_operand() const { return _opnds[1]; }
const MachOper* andI_rReg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* andI_rReg_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* andI_mem_rRegNode::memory_operand() const { return _opnds[1]; }
const MachOper* andI_mem_rReg_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* andI_mem_immNode::memory_operand() const { return _opnds[1]; }
const MachOper* andnI_rReg_rReg_memNode::memory_operand() const { return _opnds[3]; }
const MachOper* andnI_rReg_rReg_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* blsiI_rReg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* blsiI_rReg_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* blsmskI_rReg_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* blsmskI_rReg_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* blsrI_rReg_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* blsrI_rReg_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* orI_rReg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* orI_rReg_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* orI_mem_rRegNode::memory_operand() const { return _opnds[1]; }
const MachOper* orI_mem_rReg_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* orI_mem_immNode::memory_operand() const { return _opnds[1]; }
const MachOper* xorI_rReg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* xorI_rReg_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* xorI_mem_rRegNode::memory_operand() const { return _opnds[1]; }
const MachOper* xorI_mem_rReg_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* xorI_mem_immNode::memory_operand() const { return _opnds[1]; }
const MachOper* andL_rReg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* andL_rReg_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* andL_mem_rRegNode::memory_operand() const { return _opnds[1]; }
const MachOper* andL_mem_rReg_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* andL_mem_immNode::memory_operand() const { return _opnds[1]; }
const MachOper* andnL_rReg_rReg_memNode::memory_operand() const { return _opnds[3]; }
const MachOper* andnL_rReg_rReg_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* blsiL_rReg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* blsiL_rReg_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* blsmskL_rReg_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* blsmskL_rReg_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* blsrL_rReg_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* blsrL_rReg_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* orL_rReg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* orL_rReg_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* orL_mem_rRegNode::memory_operand() const { return _opnds[1]; }
const MachOper* orL_mem_rReg_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* orL_mem_immNode::memory_operand() const { return _opnds[1]; }
const MachOper* xorL_rReg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* xorL_rReg_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* xorL_mem_rRegNode::memory_operand() const { return _opnds[1]; }
const MachOper* xorL_mem_rReg_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* xorL_mem_immNode::memory_operand() const { return _opnds[1]; }
const MachOper* cmpF_cc_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* cmpF_cc_memCFNode::memory_operand() const { return _opnds[2]; }
const MachOper* cmpD_cc_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* cmpD_cc_memCFNode::memory_operand() const { return _opnds[2]; }
const MachOper* cmpF_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* cmpD_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* convF2D_reg_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* convD2F_reg_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* convI2F_reg_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* convI2D_reg_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* convL2F_reg_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* convL2D_reg_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* convI2L_reg_mem_zexNode::memory_operand() const { return _opnds[1]; }
const MachOper* compI_rReg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* testI_reg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* testI_reg_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* compU_rReg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* compP_rReg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* compP_mem_rRegNode::memory_operand() const { return _opnds[2]; }
const MachOper* testP_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* testP_mem_reg0Node::memory_operand() const { return _opnds[1]; }
const MachOper* compN_rReg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* compN_mem_immNode::memory_operand() const { return _opnds[2]; }
const MachOper* compN_mem_imm_klassNode::memory_operand() const { return _opnds[2]; }
const MachOper* testN_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* testN_mem_reg0Node::memory_operand() const { return _opnds[1]; }
const MachOper* compL_rReg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* testL_reg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* testL_reg_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* compUL_rReg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* addF_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* addF_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* addF_reg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* addF_reg_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* addD_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* addD_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* addD_reg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* addD_reg_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* subF_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* subF_reg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* subD_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* subD_reg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* mulF_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* mulF_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* mulF_reg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* mulF_reg_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* mulD_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* mulD_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* mulD_reg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* mulD_reg_mem_0Node::memory_operand() const { return _opnds[1]; }
const MachOper* divF_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* divF_reg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* divD_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* divD_reg_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* sqrtF_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* sqrtD_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadV4Node::memory_operand() const { return _opnds[1]; }
const MachOper* loadV8Node::memory_operand() const { return _opnds[1]; }
const MachOper* loadV16Node::memory_operand() const { return _opnds[1]; }
const MachOper* loadV32Node::memory_operand() const { return _opnds[1]; }
const MachOper* loadV64_dwordNode::memory_operand() const { return _opnds[1]; }
const MachOper* loadV64_qwordNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeV4Node::memory_operand() const { return _opnds[1]; }
const MachOper* storeV8Node::memory_operand() const { return _opnds[1]; }
const MachOper* storeV16Node::memory_operand() const { return _opnds[1]; }
const MachOper* storeV32Node::memory_operand() const { return _opnds[1]; }
const MachOper* storeV64_dwordNode::memory_operand() const { return _opnds[1]; }
const MachOper* storeV64_qwordNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl4B_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl8B_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl16B_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl32B_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl4S_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl8S_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl16S_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl4I_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl8I_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl2L_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl4L_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl2F_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl4F_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl8F_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl2D_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl4D_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl2I_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl4B_mem_evexNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl8B_mem_evexNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl16B_mem_evexNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl32B_mem_evexNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl64B_mem_evexNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl4S_mem_evexNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl8S_mem_evexNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl16S_mem_evexNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl32S_mem_evexNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl4I_mem_evexNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl8I_mem_evexNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl16I_mem_evexNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl2L_mem_evexNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl4L_mem_evexNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl8L_mem_evexNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl8F_mem_evexNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl16F_mem_evexNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl4D_mem_evexNode::memory_operand() const { return _opnds[1]; }
const MachOper* Repl8D_mem_evexNode::memory_operand() const { return _opnds[1]; }
const MachOper* vadd4B_mem_avxNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd4B_mem_evexNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd4B_mem_evex_specialNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd8B_mem_avxNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd8B_mem_evexNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd8B_mem_evex_specialNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd16B_mem_avxNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd16B_mem_evexNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd16B_mem_evex_specialNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd32B_mem_avxNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd32B_mem_evexNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd32B_mem_evex_specialNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd64B_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd2S_mem_avxNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd2S_mem_evexNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd2S_mem_evex_specialNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd4S_mem_avxNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd4S_mem_evexNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd4S_mem_evex_specialNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd8S_mem_avxNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd8S_mem_evexNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd8S_mem_evex_specialNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd16S_mem_avxNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd16S_mem_evexNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd16S_mem_evex_specialNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd32S_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd2I_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd4I_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd8I_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd16I_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd2L_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd4L_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd8L_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd2F_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd4F_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd8F_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd16F_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd2D_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd4D_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vadd8D_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub4B_mem_avxNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub4B_mem_evexNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub4B_mem_evex_specialNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub8B_mem_avxNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub8B_mem_evexNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub8B_mem_evex_specialNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub16B_mem_avxNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub16B_mem_evexNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub16B_mem_evex_specialNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub32B_mem_avxNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub32B_mem_evexNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub32B_mem_evex_specialNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub64B_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub2S_mem_avxNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub2S_mem_evexNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub2S_mem_evex_specialNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub4S_mem_avxNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub4S_mem_evexNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub4S_mem_evex_specialNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub8S_mem_avxNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub8S_mem_evexNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub8S_mem_evex_specialNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub16S_mem_avxNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub16S_mem_evexNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub16S_mem_evex_specialNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub32S_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub2I_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub4I_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub8I_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub16I_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub2L_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub4L_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub8L_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub2F_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub4F_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub8F_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub16F_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub2D_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub4D_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsub8D_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul2S_mem_avxNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul2S_mem_evexNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul2S_mem_evex_specialNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul4S_mem_avxNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul4S_mem_evexNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul4S_mem_evex_specialNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul8S_mem_avxNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul8S_mem_evexNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul8S_mem_evex_specialNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul16S_mem_avxNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul16S_mem_evexNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul16S_mem_evex_specialNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul32S_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul2I_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul4I_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul2L_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul4L_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul8L_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul8I_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul16I_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul2F_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul4F_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul8F_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul16F_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul2D_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul4D_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vmul8D_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vdiv2F_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vdiv4F_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vdiv8F_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vdiv16F_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vdiv2D_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vdiv4D_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vdiv8D_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vsqrt2D_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* vsqrt4D_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* vsqrt8D_memNode::memory_operand() const { return _opnds[1]; }
const MachOper* vand4B_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vand8B_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vand16B_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vand32B_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vand64B_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vor4B_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vor8B_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vor16B_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vor32B_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vor64B_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vxor4B_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vxor8B_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vxor16B_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vxor32B_memNode::memory_operand() const { return _opnds[2]; }
const MachOper* vxor64B_memNode::memory_operand() const { return _opnds[2]; }


const bool Matcher::has_match_rule(int opcode) {
  assert(_last_machine_leaf < opcode && opcode < _last_opcode, "opcode in range");
  return _hasMatchRule[opcode];
}

const bool Matcher::_hasMatchRule[_last_opcode] = {
    false,  // Node
    false,  // Set
    false,  // RegN
    false,  // RegI
    false,  // RegP
    false,  // RegF
    false,  // RegD
    false,  // RegL
    false,  // RegFlags
    false,  // VecS
    false,  // VecD
    false,  // VecX
    false,  // VecY
    false,  // VecZ
    false,  // _last_machine_leaf
    true ,  // AbsD
    true ,  // AbsF
    false,  // AbsI
    true ,  // AddD
    true ,  // AddF
    true ,  // AddI
    true ,  // AddL
    true ,  // AddP
    false,  // Allocate
    false,  // AllocateArray
    true ,  // AndI
    true ,  // AndL
    false,  // ArrayCopy
    true ,  // AryEq
    false,  // AtanD
    true ,  // Binary
    true ,  // Bool
    false,  // BoxLock
    true ,  // ReverseBytesI
    true ,  // ReverseBytesL
    true ,  // ReverseBytesUS
    true ,  // ReverseBytesS
    false,  // CProj
    true ,  // CallDynamicJava
    false,  // CallJava
    true ,  // CallLeaf
    true ,  // CallLeafNoFP
    true ,  // CallRuntime
    true ,  // CallStaticJava
    true ,  // CastII
    true ,  // CastX2P
    true ,  // CastP2X
    true ,  // CastPP
    false,  // Catch
    false,  // CatchProj
    true ,  // CheckCastPP
    true ,  // ClearArray
    false,  // ConstraintCast
    true ,  // CMoveD
    true ,  // CMoveVD
    true ,  // CMoveF
    true ,  // CMoveI
    true ,  // CMoveL
    true ,  // CMoveP
    true ,  // CMoveN
    true ,  // CmpN
    true ,  // CmpD
    true ,  // CmpD3
    true ,  // CmpF
    true ,  // CmpF3
    true ,  // CmpI
    true ,  // CmpL
    true ,  // CmpL3
    true ,  // CmpLTMask
    true ,  // CmpP
    true ,  // CmpU
    true ,  // CmpUL
    true ,  // CompareAndSwapB
    true ,  // CompareAndSwapS
    true ,  // CompareAndSwapI
    true ,  // CompareAndSwapL
    true ,  // CompareAndSwapP
    true ,  // CompareAndSwapN
    true ,  // WeakCompareAndSwapB
    true ,  // WeakCompareAndSwapS
    true ,  // WeakCompareAndSwapI
    true ,  // WeakCompareAndSwapL
    true ,  // WeakCompareAndSwapP
    true ,  // WeakCompareAndSwapN
    true ,  // CompareAndExchangeB
    true ,  // CompareAndExchangeS
    true ,  // CompareAndExchangeI
    true ,  // CompareAndExchangeL
    true ,  // CompareAndExchangeP
    true ,  // CompareAndExchangeN
    true ,  // GetAndAddB
    true ,  // GetAndAddS
    true ,  // GetAndAddI
    true ,  // GetAndAddL
    true ,  // GetAndSetB
    true ,  // GetAndSetS
    true ,  // GetAndSetI
    true ,  // GetAndSetL
    true ,  // GetAndSetP
    true ,  // GetAndSetN
    false,  // Con
    true ,  // ConN
    true ,  // ConNKlass
    true ,  // ConD
    true ,  // ConF
    true ,  // ConI
    true ,  // ConL
    true ,  // ConP
    true ,  // Conv2B
    true ,  // ConvD2F
    true ,  // ConvD2I
    true ,  // ConvD2L
    true ,  // ConvF2D
    true ,  // ConvF2I
    true ,  // ConvF2L
    true ,  // ConvI2D
    true ,  // ConvI2F
    true ,  // ConvI2L
    true ,  // ConvL2D
    true ,  // ConvL2F
    true ,  // ConvL2I
    false,  // CountedLoop
    true ,  // CountedLoopEnd
    true ,  // CountLeadingZerosI
    true ,  // CountLeadingZerosL
    true ,  // CountTrailingZerosI
    true ,  // CountTrailingZerosL
    true ,  // CreateEx
    true ,  // DecodeN
    true ,  // DecodeNKlass
    true ,  // DivD
    true ,  // DivF
    true ,  // DivI
    true ,  // DivL
    false,  // DivMod
    true ,  // DivModI
    true ,  // DivModL
    true ,  // EncodeISOArray
    true ,  // EncodeP
    true ,  // EncodePKlass
    true ,  // FastLock
    true ,  // FastUnlock
    true ,  // FmaD
    true ,  // FmaF
    true ,  // Goto
    true ,  // Halt
    true ,  // HasNegatives
    true ,  // If
    false,  // RangeCheck
    false,  // IfFalse
    false,  // IfTrue
    false,  // Initialize
    false,  // JProj
    true ,  // Jump
    false,  // JumpProj
    true ,  // LShiftI
    true ,  // LShiftL
    true ,  // LoadB
    true ,  // LoadUB
    true ,  // LoadUS
    true ,  // LoadD
    false,  // LoadD_unaligned
    true ,  // LoadF
    true ,  // LoadI
    true ,  // LoadKlass
    true ,  // LoadNKlass
    true ,  // LoadL
    false,  // LoadL_unaligned
    true ,  // LoadPLocked
    true ,  // LoadP
    true ,  // LoadN
    true ,  // LoadRange
    true ,  // LoadS
    false,  // Lock
    false,  // Loop
    false,  // LoopLimit
    false,  // Mach
    false,  // MachProj
    true ,  // MaxI
    true ,  // MemBarAcquire
    true ,  // LoadFence
    true ,  // SetVectMaskI
    true ,  // MemBarAcquireLock
    false,  // MemBarCPUOrder
    true ,  // MemBarRelease
    true ,  // StoreFence
    true ,  // MemBarReleaseLock
    true ,  // MemBarVolatile
    true ,  // MemBarStoreStore
    false,  // MergeMem
    true ,  // MinI
    false,  // ModD
    false,  // ModF
    true ,  // ModI
    true ,  // ModL
    true ,  // MoveI2F
    true ,  // MoveF2I
    true ,  // MoveL2D
    true ,  // MoveD2L
    true ,  // MulD
    true ,  // MulF
    true ,  // MulHiL
    true ,  // MulI
    true ,  // MulL
    false,  // Multi
    true ,  // NegD
    true ,  // NegF
    false,  // NeverBranch
    true ,  // OnSpinWait
    false,  // Opaque1
    false,  // Opaque2
    false,  // Opaque3
    false,  // ProfileBoolean
    true ,  // OrI
    true ,  // OrL
    true ,  // OverflowAddI
    true ,  // OverflowSubI
    true ,  // OverflowMulI
    true ,  // OverflowAddL
    true ,  // OverflowSubL
    true ,  // OverflowMulL
    false,  // PCTable
    false,  // Parm
    true ,  // PartialSubtypeCheck
    false,  // Phi
    true ,  // PopCountI
    true ,  // PopCountL
    true ,  // PrefetchAllocation
    false,  // Proj
    true ,  // RShiftI
    true ,  // RShiftL
    false,  // Region
    true ,  // Rethrow
    true ,  // Return
    false,  // Root
    true ,  // RoundDouble
    true ,  // RoundFloat
    true ,  // SafePoint
    false,  // SafePointScalarObject
    false,  // SCMemProj
    true ,  // SqrtD
    false,  // Start
    false,  // StartOSR
    true ,  // StoreB
    true ,  // StoreC
    true ,  // StoreCM
    true ,  // StorePConditional
    true ,  // StoreIConditional
    true ,  // StoreLConditional
    true ,  // StoreD
    true ,  // StoreF
    true ,  // StoreI
    true ,  // StoreL
    true ,  // StoreP
    true ,  // StoreN
    true ,  // StoreNKlass
    true ,  // StrComp
    true ,  // StrCompressedCopy
    true ,  // StrEquals
    true ,  // StrIndexOf
    true ,  // StrIndexOfChar
    true ,  // StrInflatedCopy
    true ,  // SubD
    true ,  // SubF
    true ,  // SubI
    true ,  // SubL
    true ,  // TailCall
    true ,  // TailJump
    true ,  // ThreadLocal
    false,  // Unlock
    true ,  // URShiftI
    true ,  // URShiftL
    true ,  // XorI
    true ,  // XorL
    false,  // Vector
    true ,  // AddVB
    true ,  // AddVS
    true ,  // AddVI
    true ,  // AddReductionVI
    true ,  // AddVL
    true ,  // AddReductionVL
    true ,  // AddVF
    true ,  // AddReductionVF
    true ,  // AddVD
    true ,  // AddReductionVD
    true ,  // SubVB
    true ,  // SubVS
    true ,  // SubVI
    true ,  // SubVL
    true ,  // SubVF
    true ,  // SubVD
    true ,  // MulVS
    true ,  // MulVI
    true ,  // MulReductionVI
    true ,  // MulVL
    true ,  // MulReductionVL
    true ,  // MulVF
    true ,  // MulReductionVF
    true ,  // MulVD
    true ,  // MulReductionVD
    true ,  // DivVF
    true ,  // DivVD
    false,  // AbsVF
    false,  // AbsVD
    false,  // NegVF
    false,  // NegVD
    true ,  // SqrtVD
    true ,  // LShiftCntV
    true ,  // RShiftCntV
    false,  // LShiftVB
    true ,  // LShiftVS
    true ,  // LShiftVI
    true ,  // LShiftVL
    false,  // RShiftVB
    true ,  // RShiftVS
    true ,  // RShiftVI
    false,  // RShiftVL
    false,  // URShiftVB
    true ,  // URShiftVS
    true ,  // URShiftVI
    true ,  // URShiftVL
    true ,  // AndV
    true ,  // OrV
    true ,  // XorV
    true ,  // LoadVector
    true ,  // StoreVector
    false,  // Pack
    false,  // PackB
    false,  // PackS
    false,  // PackI
    false,  // PackL
    false,  // PackF
    false,  // PackD
    false,  // Pack2L
    false,  // Pack2D
    true ,  // ReplicateB
    true ,  // ReplicateS
    true ,  // ReplicateI
    true ,  // ReplicateL
    true ,  // ReplicateF
    true ,  // ReplicateD
    false,  // Extract
    false,  // ExtractB
    false,  // ExtractUB
    false,  // ExtractC
    false,  // ExtractS
    false,  // ExtractI
    false,  // ExtractL
    false,  // ExtractF
    false   // ExtractD
};


bool Matcher::stack_direction() const { return false; }

int Compile::sync_stack_slots() const { return 2; }

uint Matcher::stack_alignment_in_bytes() { return StackAlignmentInBytes; }

OptoReg::Name Matcher::return_addr() const { return OptoReg::stack2reg(- 2 +
              round_to((Compile::current()->in_preserve_stack_slots() +
                        Compile::current()->fixed_slots()),
                       stack_alignment_in_slots())); }

uint Compile::in_preserve_stack_slots() { return 4 + 2 * VerifyStackAtCalls; }

uint Compile::out_preserve_stack_slots() { return SharedRuntime::out_preserve_stack_slots(); }

uint Compile::varargs_C_out_slots_killed() const { return frame::arg_reg_save_area_bytes/BytesPerInt; }

void Matcher::calling_convention(BasicType *sig_bt, VMRegPair *regs, uint length, bool is_outgoing) {

#line 2825 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // No difference between ingoing/outgoing just pass false
    SharedRuntime::java_calling_convention(sig_bt, regs, length, false);
  
#line 999999

}

void Matcher::c_calling_convention(BasicType *sig_bt, VMRegPair *regs, uint length) {

#line 2831 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    // This is obviously always outgoing
    (void) SharedRuntime::c_calling_convention(sig_bt, regs, /*regs2=*/NULL, length);
  
#line 999999

}

OptoRegPair Matcher::return_value(int ideal_reg, bool is_outgoing) {

#line 2838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    assert(ideal_reg >= Op_RegI && ideal_reg <= Op_RegL,
           "only return normal values");

    static const int lo[Op_RegL + 1] = {
      0,
      0,
      RAX_num,  // Op_RegN
      RAX_num,  // Op_RegI
      RAX_num,  // Op_RegP
      XMM0_num, // Op_RegF
      XMM0_num, // Op_RegD
      RAX_num   // Op_RegL
    };
    static const int hi[Op_RegL + 1] = {
      0,
      0,
      OptoReg::Bad, // Op_RegN
      OptoReg::Bad, // Op_RegI
      RAX_H_num,    // Op_RegP
      OptoReg::Bad, // Op_RegF
      XMM0b_num,    // Op_RegD
      RAX_H_num     // Op_RegL
    };
    // Excluded flags and vector registers.
    assert(ARRAY_SIZE(hi) == _last_machine_leaf - 6, "missing type");
    return OptoRegPair(hi[ideal_reg], lo[ideal_reg]);
  
#line 999999

}

OptoRegPair Matcher::c_return_value(int ideal_reg, bool is_outgoing) {

#line 2838 "/Users/chenyongda/YourOpenJDK/hotspot/src/cpu/x86/vm/x86_64.ad"

    assert(ideal_reg >= Op_RegI && ideal_reg <= Op_RegL,
           "only return normal values");

    static const int lo[Op_RegL + 1] = {
      0,
      0,
      RAX_num,  // Op_RegN
      RAX_num,  // Op_RegI
      RAX_num,  // Op_RegP
      XMM0_num, // Op_RegF
      XMM0_num, // Op_RegD
      RAX_num   // Op_RegL
    };
    static const int hi[Op_RegL + 1] = {
      0,
      0,
      OptoReg::Bad, // Op_RegN
      OptoReg::Bad, // Op_RegI
      RAX_H_num,    // Op_RegP
      OptoReg::Bad, // Op_RegF
      XMM0b_num,    // Op_RegD
      RAX_H_num     // Op_RegL
    };
    // Excluded flags and vector registers.
    assert(ARRAY_SIZE(hi) == _last_machine_leaf - 6, "missing type");
    return OptoRegPair(hi[ideal_reg], lo[ideal_reg]);
  
#line 999999

}

OptoReg::Name Matcher::inline_cache_reg() { return OptoReg::Name(RAX_num); }

int Matcher::inline_cache_reg_encode() { return _regEncode[inline_cache_reg()]; }

OptoReg::Name Matcher::interpreter_method_oop_reg() { return OptoReg::Name(RBX_num); }

int Matcher::interpreter_method_oop_reg_encode() { return _regEncode[interpreter_method_oop_reg()]; }

OptoReg::Name Matcher::interpreter_frame_pointer_reg() { return OptoReg::Name(RBP_num); }

OptoReg::Name Matcher::c_frame_pointer() const { return OptoReg::Name(RSP_num); }

// Number of callee-save + always-save registers
int  Matcher::number_of_saved_registers() {
  return 0;
};

bool Compile::needs_clone_jvms() { return false; }

// Check consistency of C++ compilation with ADLC options:
// Check adlc -D_ALLBSD_SOURCE=1
#ifndef _ALLBSD_SOURCE
#  error "_ALLBSD_SOURCE must be defined"
#endif // _ALLBSD_SOURCE
// Check adlc -D_GNU_SOURCE=1
#ifndef _GNU_SOURCE
#  error "_GNU_SOURCE must be defined"
#endif // _GNU_SOURCE
// Check adlc -DAMD64=1
#ifndef AMD64
#  error "AMD64 must be defined"
#endif // AMD64
// Check adlc -D_LP64=1
#ifndef _LP64
#  error "_LP64 must be defined"
#endif // _LP64
